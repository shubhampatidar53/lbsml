xquery version '1.0-ml';

module namespace firm = 'http://alm.com/firm';

import module namespace config = 'http://alm.com/config' at '/common/config.xqy';
import module namespace helper = 'http://alm.com/helper' at '/common/model/helper.xqy';
import module namespace firmnew = 'http://alm.com/firmnew' at '/common/model/firmnew.xqy';
import module namespace search = 'http://marklogic.com/appservices/search' at '/MarkLogic/appservices/search/search.xqy';
import module namespace json = 'http://marklogic.com/xdmp/json'  at '/MarkLogic/json/json.xqy';
import module namespace firm-comp = 'http://alm.com/firm-comparison' at '/common/model/firm-comparison.xqy';
import module namespace mergertool = 'http://alm.com/mergertool' at '/common/model/mergertool.xqy';

declare namespace organization = 'http://alm.com/LegalCompass/dd/organization';
declare namespace rd-organization = 'http://alm.com/LegalCompass/rd/organization';
declare namespace org-address = 'http://alm.com/LegalCompass/rd/organization-address';
declare namespace survey = 'http://alm.com/LegalCompass/dd/survey';
declare namespace xref = 'http://alm.com/LegalCompass/rd/FIRMS_ALI_XREF_RE';
declare namespace rd_person = 'http://alm.com/LegalCompass/rd/person';
declare namespace dd_person = 'http://alm.com/LegalCompass/dd/person';
declare namespace practices_kws = 'http://alm.com/LegalCompass/rd/practices_kws';
declare namespace city = 'http://alm.com/LegalCompass/rd/city';
declare namespace company = 'http://alm.com/LegalCompass/rd/company';
declare namespace organization-branch = 'http://alm.com/LegalCompass/rd/organization-branch';
declare namespace bdbs-representer = 'http://alm.com/LegalCompass/rd/bdbs-representer';
declare namespace bdbs-party = 'http://alm.com/LegalCompass/rd/bdbs-party';
declare namespace bdbs-transaction = 'http://alm.com/LegalCompass/rd/bdbs-transaction';
declare namespace data = 'http://alm.com/LegalCompass/rd/data';
declare namespace survey-listing = 'http://alm.com/LegalCompass/dd/survey-listing';
declare namespace Who_Counsels_who = 'http://alm.com/LegalCompass/rd/Who_Counsels_who';
declare namespace COMPANYPROFILE_LFR_NEW = 'http://alm.com/LegalCompass/rd/COMPANYPROFILE_LFR_NEW';
declare namespace COMPANYPROFILE_LFR = 'http://alm.com/LegalCompass/rd/COMPANYPROFILE_LFR';
declare namespace TOP500 = 'http://alm.com/LegalCompass/rd/TOP500';
declare namespace people_changes = 'http://alm.com/LegalCompass/rd/people_changes';
declare namespace organization-contact = 'http://alm.com/LegalCompass/rd/organization-contact';
declare namespace org-branch = 'http://alm.com/LegalCompass/rd/organization-branch';
declare namespace city_detail = 'http://alm.com/LegalCompass/rd/city_detail';
declare namespace ALI_RE_LateralMoves_Data = 'http://alm.com/LegalCompass/rd/ALI_RE_LateralMoves_Data';
declare namespace lfp_news = 'http://alm.com/LegalCompass/rd/lawfirmprofile_news';
declare namespace REPRESENTATION_TYPES = 'http://alm.com/LegalCompass/rd/REPRESENTATION_TYPES';

declare namespace organizations = 'http://alm.com/LegalCompass/rd/organization';
declare namespace amlaw100 = 'http://alm.com/LegalCompass/rd/AMLAW_100';
declare namespace Global_100 = 'http://alm.com/LegalCompass/rd/Global_100';
declare namespace nlj250 = 'http://alm.com/LegalCompass/rd/NLJ_250';
declare namespace dc20 = 'http://alm.com/LegalCompass/rd/DC20';
declare namespace legaltimes =  'http://alm.com/LegalCompass/rd/Legal_Times_150';
declare namespace ny100 = 'http://alm.com/LegalCompass/rd/NY100';
declare namespace alist = 'http://alm.com/LegalCompass/rd/ALIST';
declare namespace tx100 = 'http://alm.com/LegalCompass/rd/TX100';
declare namespace nljlgbt = "http://alm.com/LegalCompass/rd/NLJ_LGBT";

declare namespace AMLAW_200 = 'http://alm.com/LegalCompass/rd/AMLAW_200';
declare namespace Diversity_Scorecard = 'http://alm.com/LegalCompass/rd/Diversity_Scorecard';
declare namespace FEMALE_SCORECARD = 'http://alm.com/LegalCompass/rd/FEMALE_SCORECARD';
declare namespace UK_50 = 'http://alm.com/LegalCompass/rd/UK_50';
declare namespace CHINA_40 = 'http://alm.com/LegalCompass/rd/CHINA_40';

declare namespace firm-org = 'http://alm.com/LegalCompass/lawfirm/dd/organization';

declare namespace ALI_RE_Attorney_Data = 'http://alm.com/LegalCompass/dd/ALI_RE_Attorney_Data';
declare namespace TBL_RER_CACHE_ATTORNEY_MOVESCHANGES = 'http://alm.com/LegalCompass/dd/TBL_RER_CACHE_ATTORNEY_MOVESCHANGES';
declare namespace TBL_RER_CACHE_ATTORNEY_DATA = 'http://alm.com/LegalCompass/dd/TBL_RER_CACHE_ATTORNEY_DATA';
declare namespace LawFirm_PracticeArea = "http://alm.com/LegalCompass/rd/LawFirm_PracticeArea";
declare namespace LAWFIRMLOCATIONS = "http://alm.com/LegalCompass/rd/LAWFIRMLOCATIONS";
declare namespace LawFirmMergers ="http://alm.com/LegalCompass/rd/LAWFIRM_MERGERS";

declare variable $company-obj := json:object();

declare option xdmp:mapping 'false';

declare function firm:GeLawFirmProfileNews(
	 $fromDate
	,$toDate
	,$ALIFirmId
	,$Source
	,$Keywords,
	$IsGetFullData
)
{
	(: let $fromDate := fn:tokenize($fromDate,'T')[1]
	let $toDate := fn:tokenize($toDate,'T')[1] :)
	
	let $ALIFirmId := fn:tokenize($ALIFirmId,',')
	
	let $firm_q := if ($ALIFirmId) then 
			cts:element-value-query(xs:QName('lfp_news:FIRMID'),$ALIFirmId)
		else ()
	
	let $source_q := if ($Source != '') then
			if ($Source = 'General News') then
				cts:not-query(cts:element-value-query(xs:QName('lfp_news:NEWSPUBLISHER'),'Firm Site'))
			else (
				if ($Source = 'Law Firm Website') then
					cts:element-value-query(xs:QName('lfp_news:NEWSPUBLISHER'),fn:normalize-space(fn:replace('Firm Site',"'","''")))
				else 
					cts:element-value-query(xs:QName('lfp_news:NEWSPUBLISHER'),fn:normalize-space(fn:replace($Source,"'","''")))
			)
		else ()
		
	let $keyword_q := if ($Keywords != '') then
			let $q := fn:normalize-space(fn:replace($Keywords,"'","''"))
			return cts:element-word-query(xs:QName('lfp_news:HEADLINE'),fn:concat('*',$q,'*'),('case-insensitive','wildcarded'))
		else ()
	
	
	let $date_q := if (($fromDate != '') and ($toDate != '')) then (
			 cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '>=', xs:dateTime($fromDate))
			,cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '<=', xs:dateTime($toDate))
			,cts:not-query(cts:element-value-query(xs:QName('lfp_news:SORTDATE'), ''))
			)
		else ()

	let $conditions := (
		 cts:directory-query($config:RD-LAWFIRMPROFILE-NEWS-PATH,'infinity')
		,$date_q
		,$firm_q
		,$source_q
		,$keyword_q
	)
	let $orderBy := cts:index-order(cts:element-reference(xs:QName('lfp_news:NEWSDATE')) ,'descending')
	let $response := if($IsGetFullData eq '0') then cts:search(/LAWFIRMPROFILE_NEWS, cts:and-query(($conditions)),$orderBy)[1 to 5]
					 else cts:search(/LAWFIRMPROFILE_NEWS, cts:and-query(($conditions)),$orderBy)
					 
	let $count := count($response)
	let $response := element {'RESULT'} {$response}
	
	let $custom :=
		let $config := json:config('custom')
		let $_ := map:put( $config, 'whitespace', 'ignore' )
		let $_ := map:put( $config, 'array-element-names', ('LAWFIRMPROFILE_NEWS') )
		return $config
	
	let $response := if ($count > 1) then 
			xdmp:to-json-string(json:transform-to-json($response, $custom)//LAWFIRMPROFILE_NEWS) 
		else json:to-array(json:transform-to-json($response, $custom)//LAWFIRMPROFILE_NEWS)
	
	return $response

};

declare function firm:GeLawFirmProfileNews_bkp(
	 $fromDate
	,$toDate
	,$ALIFirmId
	,$Source
	,$Keywords
)
{
	(: let $fromDate := fn:tokenize($fromDate,'T')[1]
	let $toDate := fn:tokenize($toDate,'T')[1] :)
	
	let $ALIFirmId := fn:tokenize($ALIFirmId,',')
	
	let $firm_q := if ($ALIFirmId) then 
			cts:element-value-query(xs:QName('lfp_news:FIRMID'),$ALIFirmId)
		else ()
	
	let $source_q := if ($Source != '') then
			if ($Source = 'General News') then
				cts:not-query(cts:element-value-query(xs:QName('lfp_news:NEWSPUBLISHER'),'Firm Site'))
			else (
				if ($Source = 'Law Firm Website') then
					cts:element-value-query(xs:QName('lfp_news:NEWSPUBLISHER'),fn:normalize-space(fn:replace('Firm Site',"'","''")))
				else 
					cts:element-value-query(xs:QName('lfp_news:NEWSPUBLISHER'),fn:normalize-space(fn:replace($Source,"'","''")))
			)
		else ()
		
	let $keyword_q := if ($Keywords != '') then
			let $q := fn:normalize-space(fn:replace($Keywords,"'","''"))
			return cts:element-word-query(xs:QName('lfp_news:HEADLINE'),fn:concat('*',$q,'*'),('case-insensitive','wildcarded'))
		else ()
	
	
	let $date_q := if (($fromDate != '') and ($toDate != '')) then (
			 cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '>=', xs:dateTime($fromDate))
			,cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '<=', xs:dateTime($toDate))
			,cts:not-query(cts:element-value-query(xs:QName('lfp_news:SORTDATE'), ''))
			)
		else ()

	let $conditions := (
		 cts:directory-query($config:RD-LAWFIRMPROFILE-NEWS-PATH,'infinity')
		,$date_q
		,$firm_q
		,$source_q
		,$keyword_q
	)

	let $response := cts:search(/LAWFIRMPROFILE_NEWS, cts:and-query(($conditions)))
	let $count := fn:count($response)
	let $response := element {'RESULT'} {$response}
	
	let $custom :=
		let $config := json:config('custom')
		let $_ := map:put( $config, 'whitespace', 'ignore' )
		let $_ := map:put( $config, 'array-element-names', ('LAWFIRMPROFILE_NEWS') )
		return $config
	
	let $response := if ($count > 1) then 
			xdmp:to-json-string(json:transform-to-json($response, $custom)//LAWFIRMPROFILE_NEWS) 
		else json:to-array(json:transform-to-json($response, $custom)//LAWFIRMPROFILE_NEWS)
	
	return $response

};

declare function firm:IsNewsExists(
	$firmID
)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($firmID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$firmID),',') else $firmID						
	
	let $res := cts:search(/LAWFIRMPROFILE_NEWS,
		cts:and-query((
			 cts:directory-query($config:RD-LAWFIRMPROFILE-NEWS-PATH,'infinity')
			,cts:element-value-query(xs:QName('lfp_news:FIRMID'),$orgIDs)
		)))[1]
	  
	return if ($res) then '1' else '0'
};

declare function firm:sp_GetLawFirmStatics_LawSchool1(
	 $PageNo
	,$PageSize
	,$firmIds
	,$practiceAreas
	,$fromDate
	,$toDate
	,$firmSizefrom
	,$firmSizeTo
	,$FirmLocation
	,$Cities
	,$States
	,$Countries
	,$GeoGraphicRegions
	,$UsRegions
	,$lawschools
	,$sortBy
	,$sortDirection
)
{
	(: let $start := xs:integer($PageNo)
	let $end := xs:integer($PageSize) :)
	let $start := xs:integer(((xs:integer($PageNo)* xs:integer($PageSize))-xs:integer($PageSize))+1)
	let $end := xs:integer((xs:integer($start) + xs:integer($PageSize)) - 1 )
	
let $sortD := if($sortDirection eq 'desc') then 'descending' else 'ascending'
	let $fromDate := fn:tokenize($fromDate,'T')[1]
	let $toDate := fn:tokenize($toDate,'T')[1]

	let $location_val := if(($Cities !='') or ($States !='') or ($Countries != '') or ($GeoGraphicRegions !='') or  ($UsRegions !='')) then
	   cts:search(/city,
		 cts:and-query((
			cts:directory-query($config:RD-CITY-PATH)
		   ,cts:or-query((
			  cts:element-value-query(xs:QName('city:city'), $Cities, ('case-insensitive'))
			 ,cts:element-value-query(xs:QName('city:state'), $States, ('case-insensitive'))
			 ,cts:element-value-query(xs:QName('city:country'), $Countries, ('case-insensitive'))
			 ,cts:element-value-query(xs:QName('city:geographic_region'), $GeoGraphicRegions, ('case-insensitive'))
			 ,cts:element-value-query(xs:QName('city:us_region'), $UsRegions, ('case-insensitive'))
		 )))))/city:std_loc/text()
	  else (: fn:distinct-values(cts:search(/city,
			 cts:and-query((
				cts:directory-query($config:RD-CITY-PATH)
			 )))/city:std_loc/text()) :) ()

	let $date_q := if (($fromDate != '') and ($toDate != '')) then (
			 cts:element-range-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action_date'), '>=', xs:date($fromDate))
			,cts:element-range-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action_date'), '<=', xs:date($toDate))
		)
		else ()
	
	let $practiceAreas := if ($practiceAreas != '') then 
			let $key := fn:tokenize($practiceAreas,'[|]')
			let $res :=  cts:element-values(xs:QName('practices_kws:practice_area'),(),(), cts:and-query((
					cts:element-value-query(xs:QName('practices_kws:practice_area'),$key, ('wildcarded', 'case-insensitive'))
				)))
			return $res
		else ()
	
	
	let $firm_id_q := if ($firmIds != '') then
			let $firmIds := fn:tokenize($firmIds,',')
			return cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:RE_ID'),$firmIds)
		else ()
		
	let $re_id_q := if ($firmIds != '') then
			let $firmIds := fn:tokenize($firmIds,',')
			return cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:firm_id'),$firmIds)
		else ()
	
	let $attorney_conditions := (
		 cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
		,if ($location_val != '') then cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'),$location_val,('case-insensitive')) else ()
		(:,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:std_school'),'')):)
		,if ($practiceAreas) then cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:practice_area'),$practiceAreas,('wildcarded', 'case-insensitive')) else ()
		,if ($lawschools != '') then cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:std_school'),$lawschools,('whitespace-insensitive', 'wildcarded', 'case-insensitive')) else ()
		,$firm_id_q
	  )
	
	let $attorney_moveschanges_conditions := (
		 cts:directory-query('/LegalCompass/denormalized-data/TBL_RER_CACHE_ATTORNEY_MOVESCHANGES/')
		,if ($location_val != '') then cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:location'),$location_val,('case-insensitive')) else () 
		(:,cts:not-query(cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'),'')):)
		,$date_q
		,if ($practiceAreas) then cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:practice_area'),$practiceAreas,('wildcarded', 'case-insensitive')) else ()
		,if ($lawschools != '') then cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'),$lawschools,('whitespace-insensitive', 'wildcarded', 'case-insensitive')) else ()
		,$re_id_q
	  )

	let $attorney_search := cts:element-values(xs:QName('ALI_RE_Attorney_Data:std_school'),(),(), cts:and-query(($attorney_conditions)))
	let $attorney_moveschanges_search := cts:element-values(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'),(),(), cts:and-query(($attorney_moveschanges_conditions)))

	let $response := ( 
	  
	  let $school_obj_1 := for $res in $attorney_search
	  
		let $headCount := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_conditions
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:std_school'), $res, ('wildcarded','case-insensitive'))
		  ))))

		let $partnerCount := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_conditions
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:std_school'), $res, ('wildcarded','case-insensitive'))
		  ))))

		let $associateCount := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_conditions
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Associate'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:std_school'), $res, ('wildcarded','case-insensitive'))
		  ))))

		let $otherCouselCount := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_conditions
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other Counsel/Attorney'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:std_school'), $res, ('wildcarded','case-insensitive'))
		  ))))

		let $adminCount := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_conditions
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Administrative / Support Staff'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:std_school'), $res, ('wildcarded','case-insensitive'))
		  ))))

		let $otherCount := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_conditions
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:std_school'), $res, ('wildcarded','case-insensitive'))
		  ))))

		let $obj := element {'RECORD'} {
		   element {'std_school'} {$res}
		  ,element {'headCount'} {xs:integer($headCount)}
		  ,element {'partnerCount'} {$partnerCount}
		  ,element {'associateCount'} {$associateCount}
		  ,element {'otherCouselCount'} {$otherCouselCount}
		  ,element {'adminCount'} {$adminCount}
		  ,element {'otherCount'} {$otherCount}
		}
		
		where if (($firmSizefrom = 0) and ($firmSizeTo = 0)) then (1=1) else ($headCount ge xs:integer($firmSizefrom) and $headCount le xs:integer($firmSizeTo))
		
		return $obj
	  
	  let $school_obj_2 := for $res in $attorney_moveschanges_search
		
		let $headCountPlus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('wildcarded','case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'added', ('case-insensitive'))
		  ))))
		
		let $headCountMinus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('wildcarded','case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'removed', ('case-insensitive'))
		  ))))
		
		let $partnerCountPlus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Partner'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('wildcarded','case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'added', ('case-insensitive'))
		  ))))
		
		let $partnerCountMinus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Partner'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('wildcarded','case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'removed', ('case-insensitive'))
		  ))))
		
		let $associateCountPlus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Associate'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('wildcarded','case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'added', ('case-insensitive'))
		  ))))
		
		let $associateCountMinus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Associate'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('wildcarded','case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'removed', ('case-insensitive'))
		  ))))

		let $otherCouselCountPlus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Other Counsel/Attorney'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('wildcarded','case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'added', ('case-insensitive'))
		  ))))
		
		let $otherCouselCountMinus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Other Counsel/Attorney'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('wildcarded','case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'removed', ('case-insensitive'))
		  ))))
		
		let $adminCountPlus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Administrative / Support Staff'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('wildcarded','case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'added', ('case-insensitive'))
		  ))))
		
		let $adminCountMinus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Administrative / Support Staff'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('wildcarded','case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'removed', ('case-insensitive'))
		  ))))
		
		let $otherCountPlus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Other'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('wildcarded','case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'added', ('case-insensitive'))
		  ))))
		
		let $otherCountMinus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Other'), ('case-insensitive'))
			,cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('wildcarded','case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'removed', ('case-insensitive'))
		  ))))
		  
		 let $obj := element {'RECORD'} {
		   element {'std_school'} {$res}
		  ,element {'headCountPlus'} {$headCountPlus}
		  ,element {'headCountMinus'} {$headCountMinus}
		  ,element {'partnerCountPlus'} {$partnerCountPlus}
		  ,element {'partnerCountMinus'} {$partnerCountMinus}
		  ,element {'associateCountPlus'} {$associateCountPlus}
		  ,element {'associateCountMinus'} {$associateCountMinus}
		  ,element {'otherCouselCountPlus'} {$otherCouselCountPlus}
		  ,element {'otherCouselCountMinus'} {$otherCouselCountMinus}
		  ,element {'adminCountPlus'} {$adminCountPlus}
		  ,element {'adminCountMinus'} {$adminCountMinus}
		  ,element {'otherCountPlus'} {$otherCountPlus}
		  ,element {'otherCountMinus'} {$otherCountMinus}
		}
		return $obj
	  
	  let $totalCount := fn:count($school_obj_1) 
	  
	  let $response-arr := if($sortDirection eq 'desc') then (
		for $obj_1 in $school_obj_1
		
			let $schoolName := $obj_1/std_school/text()
			let $obj_2 := $school_obj_2[std_school eq $schoolName][1]
			
			let $obj := element {'RECORD'} {
			   element {'schoolName'} {$schoolName}
			  ,element {'totalCount'} {$totalCount}
			  ,$obj_1/node()[fn:local-name(.) ne 'std_school']
			  ,$obj_2/node()[fn:local-name(.) ne 'std_school']
			  ,element {'Changes'} { fn:round((( xs:double($obj_2/headCountPlus/text()) - xs:double($obj_2/headCountMinus/text())) div xs:double($obj_1/headCount/text())) * 100) }
			}
			
			order by $schoolName descending
			
			return $obj
		)[$start to $end]
		
		else 
		(
		for $obj_1 in $school_obj_1
		
			let $schoolName := $obj_1/std_school/text()
			let $obj_2 := $school_obj_2[std_school eq $schoolName][1]
			
			let $obj := element {'RECORD'} {
			   element {'schoolName'} {$schoolName}
			  ,element {'totalCount'} {$totalCount}
			  ,$obj_1/node()[fn:local-name(.) ne 'std_school']
			  ,$obj_2/node()[fn:local-name(.) ne 'std_school']
			  ,element {'Changes'} { fn:round((( xs:double($obj_2/headCountPlus/text()) - xs:double($obj_2/headCountMinus/text())) div xs:double($obj_1/headCount/text())) * 100) }
			}
			
			order by $schoolName ascending
			
			return $obj
	  )
	  
	  return ($response-arr)
	)
	
	let $count := fn:count($response)
	
	let $response := element {'RESULT'} {$response}
	
	let $custom :=
		let $config := json:config('custom')
		let $_ := map:put( $config, 'whitespace', 'ignore' )
		let $_ := map:put( $config, 'array-element-names', ('RECORD') )
		return $config
	
	let $response := if ($count > 1) then 
			xdmp:to-json-string(json:transform-to-json($response, $custom)//RECORD) 
		else json:to-array(json:transform-to-json($response, $custom)//RECORD)
	
	return $response
};

declare function firm:sp_GetLawFirmStatics_LawSchoolTest(
	 $PageNo
	,$PageSize
	,$firmIds
	,$practiceAreas
	,$fromDate
	,$toDate
	,$firmSizefrom
	,$firmSizeTo
	,$FirmLocation
	,$Cities
	,$States
	,$Countries
	,$GeoGraphicRegions
	,$UsRegions
	,$lawschools
	,$sortBy
	,$sortDirection
)
{
	(: let $start := xs:integer($PageNo)
	let $end := xs:integer($PageSize) :)
	let $start := xs:integer(((xs:integer($PageNo)* xs:integer($PageSize))-xs:integer($PageSize))+1)
	let $end := xs:integer((xs:integer($start) + xs:integer($PageSize)) - 1 )
	
	let $fromDate := fn:tokenize($fromDate,'T')[1]
	let $toDate := fn:tokenize($toDate,'T')[1]

	let $location_val := if(($Cities !='') or ($States !='') or ($Countries != '') or ($GeoGraphicRegions !='') or  ($UsRegions !='')) then
	   cts:search(/city,
		 cts:and-query((
			cts:directory-query($config:RD-CITY-PATH)
		   ,cts:or-query((
			  cts:element-value-query(xs:QName('city:city'), $Cities, ('case-insensitive'))
			 ,cts:element-value-query(xs:QName('city:state'), $States, ('case-insensitive'))
			 ,cts:element-value-query(xs:QName('city:country'), $Countries, ('case-insensitive'))
			 ,cts:element-value-query(xs:QName('city:geographic_region'), $GeoGraphicRegions, ('case-insensitive'))
			 ,cts:element-value-query(xs:QName('city:us_region'), $UsRegions, ('case-insensitive'))
		 )))))/city:std_loc/text()
	  else (: fn:distinct-values(cts:search(/city,
			 cts:and-query((
				cts:directory-query($config:RD-CITY-PATH)
			 )))/city:std_loc/text()) :) ()

	let $date_q := if (($fromDate != '') and ($toDate != '')) then (
			 cts:element-range-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action_date'), '>=', xs:date($fromDate))
			,cts:element-range-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action_date'), '<=', xs:date($toDate))
		)
		else ()
	
	let $practiceAreas := if ($practiceAreas != '') then 
			let $key := fn:tokenize($practiceAreas,'[|]')
			let $res :=  cts:element-values(xs:QName('practices_kws:practice_area'),(),(), cts:and-query((
					cts:element-value-query(xs:QName('practices_kws:practice_area'),$key, ('wildcarded', 'case-insensitive'))
				)))
			return $res
		else ()
	
	
	let $firm_id_q := if ($firmIds != '') then
			let $firmIds := fn:tokenize($firmIds,',')
			return cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:RE_ID'),$firmIds)
		else ()
		
	let $re_id_q := if ($firmIds != '') then
			let $firmIds := fn:tokenize($firmIds,',')
			return cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:firm_id'),$firmIds)
		else ()
	
	let $attorney_conditions := (
		 cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
		,if ($location_val != '') then cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'),$location_val,('case-insensitive')) else ()
		,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:std_school'),''))
		,if ($practiceAreas) then cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:practice_area'),$practiceAreas,('wildcarded', 'case-insensitive')) else ()
		,if ($lawschools != '') then cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:std_school'),$lawschools,('whitespace-insensitive', 'wildcarded', 'case-insensitive')) else ()
		,$firm_id_q
	  )
	
	let $attorney_moveschanges_conditions := (
		 cts:directory-query('/LegalCompass/denormalized-data/TBL_RER_CACHE_ATTORNEY_MOVESCHANGES/')
		,if ($location_val != '') then cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:location'),$location_val,('case-insensitive')) else () 
		,cts:not-query(cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'),''))
		,$date_q
		,if ($practiceAreas) then cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:practice_area'),$practiceAreas,('wildcarded', 'case-insensitive')) else ()
		,if ($lawschools != '') then cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'),$lawschools,('whitespace-insensitive', 'wildcarded', 'case-insensitive')) else ()
		,$re_id_q
	  )

	let $attorney_search := cts:element-values(xs:QName('ALI_RE_Attorney_Data:std_school'),(),(), cts:and-query(($attorney_conditions)))
	let $attorney_moveschanges_search := cts:element-values(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'),(),(), cts:and-query(($attorney_moveschanges_conditions)))

	let $response := ( 
	  
	  let $school_obj_1 := for $res in $attorney_search
	  
		let $headCount := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_conditions
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:std_school'), $res, ('case-insensitive'))
		  ))))

		let $partnerCount := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_conditions
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:std_school'), $res, ('case-insensitive'))
		  ))))

		let $associateCount := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_conditions
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Associate'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:std_school'), $res, ('case-insensitive'))
		  ))))

		let $otherCouselCount := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_conditions
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other Counsel/Attorney'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:std_school'), $res, ('case-insensitive'))
		  ))))

		let $adminCount := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_conditions
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Administrative / Support Staff'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:std_school'), $res, ('case-insensitive'))
		  ))))

		let $otherCount := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_conditions
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:std_school'), $res, ('case-insensitive'))
		  ))))
    
    let $headCountPlus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'added', ('case-insensitive'))
		  ))))
		
		let $headCountMinus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'removed', ('case-insensitive'))
		  ))))
		
		let $partnerCountPlus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Partner'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'added', ('case-insensitive'))
		  ))))
		
		let $partnerCountMinus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Partner'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'removed', ('case-insensitive'))
		  ))))
		
		let $associateCountPlus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Associate'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'added', ('case-insensitive'))
		  ))))
		
		let $associateCountMinus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Associate'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'removed', ('case-insensitive'))
		  ))))

		let $otherCouselCountPlus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Other Counsel/Attorney'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'added', ('case-insensitive'))
		  ))))
		
		let $otherCouselCountMinus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Other Counsel/Attorney'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'removed', ('case-insensitive'))
		  ))))
		
		let $adminCountPlus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Administrative / Support Staff'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'added', ('case-insensitive'))
		  ))))
		
		let $adminCountMinus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Administrative / Support Staff'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'removed', ('case-insensitive'))
		  ))))
		
		let $otherCountPlus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Other'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'added', ('case-insensitive'))
		  ))))
		
		let $otherCountMinus := xdmp:estimate(cts:search(/,
		  cts:and-query((
			$attorney_moveschanges_conditions
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'), ('Other'), ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:std_school'), $res, ('case-insensitive'))
			,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'), 'removed', ('case-insensitive'))
		  ))))
      
		let $obj := element {'RECORD'} {
		   element {'std_school'} {$res}
		  ,element {'headCount'} {xs:integer($headCount)}
		  ,element {'partnerCount'} {$partnerCount}
		  ,element {'associateCount'} {$associateCount}
		  ,element {'otherCouselCount'} {$otherCouselCount}
		  ,element {'adminCount'} {$adminCount}
		  ,element {'otherCount'} {$otherCount}
      ,element {'headCountPlus'} {$headCountPlus}
		  ,element {'headCountMinus'} {$headCountMinus}
		  ,element {'partnerCountPlus'} {$partnerCountPlus}
		  ,element {'partnerCountMinus'} {$partnerCountMinus}
		  ,element {'associateCountPlus'} {$associateCountPlus}
		  ,element {'associateCountMinus'} {$associateCountMinus}
		  ,element {'otherCouselCountPlus'} {$otherCouselCountPlus}
		  ,element {'otherCouselCountMinus'} {$otherCouselCountMinus}
		  ,element {'adminCountPlus'} {$adminCountPlus}
		  ,element {'adminCountMinus'} {$adminCountMinus}
		  ,element {'otherCountPlus'} {$otherCountPlus}
		  ,element {'otherCountMinus'} {$otherCountMinus}
      ,element {'Changes'} { fn:round((( xs:double($headCountPlus) - xs:double($headCountMinus)) div xs:double($headCount)) * 100) }
      }
     where if (($firmSizefrom = 0) and ($firmSizeTo = 0)) then (1=1) else ($headCount ge xs:integer($firmSizefrom) and $headCount le xs:integer($firmSizeTo))
		
		return $obj
    
	  let $totalCount := fn:count($school_obj_1) 
	  
	  let $response-arr := (
		for $obj_1 in $school_obj_1
		
			let $schoolName := $obj_1/std_school/text()
			
			let $obj := element {'RECORD'} {
			   element {'schoolName'} {$schoolName}
			  ,element {'totalCount'} {$totalCount}
			  ,$obj_1/node()[fn:local-name(.) ne 'std_school']}
			
			order by $schoolName
			
			return $obj
		)[$start to $end]
	  
	  return ($response-arr)
	)
	
	let $count := fn:count($response)
	
	let $response := element {'RESULT'} {$response}
	
	let $custom :=
		let $config := json:config('custom')
		let $_ := map:put( $config, 'whitespace', 'ignore' )
		let $_ := map:put( $config, 'array-element-names', ('RECORD') )
		return $config
	
	let $response := if ($count > 1) then 
			xdmp:to-json-string(json:transform-to-json($response, $custom)//RECORD) 
		else json:to-array(json:transform-to-json($response, $custom)//RECORD)
	
	return $response
  };

declare function firm:GetLevel1Level2Array($Representations)
{
	let $representationTypeArray := fn:tokenize($Representations,';')
	
	return for $RepresentationsTypeObj in $representationTypeArray
		let $level1level2Array := fn:tokenize($RepresentationsTypeObj,',')
		let $obj := if (fn:count($level1level2Array) > 1) then (
			if ((fn:count($representationTypeArray) = 1) and (fn:count($level1level2Array) > 2)) then (
				element {'obj'} {
					element {'level1'} {$level1level2Array[last()]},
					element {'level2'} {fn:string-join($level1level2Array[1 to last()-1],',')}
				}
			) else if ((fn:count($representationTypeArray) = 2) and (fn:count($level1level2Array) > 2) and ($representationTypeArray[1])) then (
				element {'obj'} {
					element {'level1'} {$level1level2Array[last()]},
					element {'level2'} {fn:string-join($level1level2Array[1 to last()-1],',')}
				}
			) else (
				if (fn:count($level1level2Array) > 2) then (
					element {'obj'} {
						element {'level1'} {$level1level2Array[last()]},
						element {'level2'} {fn:string-join($level1level2Array[1 to last()-1],',')}
					}
				) else (
					element {'obj'} {
						element {'level1'} {$level1level2Array[2]},
						element {'level2'} {$level1level2Array[1]}
					}
				)
			)
		) else ()
      
		let $res := firm:GetRepresentationTypeIDs($obj/level1/text(),$obj/level2/text())
			
		return $res  
};

declare function firm:GetClientResultChartPostMerger(
	 $FirmID
	,$Representations
	,$YearFrom
	,$YearTo
)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($FirmID)

	let $data := if($checkMergerData != '') then firm:GetClientResultChartPM($FirmID,$Representations,$YearFrom,$YearTo) else firm:GetClientResultChart($FirmID,$Representations,$YearFrom,$YearTo)
	return $data

};

declare function firm:GetClientResultChart(
	 $FirmID
	,$Representations
	,$YearFrom
	,$YearTo
)
{

	let $REPRESENTATION_TYPE_ID := if ($Representations != '' and (($Representations) or $Representations != 'All Types') and (cts:contains($Representations,';'))) then (
		
		let $representationTypeArray := fn:tokenize($Representations,';')
		
		return for $RepresentationsTypeObj in $representationTypeArray
			
			let $level1level2Array := fn:tokenize($RepresentationsTypeObj,',')
			
			let $obj := if (fn:count($level1level2Array) > 1) then (
				if ((fn:count($representationTypeArray) = 1) and (fn:count($level1level2Array) > 2)) then (
					element {'obj'} {
						element {'level1'} {$level1level2Array[last()]},
						element {'level2'} {fn:string-join($level1level2Array[1 to last()-1],',')}
					}
				) else if ((fn:count($representationTypeArray) = 2) and (fn:count($level1level2Array) > 2) and ($representationTypeArray[1])) then (
					element {'obj'} {
						element {'level1'} {$level1level2Array[last()]},
						element {'level2'} {fn:string-join($level1level2Array[1 to last()-1],',')}
					}
				) else (
					if (fn:count($level1level2Array) > 2) then (
						element {'obj'} {
							element {'level1'} {$level1level2Array[last()]},
							element {'level2'} {fn:string-join($level1level2Array[1 to last()-1],',')}
						}
					) else (
						element {'obj'} {
							element {'level1'} {$level1level2Array[2]},
							element {'level2'} {$level1level2Array[1]}
						}
					)
				)
			) else ()
      
			let $res := firm:GetCompanyLFRSummary($obj/level1/text(),$obj/level2/text())
			
			return $res  
	) else (
		for $item in cts:search(/REPRESENTATION_TYPES, cts:directory-query($config:RD-REPRESENTATION_TYPES-PATH))
			return element {'OBJ'} {
				 element {'REPRESENTATION_TYPE_ID'} {$item/REPRESENTATION_TYPES:REPRESENTATION_TYPE_ID/text()}
				,element {'LEVEL1'} {$item/REPRESENTATION_TYPES:LEVEL_1/text()}
				,element {'LEVEL2'} {$item/REPRESENTATION_TYPES:LEVEL_2/text()}
			}
	)
	
	
  
	let $COMPANYPROFILE_LFR_YEAR_QUERY := if (($YearFrom != '') and ($YearTo != '')) then (
		if ($YearFrom != $YearTo) then (
			 cts:element-range-query(xs:QName('COMPANYPROFILE_LFR:YEAR'), '>=', xs:integer($YearFrom))
			,cts:element-range-query(xs:QName('COMPANYPROFILE_LFR:YEAR'), '<=', xs:integer($YearTo))
		) else (
			cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:YEAR'), xs:string($YearFrom))
		)
	) else ()
	
	let $COMPANYPROFILE_LFR_NEW_YEAR_QUERY := if (($YearFrom != '') and ($YearTo != '')) then (
		if ($YearFrom != $YearTo) then (
			 cts:element-range-query(xs:QName('COMPANYPROFILE_LFR_NEW:YEAR'), '>=', xs:integer($YearFrom))
			,cts:element-range-query(xs:QName('COMPANYPROFILE_LFR_NEW:YEAR'), '<=', xs:integer($YearTo))
		) else (
			cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:YEAR'), xs:string($YearFrom))
		) 
	) else ()

	let $WHO_COUNSELS_WHO_YEAR_QUERY := if (($YearFrom != '') and ($YearTo != '')) then (
		if ($YearFrom != $YearTo) then (
			 cts:element-range-query(xs:QName('Who_Counsels_who:FISCAL_YEAR'), '>=', xs:integer($YearFrom))
			,cts:element-range-query(xs:QName('Who_Counsels_who:FISCAL_YEAR'), '<=', xs:integer($YearTo))
		) else (
			cts:element-value-query(xs:QName('Who_Counsels_who:FISCAL_YEAR'), xs:string($YearFrom))
		) 
	) else ()
  
	let $BDBS_TRANSACTION_YEAR_QUERY := if (($YearFrom != '') and ($YearTo != '')) then (
		if ($YearFrom != $YearTo) then (
			 cts:element-range-query(xs:QName('bdbs-transaction:YEAR'), '>=', xs:integer($YearFrom))
			,cts:element-range-query(xs:QName('bdbs-transaction:YEAR'), '<=', xs:integer($YearTo))
		) else (
			cts:element-value-query(xs:QName('bdbs-transaction:YEAR'), xs:string($YearFrom))
		) 
	  ) else ()
  
	let $COMPANYPROFILE_LFR_CONDITIONS := (
		 cts:directory-query($config:RD-SURVEY-COMPANYPROFILE_LFR-PATH)
		,cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:FIRM_ID'),$FirmID)
		,if ($REPRESENTATION_TYPE_ID) then cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:REPRESENTATION_TYPE_ID'), $REPRESENTATION_TYPE_ID/REPRESENTATION_TYPE_ID/text()) else ()
		,cts:not-query(cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:FIRM'),'Unknown',('case-insensitive')))
		,cts:not-query(cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:FIRM'),''))
		,cts:or-query((
			 cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:SOURCE'), 'ALM Legal Intelligence', ('case-insensitive'))
			,cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:SOURCE'), 'USPTO', ('case-insensitive'))
		))
		,$COMPANYPROFILE_LFR_YEAR_QUERY
	)
	
	let $COMPANYPROFILE_LFR_NEW_CONDITIONS := (
		cts:directory-query($config:RD-SURVEY-COMPANYPROFILE_LFR_NEW-PATH)
		,cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:FIRM_ID'),$FirmID)
		,if ($REPRESENTATION_TYPE_ID) then cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:REPRESENTATION_TYPE_ID'), $REPRESENTATION_TYPE_ID/REPRESENTATION_TYPE_ID/text()) else ()
		,cts:not-query(cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:FIRM'),'Unknown',('case-insensitive')))
		,cts:not-query(cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:FIRM'),''))
		,$COMPANYPROFILE_LFR_NEW_YEAR_QUERY
	)

	let $WHO_COUNSELS_WHO_CONDITIONS := (
		 cts:directory-query($config:RD-SURVEY-WHO_COUNSELS_WHO-PATH)
		,cts:element-value-query(xs:QName('Who_Counsels_who:OUTSIDE_COUNSEL_ID'),$FirmID)
		,if ($REPRESENTATION_TYPE_ID) then cts:element-value-query(xs:QName('Who_Counsels_who:REPRESENTATION_TYPE_ID'), $REPRESENTATION_TYPE_ID/REPRESENTATION_TYPE_ID/text()) else ()
	   ,$WHO_COUNSELS_WHO_YEAR_QUERY
	)

	let $BDBS_TRANSACTION_CONDITIONS := (
		 cts:directory-query($config:RD-BDBS_TRANSACTION-PATH)
		,if ($REPRESENTATION_TYPE_ID) then cts:element-value-query(xs:QName('bdbs-transaction:TRANSACTION_TYPE_ID'), $REPRESENTATION_TYPE_ID/REPRESENTATION_TYPE_ID/text()) else ()
		,$BDBS_TRANSACTION_YEAR_QUERY
	)
	
	let $response := (
		
		(: ------------------------------------------------================== 04 ==================--------------------------------------- :)
		let $BDBS_REPRESENTERS := (
			
			let $PARTY_IDs := cts:element-values(xs:QName('bdbs-representer:PARTY_ID'),(),(),
				cts:and-query((
					cts:directory-query($config:RD-BDBS_REPRESENTER-PATH),
					cts:element-value-query(xs:QName('bdbs-representer:ORGANIZATION_ID'),$FirmID),
					cts:not-query(cts:element-value-query(xs:QName('bdbs-representer:PARTY_ID'),''))
				)))
      
			let $TRANSACTION_IDs := cts:element-values(xs:QName('bdbs-transaction:TRANSACTION_ID'),(),(), 
				cts:and-query((
					$BDBS_TRANSACTION_CONDITIONS
				)))
      
			return for $x in cts:element-values(xs:QName('bdbs-party:ORGANIZATION_ID'),(),(),
				cts:and-query((
					cts:directory-query($config:RD-BDBS_PARTY-PATH),
					cts:element-value-query(xs:QName('bdbs-party:PARTY_ID'),($PARTY_IDs ! xs:string(.))),
					cts:element-value-query(xs:QName('bdbs-party:TRANSACTION_ID'),($TRANSACTION_IDs ! xs:string(.))),
					cts:not-query(cts:element-value-query(xs:QName('bdbs-party:ORGANIZATION_ID'),''))
				)))
        
				let $search := cts:search(/bdbs-party,
					cts:and-query((
						cts:directory-query($config:RD-BDBS_PARTY-PATH),
						cts:element-value-query(xs:QName('bdbs-party:PARTY_ID'),($PARTY_IDs ! xs:string(.))),
						cts:element-value-query(xs:QName('bdbs-party:TRANSACTION_ID'),($TRANSACTION_IDs ! xs:string(.))),
						cts:not-query(cts:element-value-query(xs:QName('bdbs-party:ORGANIZATION_ID'),'')),
						cts:element-value-query(xs:QName('bdbs-party:ORGANIZATION_ID'),xs:string($x))
					)))
        
				let $PARTY_TRANSACTION_IDs := fn:distinct-values($search/bdbs-party:TRANSACTION_ID/text()) 
				let $RepresentationTypeIDs := cts:search(/bdbs-transaction,
					cts:and-query((
						cts:directory-query($config:RD-BDBS_TRANSACTION-PATH)
						,cts:element-value-query(xs:QName('bdbs-transaction:TRANSACTION_ID'),$PARTY_TRANSACTION_IDs)
					)))/bdbs-transaction:TRANSACTION_TYPE_ID/text()
				
				let $LEVEL_1s := fn:distinct-values($REPRESENTATION_TYPE_ID[REPRESENTATION_TYPE_ID = $RepresentationTypeIDs]/LEVEL1/text())
				
				(: return xs:string($x) :)
      
				return for $LEVEL_1 in $LEVEL_1s
					return element {'RECORD'} {
						 element {'Company_Name'} {$search[1]/bdbs-party:ORGANIZATION_NAME/text()}
						(:,element {'Company_ID'} {$x}:)
						,element {'LEVEL_1'} {$LEVEL_1}
						,element {'TotalCount'} {fn:count($search/bdbs-party:TRANSACTION_ID[. = $PARTY_TRANSACTION_IDs])}
					}
		)
    
		(: ------------------------------------------------================== 03 ==================--------------------------------------- :)
		let $WHO_COUNSELS_WHO := for $x in cts:element-values(xs:QName('Who_Counsels_who:ORGANIZATION_NAME'), (), (), 
			cts:and-query(($WHO_COUNSELS_WHO_CONDITIONS)))
      
			let $search := cts:search(/WhoCounselsWho,
				cts:and-query((
					cts:element-value-query(xs:QName('Who_Counsels_who:ORGANIZATION_NAME'), $x, ('case-insensitive')) 
					,$WHO_COUNSELS_WHO_CONDITIONS
				)))
      
			let $RepresentationTypeIDs := fn:distinct-values($search/Who_Counsels_who:REPRESENTATION_TYPE_ID/text())
			let $LEVEL_1s := fn:distinct-values($REPRESENTATION_TYPE_ID[REPRESENTATION_TYPE_ID = $RepresentationTypeIDs]/LEVEL1/text())
      
			return for $LEVEL_1 in $LEVEL_1s
				
				let $IDs := $REPRESENTATION_TYPE_ID[LEVEL1 = $LEVEL_1]/REPRESENTATION_TYPE_ID/text()
				
				return element {'RECORD'} {
					element {'Company_Name'} {$x}
					,element {'LEVEL_1'} {$LEVEL_1}
					,element {'TotalCount'} {fn:count($search/Who_Counsels_who:REPRESENTATION_TYPE_ID[. = $IDs])}
				}
      
		(: ------------------------------------------------================== 02 ==================--------------------------------------- :)
		let $COMPANYPROFILE_LFR_NEW := for $x in cts:element-values(xs:QName('COMPANYPROFILE_LFR_NEW:COMPANY_NAME'), (), (), 
			cts:and-query(($COMPANYPROFILE_LFR_NEW_CONDITIONS)))
      
			let $search := cts:search(/COMPANYPROFILE_LFR_NEW,
				cts:and-query((
					cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:COMPANY_NAME'),$x, ('case-insensitive')) 
					,$COMPANYPROFILE_LFR_NEW_CONDITIONS
				)))
      
			let $RepresentationTypeIDs := fn:distinct-values($search/COMPANYPROFILE_LFR_NEW:REPRESENTATION_TYPE_ID/text())
			let $LEVEL_1s := fn:distinct-values($REPRESENTATION_TYPE_ID[REPRESENTATION_TYPE_ID = $RepresentationTypeIDs]/LEVEL1/text())
      
			return for $LEVEL_1 in $LEVEL_1s
				
				let $IDs := $REPRESENTATION_TYPE_ID[LEVEL1 = $LEVEL_1]/REPRESENTATION_TYPE_ID/text()
				
				return element {'RECORD'} {
					 element {'Company_Name'} {$x}
					,element {'LEVEL_1'} {$LEVEL_1}
					,element {'TotalCount'} {fn:count($search/COMPANYPROFILE_LFR_NEW:REPRESENTATION_TYPE_ID[. = $IDs])}
				}
      
			(: return for $RepresentationTypeID in $RepresentationTypeIDs
				return element {'RECORD'} {
					element {'Company_Name'} {$x}
					,element {'LEVEL_1'} {$REPRESENTATION_TYPE_ID[REPRESENTATION_TYPE_ID = $RepresentationTypeID]/LEVEL1/text()}
					,element {'TotalCount'} {fn:count($search/COMPANYPROFILE_LFR_NEW:REPRESENTATION_TYPE_ID[. = $RepresentationTypeID])}
				} :)
        
		(: ------------------------------------------------================== 01 ==================--------------------------------------- :)
		let $COMPANYPROFILE_LFR := for $x in cts:element-values(xs:QName('COMPANYPROFILE_LFR:COMPANY_NAME'), (), (), 
			cts:and-query(($COMPANYPROFILE_LFR_CONDITIONS)))
      
			let $search := cts:search(/COMPANYPROFILE_LFR,
				cts:and-query((
					cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:COMPANY_NAME'),$x, ('case-insensitive')) 
					,$COMPANYPROFILE_LFR_CONDITIONS
				)))
      
			let $RepresentationTypeIDs := fn:distinct-values($search/COMPANYPROFILE_LFR_NEW:REPRESENTATION_TYPE_ID/text())
			let $LEVEL_1s := fn:distinct-values($REPRESENTATION_TYPE_ID[REPRESENTATION_TYPE_ID = $RepresentationTypeIDs]/LEVEL1/text())
      
			return for $LEVEL_1 in $LEVEL_1s
				
				let $IDs := $REPRESENTATION_TYPE_ID[LEVEL1 = $LEVEL_1]/REPRESENTATION_TYPE_ID/text()
				
				return element {'RECORD'} {
					element {'Company_Name'} {$x}
					,element {'LEVEL_1'} {$LEVEL_1}
					,element {'TotalCount'} {fn:count($search/COMPANYPROFILE_LFR:REPRESENTATION_TYPE_ID[. = $IDs])}
				}
    
		return ($COMPANYPROFILE_LFR ,$COMPANYPROFILE_LFR_NEW ,$WHO_COUNSELS_WHO ,$BDBS_REPRESENTERS)
		(: return ($BDBS_REPRESENTERS) :)
	)
	
	let $response := (
		
		for $res in fn:distinct-values($response/Company_Name/text())
			
			let $IP_Count :=   fn:sum($response[(Company_Name eq $res) and (LEVEL_1 eq 'IP')]/TotalCount)
			let $Transactional_Count :=   fn:sum($response[(Company_Name eq $res) and (LEVEL_1 eq 'Transactional')]/TotalCount)
			let $LITIGATION_COUNT :=   fn:sum($response[(Company_Name eq $res) and (LEVEL_1 eq 'Litigation')]/TotalCount)
			let $TOTAL_COUNT := fn:sum(($IP_Count,$Transactional_Count,$LITIGATION_COUNT))
		
			let $obj := element {'RECORD'} {
				element {'COMPANY_NAME'} {$res}
				,element {'IP_Count'} {$IP_Count}
				,element {'Transactional_Count'} {$Transactional_Count}
				,element {'LITIGATION_COUNT'} {$LITIGATION_COUNT}
				,element {'TOTAL_COUNT'} {$TOTAL_COUNT}
			}
			
			order by  $TOTAL_COUNT descending, $res ascending
			return $obj
	)
	
	let $response := element {'RESULT'} {$response}

	let $custom :=
		let $config := json:config('custom')
		let $_ := map:put( $config, 'whitespace', 'ignore' )
		let $_ := map:put( $config, 'array-element-names', ('RECORD') )
		return $config

	let $response := xdmp:to-json-string(json:transform-to-json($response, $custom)//RECORD)
	
	return $response
};

declare function firm:GetClientResultChartPM(
	 $OrganizationID
	,$Representations
	,$YearFrom
	,$YearTo
)
{
		let $checkMergerData := firmnew:GetLawFirmMergerData($OrganizationID)
		let $FirmID := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganizationID),',') else $OrganizationID	
	
		let $REPRESENTATION_TYPE_ID := if ($Representations != '' and (($Representations) or $Representations != 'All Types') and (cts:contains($Representations,';'))) then (
		
		let $representationTypeArray := fn:tokenize($Representations,';')
		
		return for $RepresentationsTypeObj in $representationTypeArray
			
			let $level1level2Array := fn:tokenize($RepresentationsTypeObj,',')
			
			let $obj := if (fn:count($level1level2Array) > 1) then (
				if ((fn:count($representationTypeArray) = 1) and (fn:count($level1level2Array) > 2)) then (
					element {'obj'} {
						element {'level1'} {$level1level2Array[last()]},
						element {'level2'} {fn:string-join($level1level2Array[1 to last()-1],',')}
					}
				) else if ((fn:count($representationTypeArray) = 2) and (fn:count($level1level2Array) > 2) and ($representationTypeArray[1])) then (
					element {'obj'} {
						element {'level1'} {$level1level2Array[last()]},
						element {'level2'} {fn:string-join($level1level2Array[1 to last()-1],',')}
					}
				) else (
					if (fn:count($level1level2Array) > 2) then (
						element {'obj'} {
							element {'level1'} {$level1level2Array[last()]},
							element {'level2'} {fn:string-join($level1level2Array[1 to last()-1],',')}
						}
					) else (
						element {'obj'} {
							element {'level1'} {$level1level2Array[2]},
							element {'level2'} {$level1level2Array[1]}
						}
					)
				)
			) else ()
      
			let $res := firm:GetCompanyLFRSummary($obj/level1/text(),$obj/level2/text())
			
			return $res  
	) else (
		for $item in cts:search(/REPRESENTATION_TYPES, cts:directory-query($config:RD-REPRESENTATION_TYPES-PATH))
			return element {'OBJ'} {
				 element {'REPRESENTATION_TYPE_ID'} {$item/REPRESENTATION_TYPES:REPRESENTATION_TYPE_ID/text()}
				,element {'LEVEL1'} {$item/REPRESENTATION_TYPES:LEVEL_1/text()}
				,element {'LEVEL2'} {$item/REPRESENTATION_TYPES:LEVEL_2/text()}
			}
	)
	
	
  
	let $COMPANYPROFILE_LFR_YEAR_QUERY := if (($YearFrom != '') and ($YearTo != '')) then (
		if ($YearFrom != $YearTo) then (
			 cts:element-range-query(xs:QName('COMPANYPROFILE_LFR:YEAR'), '>=', xs:integer($YearFrom))
			,cts:element-range-query(xs:QName('COMPANYPROFILE_LFR:YEAR'), '<=', xs:integer($YearTo))
		) else (
			cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:YEAR'), xs:string($YearFrom))
		)
	) else ()
	
	let $COMPANYPROFILE_LFR_NEW_YEAR_QUERY := if (($YearFrom != '') and ($YearTo != '')) then (
		if ($YearFrom != $YearTo) then (
			 cts:element-range-query(xs:QName('COMPANYPROFILE_LFR_NEW:YEAR'), '>=', xs:integer($YearFrom))
			,cts:element-range-query(xs:QName('COMPANYPROFILE_LFR_NEW:YEAR'), '<=', xs:integer($YearTo))
		) else (
			cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:YEAR'), xs:string($YearFrom))
		) 
	) else ()

	let $WHO_COUNSELS_WHO_YEAR_QUERY := if (($YearFrom != '') and ($YearTo != '')) then (
		if ($YearFrom != $YearTo) then (
			 cts:element-range-query(xs:QName('Who_Counsels_who:FISCAL_YEAR'), '>=', xs:integer($YearFrom))
			,cts:element-range-query(xs:QName('Who_Counsels_who:FISCAL_YEAR'), '<=', xs:integer($YearTo))
		) else (
			cts:element-value-query(xs:QName('Who_Counsels_who:FISCAL_YEAR'), xs:string($YearFrom))
		) 
	) else ()
  
	let $BDBS_TRANSACTION_YEAR_QUERY := if (($YearFrom != '') and ($YearTo != '')) then (
		if ($YearFrom != $YearTo) then (
			 cts:element-range-query(xs:QName('bdbs-transaction:YEAR'), '>=', xs:integer($YearFrom))
			,cts:element-range-query(xs:QName('bdbs-transaction:YEAR'), '<=', xs:integer($YearTo))
		) else (
			cts:element-value-query(xs:QName('bdbs-transaction:YEAR'), xs:string($YearFrom))
		) 
	  ) else ()
  
	let $COMPANYPROFILE_LFR_CONDITIONS := (
		 cts:directory-query($config:RD-SURVEY-COMPANYPROFILE_LFR-PATH)
		,cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:FIRM_ID'),$FirmID)
		,if ($REPRESENTATION_TYPE_ID) then cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:REPRESENTATION_TYPE_ID'), $REPRESENTATION_TYPE_ID/REPRESENTATION_TYPE_ID/text()) else ()
		,cts:not-query(cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:FIRM'),'Unknown',('case-insensitive')))
		,cts:not-query(cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:FIRM'),''))
		,cts:or-query((
			 cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:SOURCE'), 'ALM Legal Intelligence', ('case-insensitive'))
			,cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:SOURCE'), 'USPTO', ('case-insensitive'))
		))
		,$COMPANYPROFILE_LFR_YEAR_QUERY
	)
	
	let $COMPANYPROFILE_LFR_NEW_CONDITIONS := (
		cts:directory-query($config:RD-SURVEY-COMPANYPROFILE_LFR_NEW-PATH)
		,cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:FIRM_ID'),$FirmID)
		,if ($REPRESENTATION_TYPE_ID) then cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:REPRESENTATION_TYPE_ID'), $REPRESENTATION_TYPE_ID/REPRESENTATION_TYPE_ID/text()) else ()
		,cts:not-query(cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:FIRM'),'Unknown',('case-insensitive')))
		,cts:not-query(cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:FIRM'),''))
		,$COMPANYPROFILE_LFR_NEW_YEAR_QUERY
	)

	let $WHO_COUNSELS_WHO_CONDITIONS := (
		 cts:directory-query($config:RD-SURVEY-WHO_COUNSELS_WHO-PATH)
		,cts:element-value-query(xs:QName('Who_Counsels_who:OUTSIDE_COUNSEL_ID'),$FirmID)
		,if ($REPRESENTATION_TYPE_ID) then cts:element-value-query(xs:QName('Who_Counsels_who:REPRESENTATION_TYPE_ID'), $REPRESENTATION_TYPE_ID/REPRESENTATION_TYPE_ID/text()) else ()
	   ,$WHO_COUNSELS_WHO_YEAR_QUERY
	)

	let $BDBS_TRANSACTION_CONDITIONS := (
		 cts:directory-query($config:RD-BDBS_TRANSACTION-PATH)
		,if ($REPRESENTATION_TYPE_ID) then cts:element-value-query(xs:QName('bdbs-transaction:TRANSACTION_TYPE_ID'), $REPRESENTATION_TYPE_ID/REPRESENTATION_TYPE_ID/text()) else ()
		,$BDBS_TRANSACTION_YEAR_QUERY
	)
	
	let $response := (
		
		(: ------------------------------------------------================== 04 ==================--------------------------------------- :)
		let $BDBS_REPRESENTERS := (
			
			let $PARTY_IDs := cts:element-values(xs:QName('bdbs-representer:PARTY_ID'),(),(),
				cts:and-query((
					cts:directory-query($config:RD-BDBS_REPRESENTER-PATH),
					cts:element-value-query(xs:QName('bdbs-representer:ORGANIZATION_ID'),$FirmID),
					cts:not-query(cts:element-value-query(xs:QName('bdbs-representer:PARTY_ID'),''))
				)))
      
			let $TRANSACTION_IDs := cts:element-values(xs:QName('bdbs-transaction:TRANSACTION_ID'),(),(), 
				cts:and-query((
					$BDBS_TRANSACTION_CONDITIONS
				)))
      
			return for $x in cts:element-values(xs:QName('bdbs-party:ORGANIZATION_ID'),(),(),
				cts:and-query((
					cts:directory-query($config:RD-BDBS_PARTY-PATH),
					cts:element-value-query(xs:QName('bdbs-party:PARTY_ID'),($PARTY_IDs ! xs:string(.))),
					cts:element-value-query(xs:QName('bdbs-party:TRANSACTION_ID'),($TRANSACTION_IDs ! xs:string(.))),
					cts:not-query(cts:element-value-query(xs:QName('bdbs-party:ORGANIZATION_ID'),''))
				)))
        
				let $search := cts:search(/bdbs-party,
					cts:and-query((
						cts:directory-query($config:RD-BDBS_PARTY-PATH),
						cts:element-value-query(xs:QName('bdbs-party:PARTY_ID'),($PARTY_IDs ! xs:string(.))),
						cts:element-value-query(xs:QName('bdbs-party:TRANSACTION_ID'),($TRANSACTION_IDs ! xs:string(.))),
						cts:not-query(cts:element-value-query(xs:QName('bdbs-party:ORGANIZATION_ID'),'')),
						cts:element-value-query(xs:QName('bdbs-party:ORGANIZATION_ID'),xs:string($x))
					)))
        
				let $PARTY_TRANSACTION_IDs := fn:distinct-values($search/bdbs-party:TRANSACTION_ID/text()) 
				let $RepresentationTypeIDs := cts:search(/bdbs-transaction,
					cts:and-query((
						cts:directory-query($config:RD-BDBS_TRANSACTION-PATH)
						,cts:element-value-query(xs:QName('bdbs-transaction:TRANSACTION_ID'),$PARTY_TRANSACTION_IDs)
					)))/bdbs-transaction:TRANSACTION_TYPE_ID/text()
				
				let $LEVEL_1s := fn:distinct-values($REPRESENTATION_TYPE_ID[REPRESENTATION_TYPE_ID = $RepresentationTypeIDs]/LEVEL1/text())
				
				(: return xs:string($x) :)
      
				return for $LEVEL_1 in $LEVEL_1s
					return element {'RECORD'} {
						 element {'Company_Name'} {$search[1]/bdbs-party:ORGANIZATION_NAME/text()}
						(:,element {'Company_ID'} {$x}:)
						,element {'LEVEL_1'} {$LEVEL_1}
						,element {'TotalCount'} {fn:count($search/bdbs-party:TRANSACTION_ID[. = $PARTY_TRANSACTION_IDs])}
					}
		)
    
		(: ------------------------------------------------================== 03 ==================--------------------------------------- :)
		let $WHO_COUNSELS_WHO := for $x in cts:element-values(xs:QName('Who_Counsels_who:ORGANIZATION_NAME'), (), (), 
			cts:and-query(($WHO_COUNSELS_WHO_CONDITIONS)))
      
			let $search := cts:search(/WhoCounselsWho,
				cts:and-query((
					cts:element-value-query(xs:QName('Who_Counsels_who:ORGANIZATION_NAME'), $x, ('case-insensitive')) 
					,$WHO_COUNSELS_WHO_CONDITIONS
				)))
      
			let $RepresentationTypeIDs := fn:distinct-values($search/Who_Counsels_who:REPRESENTATION_TYPE_ID/text())
			let $LEVEL_1s := fn:distinct-values($REPRESENTATION_TYPE_ID[REPRESENTATION_TYPE_ID = $RepresentationTypeIDs]/LEVEL1/text())
      
			return for $LEVEL_1 in $LEVEL_1s
				
				let $IDs := $REPRESENTATION_TYPE_ID[LEVEL1 = $LEVEL_1]/REPRESENTATION_TYPE_ID/text()
				
				return element {'RECORD'} {
					element {'Company_Name'} {$x}
					,element {'LEVEL_1'} {$LEVEL_1}
					,element {'TotalCount'} {fn:count($search/Who_Counsels_who:REPRESENTATION_TYPE_ID[. = $IDs])}
				}
      
		(: ------------------------------------------------================== 02 ==================--------------------------------------- :)
		let $COMPANYPROFILE_LFR_NEW := for $x in cts:element-values(xs:QName('COMPANYPROFILE_LFR_NEW:COMPANY_NAME'), (), (), 
			cts:and-query(($COMPANYPROFILE_LFR_NEW_CONDITIONS)))
      
			let $search := cts:search(/COMPANYPROFILE_LFR_NEW,
				cts:and-query((
					cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:COMPANY_NAME'),$x, ('case-insensitive')) 
					,$COMPANYPROFILE_LFR_NEW_CONDITIONS
				)))
      
			let $RepresentationTypeIDs := fn:distinct-values($search/COMPANYPROFILE_LFR_NEW:REPRESENTATION_TYPE_ID/text())
			let $LEVEL_1s := fn:distinct-values($REPRESENTATION_TYPE_ID[REPRESENTATION_TYPE_ID = $RepresentationTypeIDs]/LEVEL1/text())
      
			return for $LEVEL_1 in $LEVEL_1s
				
				let $IDs := $REPRESENTATION_TYPE_ID[LEVEL1 = $LEVEL_1]/REPRESENTATION_TYPE_ID/text()
				
				return element {'RECORD'} {
					 element {'Company_Name'} {$x}
					,element {'LEVEL_1'} {$LEVEL_1}
					,element {'TotalCount'} {fn:count($search/COMPANYPROFILE_LFR_NEW:REPRESENTATION_TYPE_ID[. = $IDs])}
				}
      
			(: return for $RepresentationTypeID in $RepresentationTypeIDs
				return element {'RECORD'} {
					element {'Company_Name'} {$x}
					,element {'LEVEL_1'} {$REPRESENTATION_TYPE_ID[REPRESENTATION_TYPE_ID = $RepresentationTypeID]/LEVEL1/text()}
					,element {'TotalCount'} {fn:count($search/COMPANYPROFILE_LFR_NEW:REPRESENTATION_TYPE_ID[. = $RepresentationTypeID])}
				} :)
        
		(: ------------------------------------------------================== 01 ==================--------------------------------------- :)
		let $COMPANYPROFILE_LFR := for $x in cts:element-values(xs:QName('COMPANYPROFILE_LFR:COMPANY_NAME'), (), (), 
			cts:and-query(($COMPANYPROFILE_LFR_CONDITIONS)))
      
			let $search := cts:search(/COMPANYPROFILE_LFR,
				cts:and-query((
					cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:COMPANY_NAME'),$x, ('case-insensitive')) 
					,$COMPANYPROFILE_LFR_CONDITIONS
				)))
      
			let $RepresentationTypeIDs := fn:distinct-values($search/COMPANYPROFILE_LFR_NEW:REPRESENTATION_TYPE_ID/text())
			let $LEVEL_1s := fn:distinct-values($REPRESENTATION_TYPE_ID[REPRESENTATION_TYPE_ID = $RepresentationTypeIDs]/LEVEL1/text())
      
			return for $LEVEL_1 in $LEVEL_1s
				
				let $IDs := $REPRESENTATION_TYPE_ID[LEVEL1 = $LEVEL_1]/REPRESENTATION_TYPE_ID/text()
				
				return element {'RECORD'} {
					element {'Company_Name'} {$x}
					,element {'LEVEL_1'} {$LEVEL_1}
					,element {'TotalCount'} {fn:count($search/COMPANYPROFILE_LFR:REPRESENTATION_TYPE_ID[. = $IDs])}
				}
    
		return ($COMPANYPROFILE_LFR ,$COMPANYPROFILE_LFR_NEW ,$WHO_COUNSELS_WHO ,$BDBS_REPRESENTERS)
		(: return ($BDBS_REPRESENTERS) :)
	)
	
	let $response := (
		
		for $res in fn:distinct-values($response/Company_Name/text())
			
			let $IP_Count :=   fn:sum($response[(Company_Name eq $res) and (LEVEL_1 eq 'IP')]/TotalCount)
			let $Transactional_Count :=   fn:sum($response[(Company_Name eq $res) and (LEVEL_1 eq 'Transactional')]/TotalCount)
			let $LITIGATION_COUNT :=   fn:sum($response[(Company_Name eq $res) and (LEVEL_1 eq 'Litigation')]/TotalCount)
			let $TOTAL_COUNT := fn:sum(($IP_Count,$Transactional_Count,$LITIGATION_COUNT))
		
			let $obj := element {'RECORD'} {
				element {'COMPANY_NAME'} {$res}
				,element {'IP_Count'} {$IP_Count}
				,element {'Transactional_Count'} {$Transactional_Count}
				,element {'LITIGATION_COUNT'} {$LITIGATION_COUNT}
				,element {'TOTAL_COUNT'} {$TOTAL_COUNT}
			}
			
			order by  $TOTAL_COUNT descending, $res ascending
			return $obj
	)
	
	let $response := element {'RESULT'} {$response}

	let $custom :=
		let $config := json:config('custom')
		let $_ := map:put( $config, 'whitespace', 'ignore' )
		let $_ := map:put( $config, 'array-element-names', ('RECORD') )
		return $config

	let $response := xdmp:to-json-string(json:transform-to-json($response, $custom)//RECORD)
	
	return $response
};

declare function firm:GetRepresentationTypeIDs($level1, $level2)
{
	let $response-array := json:array()
	
	let $result := if ($level2 ne '') then
			cts:element-values(xs:QName('REPRESENTATION_TYPES:REPRESENTATION_TYPE_ID'),(),(),
				cts:and-query((
					cts:directory-query($config:RD-REPRESENTATION_TYPES-PATH)
					,cts:element-value-query(xs:QName('REPRESENTATION_TYPES:LEVEL_1'),$level1,'case-insensitive')
					,cts:element-value-query(xs:QName('REPRESENTATION_TYPES:LEVEL_2'),$level2,'case-insensitive')
				)))
		else 
			cts:element-values(xs:QName('REPRESENTATION_TYPES:REPRESENTATION_TYPE_ID'),(),(),
				cts:and-query((
					cts:directory-query($config:RD-REPRESENTATION_TYPES-PATH),
					cts:element-value-query(xs:QName('REPRESENTATION_TYPES:LEVEL_1'),$level1)
				)))
  
	return $result
};

declare function firm:GetCompanyLFRSummary($level1, $level2)
{
	let $response-array := json:array()
	
	let $result := if ($level2 ne '') then
			cts:search(/REPRESENTATION_TYPES,
				cts:and-query((
					cts:directory-query($config:RD-REPRESENTATION_TYPES-PATH)
					,cts:element-value-query(xs:QName('REPRESENTATION_TYPES:LEVEL_1'),$level1,'case-insensitive')
					,cts:element-value-query(xs:QName('REPRESENTATION_TYPES:LEVEL_2'),$level2,'case-insensitive')
				)))
		else 
			cts:search(/REPRESENTATION_TYPES,
				cts:and-query((
					cts:directory-query($config:RD-REPRESENTATION_TYPES-PATH),
					cts:element-value-query(xs:QName('REPRESENTATION_TYPES:LEVEL_1'),$level1)
				)))
  
	let $response :=  for $item in $result
		let $response-obj :=json:object()
		let $obj := element {'OBJ'} {
			element {'REPRESENTATION_TYPE_ID'} {$item/REPRESENTATION_TYPES:REPRESENTATION_TYPE_ID/text()}
			,element {'LEVEL1'} {$item/REPRESENTATION_TYPES:LEVEL_1/text()}
			,element {'LEVEL2'} {$item/REPRESENTATION_TYPES:LEVEL_2/text()}
		}
    
		return $obj
  
	return $response
};

declare function firm:GetLateralPartnerPracticeAddPostMerger($FirmIDs, $title,$interval)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($FirmIDs)
	let $data := if($checkMergerData != '') then firm:GetLateralPartnerPracticeAddPM($FirmIDs, $title,$interval) else firm:GetLateralPartnerPracticeAdd($FirmIDs, $title,$interval)
	return $data
};

declare function firm:GetLateralPartnerPracticeAdd($FirmIDs, $title,$Interval)
{
	let $FirmIDs := $FirmIDs ! firm:GetREIdByOrgId(.)
	
	let $title_q := if (($title !='') and ($title)) then
			cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:Title'), $title, ('case-insensitive'))
		else ()
	
	let $interval := if(xs:string($Interval) ne '') then $Interval else 4

	
	let $sDate := xs:date(fn:concat((fn:year-from-date(fn:current-date())-xs:integer($interval)),'-01-01'))
	let $eDate := xs:date(fn:concat(fn:year-from-date(fn:current-date()),'-12-31'))

	let $practice_areas := cts:element-values(xs:QName('practices_kws:practice_area'))

	let $conditions := (
		 cts:directory-query($config:RD-ALI_RE_LATERALMOVES_DATA-PATH,'infinity')
		,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'),'0/0/0000')) 
		,cts:element-range-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), '>=', $sDate)
		,cts:element-range-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), '<=', $eDate)
	)

	let $response-arr := json:array()
	
	let $_ := (
  for $FirmID in $FirmIDs
    for $practice_area in $practice_areas
      let $key := fn:concat('*',$practice_area,'*')
      let $search := cts:search(/ALI_RE_LateralMoves_Data,
          cts:and-query((
             $conditions
			,$title_q 
            ,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:company_Id'),$FirmID)
            ,cts:element-word-query(xs:QName('ALI_RE_LateralMoves_Data:practices'), $key, ('wildcarded', 'case-insensitive'))
          )))
      
      let $firm_name := $search[1]/ALI_RE_LateralMoves_Data:Company_Name/text()
      let $AddPercentage := fn:count($search/ALI_RE_LateralMoves_Data:action[. = 'added'])
      let $MinusPercentage := fn:count($search/ALI_RE_LateralMoves_Data:action[. = 'removed'])
      
      let $response-obj := json:object()
      let $_ := (
         map:put($response-obj, 'firm_id', $FirmID)
        ,map:put($response-obj, 'firm_name', $firm_name)
        ,map:put($response-obj, 'Practice_area', $practice_area)
        ,map:put($response-obj, 'AddPercentage', $AddPercentage)
        ,map:put($response-obj, 'MinusPercentage', $MinusPercentage)
      )
      let $_ := json:array-push($response-arr,$response-obj)
      
      return ()
	)

	return $response-arr
};

declare function firm:GetLateralPartnerPracticeAddPM($OrganisationID, $title,$Interval)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID	

	let $FirmIDs := fn:distinct-values(firm:GetREIdByOrgId2($orgIDs))
	
	let $title_q := if (($title !='') and ($title)) then
			cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:Title'), $title, ('case-insensitive'))
		else ()
	
	let $interval := if(xs:string($Interval) ne '') then $Interval else 4
	let $sDate := xs:date(fn:concat((fn:year-from-date(fn:current-date())-xs:integer($interval)),'-01-01'))
	let $eDate := xs:date(fn:concat(fn:year-from-date(fn:current-date()),'-12-31'))

	let $practice_areas := cts:element-values(xs:QName('practices_kws:practice_area'))

	let $conditions := (
		 cts:directory-query($config:RD-ALI_RE_LATERALMOVES_DATA-PATH,'infinity')
		,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'),'0/0/0000')) 
		,cts:element-range-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), '>=', $sDate)
		,cts:element-range-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), '<=', $eDate)
	)

	let $response-arr := json:array()
	
	let $_ := for $practice_area in $practice_areas
				let $key := fn:concat('*',$practice_area,'*')
				let $search := cts:search(/ALI_RE_LateralMoves_Data,
					cts:and-query((
						$conditions
						,$title_q 
						,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:company_Id'),$FirmIDs)
						,cts:element-word-query(xs:QName('ALI_RE_LateralMoves_Data:practices'), $key, ('wildcarded', 'case-insensitive'))
					)))
				
				let $firm_name :=(:) $search[1]/ALI_RE_LateralMoves_Data:Company_Name/text():) ''
				let $AddPercentage := fn:count($search/ALI_RE_LateralMoves_Data:action[. = 'added'])
				let $MinusPercentage := fn:count($search/ALI_RE_LateralMoves_Data:action[. = 'removed'])
				
				let $response-obj := json:object()
				let $_ := (
					map:put($response-obj, 'firm_id', $FirmIDs[1])
					,map:put($response-obj, 'firm_name', $firm_name)
					,map:put($response-obj, 'Practice_area', $practice_area)
					,map:put($response-obj, 'AddPercentage', $AddPercentage)
					,map:put($response-obj, 'MinusPercentage', $MinusPercentage)
				)
				let $_ := json:array-push($response-arr,$response-obj)
				
				return ()
	

	return $response-arr
};

declare function firm:GetLawyerMoveStatsPostMerger($FirmIDs, $title,$Interval)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($FirmIDs)
	let $data := if($checkMergerData != '') then firm:GetLawyerMoveStatsPM($FirmIDs, $title,$Interval) else firm:GetLawyerMoveStats($FirmIDs, $title,$Interval)
	return $data
};

declare function firm:GetLawyerMoveStats($FirmIDs, $title,$Interval)
{
	let $FirmIDs := fn:tokenize($FirmIDs,',')
	
	let $RE_IDs := $FirmIDs ! firm:GetREIdByOrgId(.)

	let $interval := if(xs:string($Interval) ne '') then $Interval else 2

	let $fromYear := fn:concat('P',$interval,'Y')
	let $qDate := fn:format-date(xs:date(xdmp:parse-dateTime('[Y01]-[M01]-[D01]',xs:string(fn:current-date() - xs:yearMonthDuration($fromYear)))),'[Y0001]-[M01]-[D01]')

	let $title_q := if (($title !='') and ($title)) then
			cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:Title'), $title, ('case-insensitive'))
		else ()
  
	let $conditions := (
		 cts:directory-query($config:RD-ALI_RE_LATERALMOVES_DATA-PATH,'infinity')
		,cts:element-range-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), '>=', xs:date($qDate))
		,$title_q
		,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'),('0000-00-00','0/0/0000')))
	)

	let $added_q := cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:action'), 'added', ('case-insensitive'))
	let $removed_q := cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:action'), 'removed', ('case-insensitive'))

	let $company-obj := json:object()
	let $response-arr := json:array()

	let $response := (
		
		(: -------------------------------------------------------------- 01: FirmJoined -------------------------------------------------------------- :)
		let $FirmJoined := for $RE_ID in $RE_IDs
			for $x in cts:element-values(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), (), (),
				cts:and-query((
					 $conditions, $added_q
					,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), $RE_ID) 
				)))
      
				let $response-obj := json:object()
		  
				let $search := cts:search(/ALI_RE_LateralMoves_Data,
					cts:and-query((
						 $conditions, $added_q
						,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), $RE_ID) 
						,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), xs:string($x))
						,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), xs:string($RE_ID)))
						,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyName_From'), ''))
					)))
		  
				let $Name := $search[1]/ALI_RE_LateralMoves_Data:CompanyName_From/text()
		  
				let $_ := (
					 map:put($response-obj,'Name', $Name)
					,map:put($response-obj,'Total', fn:count($search))
					,map:put($response-obj,'Type', 'FirmJoined')
				)
				let $_ := json:array-push($response-arr,$response-obj)
		  
				return ()
      
		(: -------------------------------------------------------------- 02: FirmLeft -------------------------------------------------------------- :)
		let $FirmLeft := for $RE_ID in $RE_IDs
			for $x in cts:element-values(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), (), (), 
				cts:and-query((
					$conditions, $removed_q
					,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), $RE_ID) 
				)))
      
				let $response-obj := json:object()
      
				let $search := cts:search(/ALI_RE_LateralMoves_Data,
					cts:and-query((
						 $conditions, $removed_q
						,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), $RE_ID)
						,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), xs:string($x))
						,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), xs:string($RE_ID)))
					)))
      
				let $Name := $search[1]/ALI_RE_LateralMoves_Data:CompanyName_To/text()

				let $_ := (
					 map:put($response-obj,'Name', $Name)
					,map:put($response-obj,'Total', fn:count($search))
					,map:put($response-obj,'Type', 'FirmLeft')
				)
				let $_ := json:array-push($response-arr,$response-obj)
      
				return ()
  
		(: -------------------------------------------------------------- 03: CityLeft -------------------------------------------------------------- :)
		let $CityLeft := for $RE_ID in $RE_IDs
			for $x in cts:element-values(xs:QName('ALI_RE_LateralMoves_Data:loc'), (), ('collation=http://marklogic.com/collation//S1/AS/T0020'), 
				cts:and-query((
					$conditions, $removed_q
					,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), $RE_ID)
					,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:loc'),''))
				)))
				let $response-obj := json:object()
				let $Total := fn:count(cts:search(/,
					cts:and-query((
						$conditions, $removed_q
						,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), $RE_ID)
						,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:loc'), xs:string($x),('case-insensitive','whitespace-insensitive'))
						,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:loc'),''))
					))))
			  
				let $Name := $x
				let $_ := (
					 map:put($response-obj,'Name',$Name)
					,map:put($response-obj,'Total',$Total)
					,map:put($response-obj,'Type','CityLeft')
				)
				let $_ := json:array-push($response-arr,$response-obj)
				return ()
  
		(: -------------------------------------------------------------- 04: CityJoined -------------------------------------------------------------- :)
		let $CityJoined := for $RE_ID in $RE_IDs
			for $x in cts:element-values(xs:QName('ALI_RE_LateralMoves_Data:loc'), (), ('collation=http://marklogic.com/collation//S1/AS/T0020'), cts:and-query((
        $conditions, $added_q
        ,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), $RE_ID) 
		,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:loc'),''))
      )))
      let $response-obj := json:object()
      let $Total := fn:count(cts:search(/,
        cts:and-query((
          $conditions, $added_q
          ,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), $RE_ID) 
          ,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:loc'), xs:string($x),('case-insensitive','whitespace-insensitive'))
		  ,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:loc'),''))
        ))))
      
      let $Name := $x
      let $_ := (
         map:put($response-obj,'Name',$Name)
        ,map:put($response-obj,'Total',$Total)
        ,map:put($response-obj,'Type','CityJoined')
      )
      let $_ := json:array-push($response-arr,$response-obj)
      return ()
    
		(: -------------------------------------------------------------- 05: PAJoined -------------------------------------------------------------- :)
		let $PAJoined := for $RE_ID in $RE_IDs
    for $x in cts:element-values(xs:QName('practices_kws:practice_area'))
      let $key := fn:concat('*',$x,'*')
      let $PAJoinedCount := fn:count(cts:search(/,
        cts:and-query((
           $conditions
          ,$added_q
          ,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), $RE_ID)
          ,cts:element-word-query(xs:QName('ALI_RE_LateralMoves_Data:practices'), $key, ('wildcarded', 'case-insensitive'))
        ))))
      let $_ := if ($PAJoinedCount >0 ) then (
          let $response-obj := json:object()
          let $_ := (
             map:put($response-obj,'Name', $x)
            ,map:put($response-obj,'Total', $PAJoinedCount)
            ,map:put($response-obj,'Type', 'PAJoined')
          )
          let $_ := json:array-push($response-arr,$response-obj)
          return ()
        )
        else ()
      return ()
    
		(: -------------------------------------------------------------- 06: PALeft -------------------------------------------------------------- :)
		let $PALeft := for $RE_ID in $RE_IDs
    for $x in cts:element-values(xs:QName('practices_kws:practice_area'))
      let $key := fn:concat('*',$x,'*')
      let $PALeftCount := fn:count(cts:search(/,
        cts:and-query((
           $conditions
          ,$removed_q
          ,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), $RE_ID)
          ,cts:element-word-query(xs:QName('ALI_RE_LateralMoves_Data:practices'), $key, ('wildcarded', 'case-insensitive'))
        ))))
      let $_ := if ($PALeftCount >0 ) then (
          let $response-obj := json:object()
          let $_ := (
             map:put($response-obj,'Name', $x)
            ,map:put($response-obj,'Total', $PALeftCount)
            ,map:put($response-obj,'Type', 'PALeft')
          )
          let $_ := json:array-push($response-arr,$response-obj)
          return ()
        )
        else ()
      return ()
  
		(: -------------------------------------------------------------- 07: TotalJoined -------------------------------------------------------------- :)
		let $TotalJoined := for $RE_ID in $RE_IDs
			let $Name := firm:GetCompanyName($RE_ID)
			let $TotalJoinedCount := fn:count(cts:search(/,
			  cts:and-query((
				$conditions,$added_q,
				cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), $RE_ID)
			  ))))
			
			let $_ := if ($TotalJoinedCount>0) then (
				let $response-obj := json:object()
				let $_ := (
				  map:put($response-obj, 'Name', $Name)
				  ,map:put($response-obj, 'Total', $TotalJoinedCount)
				  ,map:put($response-obj, 'Type', 'TotalJoined')
				)
				let $_ := json:array-push($response-arr,$response-obj)
				return ()
			  ) else ()  
			return ()
  
		(: -------------------------------------------------------------- 08: TotalLeft -------------------------------------------------------------- :)
		let $TotalLeft := for $RE_ID in $RE_IDs
    let $Name := firm:GetCompanyName($RE_ID)
    let $TotalLeftCount := fn:count(cts:search(/,
      cts:and-query((
        $conditions,$removed_q,
        cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), $RE_ID)
      ))))
    
    let $_ := if ($TotalLeftCount>0) then (
        let $response-obj := json:object()
        let $_ := (
           map:put($response-obj,'Name',$Name)
          ,map:put($response-obj,'Total',$TotalLeftCount)
          ,map:put($response-obj,'Type','TotalLeft')
        )
        let $_ := json:array-push($response-arr,$response-obj)
        return ()
      ) else ()  
    return ()
    
		return ()
	)

	return ($response-arr)
};

declare function firm:GetLawyerMoveStatsPM($FirmIDs, $title,$Interval)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($FirmIDs)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$FirmIDs),',') else $FirmIDs

	(: let $FirmIDs := $orgIDs :)
	
	let $RE_IDs := firm:GetREIdByOrgId2($orgIDs)
	let $interval := if(xs:string($Interval) ne '') then $Interval else 2

	let $fromYear := fn:concat('P',$interval,'Y')
	let $qDate := fn:format-date(xs:date(xdmp:parse-dateTime('[Y01]-[M01]-[D01]',xs:string(fn:current-date() - xs:yearMonthDuration($fromYear)))),'[Y0001]-[M01]-[D01]')
	

	let $title_q := if (($title !='') and ($title)) then
			cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:Title'), $title, ('case-insensitive'))
		else ()
  
	let $conditions := (
		 cts:directory-query($config:RD-ALI_RE_LATERALMOVES_DATA-PATH,'infinity')
		,cts:element-range-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), '>=', xs:date($qDate))
		,$title_q
		,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'),('0000-00-00','0/0/0000')))
	)

	let $added_q := cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:action'), 'added', ('case-insensitive'))
	let $removed_q := cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:action'), 'removed', ('case-insensitive'))

	let $company-obj := json:object()
	let $response-arr := json:array()

	let $response := (
		
		(: -------------------------------------------------------------- 01: FirmJoined -------------------------------------------------------------- :)
		let $FirmJoined := for $RE_ID in $RE_IDs
			for $x in cts:search(/,
							cts:and-query((
								$conditions, $added_q
								,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), $RE_ID))
							))//ALI_RE_LateralMoves_Data:CompanyId_From/text() 
					
					
					(: cts:element-values(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), (), (),
				cts:and-query((
					 $conditions, $added_q
					,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), $RE_ID) 
				))) :)
      
				let $response-obj := json:object()
		  
				let $search := cts:search(/ALI_RE_LateralMoves_Data,
					cts:and-query((
						 $conditions, $added_q
						,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), $RE_ID) 
						,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), xs:string($x))
						,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyName_From'), ''))
						,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), xs:string($RE_ID)))
					)))
		  
				let $Name := $search[1]/ALI_RE_LateralMoves_Data:CompanyName_From/text()
		  
				let $_ := (
					 map:put($response-obj,'Name', $Name)
					,map:put($response-obj,'Total', fn:count($search))
					,map:put($response-obj,'Type', 'FirmJoined')
				)
				let $_ := json:array-push($response-arr,$response-obj)
		  
				return ()
      
		(: -------------------------------------------------------------- 02: FirmLeft -------------------------------------------------------------- :)
		let $FirmLeft := for $RE_ID in $RE_IDs
			for $x in cts:element-values(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), (), (), 
				cts:and-query((
					$conditions, $removed_q
					,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), $RE_ID) 
				)))
      
				let $response-obj := json:object()
      
				let $search := cts:search(/ALI_RE_LateralMoves_Data,
					cts:and-query((
						 $conditions, $removed_q
						,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), $RE_ID)
						,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), xs:string($x))
						,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), xs:string($RE_ID)))
					)))
      
				let $Name := $search[1]/ALI_RE_LateralMoves_Data:CompanyName_To/text()

				let $_ := (
					 map:put($response-obj,'Name', $Name)
					,map:put($response-obj,'Total', fn:count($search))
					,map:put($response-obj,'Type', 'FirmLeft')
				)
				let $_ := json:array-push($response-arr,$response-obj)
      
				return ()
  
		(: -------------------------------------------------------------- 03: CityLeft -------------------------------------------------------------- :)
		let $CityLeft := for $RE_ID in $RE_IDs
			for $x in cts:element-values(xs:QName('ALI_RE_LateralMoves_Data:loc'), (), ('collation=http://marklogic.com/collation//S1/AS/T0020'), 
				cts:and-query((
					$conditions, $removed_q
					,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), $RE_ID)
					,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:loc'),''))
				)))
				let $response-obj := json:object()
				let $Total := fn:count(cts:search(/,
					cts:and-query((
						$conditions, $removed_q
						,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), $RE_ID)
						,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:loc'), xs:string($x),('case-insensitive','whitespace-insensitive'))
						,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:loc'),''))
					))))
			  
				let $Name := $x
				let $_ := (
					 map:put($response-obj,'Name',$Name)
					,map:put($response-obj,'Total',$Total)
					,map:put($response-obj,'Type','CityLeft')
				)
				let $_ := json:array-push($response-arr,$response-obj)
				return ()
  
		(: -------------------------------------------------------------- 04: CityJoined -------------------------------------------------------------- :)
		let $CityJoined := for $RE_ID in $RE_IDs
			for $x in cts:element-values(xs:QName('ALI_RE_LateralMoves_Data:loc'), (), ('collation=http://marklogic.com/collation//S1/AS/T0020'), cts:and-query((
        $conditions, $added_q
        ,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), $RE_ID) 
		,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:loc'),''))
      )))
      let $response-obj := json:object()
      let $Total := fn:count(cts:search(/,
        cts:and-query((
          $conditions, $added_q
          ,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), $RE_ID) 
          ,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:loc'), xs:string($x),('case-insensitive','whitespace-insensitive'))
		  ,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:loc'),''))
        ))))
      
      let $Name := $x
      let $_ := (
         map:put($response-obj,'Name',$Name)
        ,map:put($response-obj,'Total',$Total)
        ,map:put($response-obj,'Type','CityJoined')
      )
      let $_ := json:array-push($response-arr,$response-obj)
      return ()
    
		(: -------------------------------------------------------------- 05: PAJoined -------------------------------------------------------------- :)
		let $PAJoined := for $RE_ID in $RE_IDs
    for $x in cts:element-values(xs:QName('practices_kws:practice_area'))
      let $key := fn:concat('*',$x,'*')
      let $PAJoinedCount := fn:count(cts:search(/,
        cts:and-query((
           $conditions
          ,$added_q
          ,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), $RE_ID)
          ,cts:element-word-query(xs:QName('ALI_RE_LateralMoves_Data:practices'), $key, ('wildcarded', 'case-insensitive'))
        ))))
      let $_ := if ($PAJoinedCount >0 ) then (
          let $response-obj := json:object()
          let $_ := (
             map:put($response-obj,'Name', $x)
            ,map:put($response-obj,'Total', $PAJoinedCount)
            ,map:put($response-obj,'Type', 'PAJoined')
          )
          let $_ := json:array-push($response-arr,$response-obj)
          return ()
        )
        else ()
      return ()
    
		(: -------------------------------------------------------------- 06: PALeft -------------------------------------------------------------- :)
		let $PALeft := for $RE_ID in $RE_IDs
    for $x in cts:element-values(xs:QName('practices_kws:practice_area'))
      let $key := fn:concat('*',$x,'*')
      let $PALeftCount := fn:count(cts:search(/,
        cts:and-query((
           $conditions
          ,$removed_q
          ,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), $RE_ID)
          ,cts:element-word-query(xs:QName('ALI_RE_LateralMoves_Data:practices'), $key, ('wildcarded', 'case-insensitive'))
        ))))
      let $_ := if ($PALeftCount >0 ) then (
          let $response-obj := json:object()
          let $_ := (
             map:put($response-obj,'Name', $x)
            ,map:put($response-obj,'Total', $PALeftCount)
            ,map:put($response-obj,'Type', 'PALeft')
          )
          let $_ := json:array-push($response-arr,$response-obj)
          return ()
        )
        else ()
      return ()
  
		(: -------------------------------------------------------------- 07: TotalJoined -------------------------------------------------------------- :)
		let $TotalJoined := for $RE_ID in $RE_IDs
			let $Name := firm:GetCompanyName($RE_ID)
			let $TotalJoinedCount := fn:count(cts:search(/,
			  cts:and-query((
				$conditions,$added_q,
				cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_To'), $RE_ID)
			  ))))
			
			let $_ := if ($TotalJoinedCount>0) then (
				let $response-obj := json:object()
				let $_ := (
				  map:put($response-obj, 'Name', $Name)
				  ,map:put($response-obj, 'Total', $TotalJoinedCount)
				  ,map:put($response-obj, 'Type', 'TotalJoined')
				)
				let $_ := json:array-push($response-arr,$response-obj)
				return ()
			  ) else ()  
			return ()
  
		(: -------------------------------------------------------------- 08: TotalLeft -------------------------------------------------------------- :)
		let $TotalLeft := for $RE_ID in $RE_IDs
    let $Name := firm:GetCompanyName($RE_ID)
    let $TotalLeftCount := fn:count(cts:search(/,
      cts:and-query((
        $conditions,$removed_q,
        cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:CompanyId_From'), $RE_ID)
      ))))
    
    let $_ := if ($TotalLeftCount>0) then (
        let $response-obj := json:object()
        let $_ := (
           map:put($response-obj,'Name',$Name)
          ,map:put($response-obj,'Total',$TotalLeftCount)
          ,map:put($response-obj,'Type','TotalLeft')
        )
        let $_ := json:array-push($response-arr,$response-obj)
        return ()
      ) else ()  
    return ()
    
		return ()
	)

	return ($response-arr)
	
};

declare function firm:GetCompanyName($company_id)
{
  let $name := if (map:get($company-obj,xs:string($company_id)) !='') then
      map:get($company-obj,xs:string($company_id))
    else (
      let $company := cts:search(/company,
        cts:and-query((
            cts:directory-query($config:RD-COMPANY-PATH,'1')
          ,cts:element-value-query(xs:QName('company:company_id'), xs:string($company_id))
        )))[1]/company:company/text()
      let $_ := map:put($company-obj,xs:string($company_id),$company)
      return $company
    )
  return $name  
};

(: Sunil Chouhan @ 2017-11-23 :)
declare function firm:GetChangesinHeadcountByPractices($OrganisationID)
{
	let $OrganisationID := fn:tokenize($OrganisationID,',')
	let $RE_ID := ($OrganisationID ! firm:GetREIdByOrgId(.))

	let $practice-areas := cts:element-values(xs:QName('practices_kws:practice_area'))

	let $sDate := fn:concat((fn:year-from-date(fn:current-date())-4),'-01-01')
	let $eDate := fn:concat(fn:year-from-date(fn:current-date()),'-12-31')
	
	

	let $PreviousYearValue := (fn:year-from-date(fn:current-date())-4)
	let $CurrentYearValue := fn:year-from-date(fn:current-date())

	let $company-data := cts:search(/company,
		cts:and-query((
			cts:directory-query($config:RD-COMPANY-PATH,'1')
			,cts:element-value-query(xs:QName('company:company_id'),$RE_ID)
		)))[1]
		
	let $response := (
		
		for $practice-area in $practice-areas
			
			let $key := fn:concat('*',$practice-area,'*')      
      let $search-result := fn:count(cts:search(/,
				cts:and-query((					 
					cts:directory-query("/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/")
					,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), $RE_ID)
					,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'))
					,cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practice_area'), $key, ('wildcarded', 'case-insensitive'))
					
				))))
			let $FirmId := $RE_ID
			let $FirmName := $company-data/company:company/text()
			let $PracticeArea := $practice-area
			(:let $headCount := fn:count($search-result//ALI_RE_Attorney_Data:title[. = ('Partner', 'Associate', 'Other Counsel/Attorney')]):)
			let $headCount := $search-result
      
      let $people_changes := cts:search(/,
				cts:and-query((
					 cts:directory-query("/LegalCompass/denormalized-data/TBL_RER_CACHE_ATTORNEY_MOVESCHANGES/")
					,cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:firm_id'),$RE_ID)
					,cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:practices'), $key, ('wildcarded', 'case-insensitive'))
					,cts:not-query(cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action_date'), '0000-00-00'))
					,cts:not-query(cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action_date'), ''))
					,cts:not-query(cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action_date'), '0/0*',("wildcarded")))
					,cts:element-range-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action_date'), '>=', xs:date($sDate))
					,cts:element-range-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action_date'), '<=', xs:date($eDate))
				)))
         
		let $return-res := if ($people_changes) then (			
			
        let $HeadCountPlus := fn:count($people_changes//TBL_RER_CACHE_ATTORNEY_MOVESCHANGES[(TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title = ('Partner', 'Associate', 'Other Counsel/Attorney')) and (TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action = 'added')])
				let $HeadCountMinus := fn:count($people_changes//TBL_RER_CACHE_ATTORNEY_MOVESCHANGES [(TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title = ('Partner', 'Associate', 'Other Counsel/Attorney')) and (TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action = 'removed')])

				let $PreviousYearCount := ($headCount - ($HeadCountPlus - $HeadCountMinus))
				let $ChangeInCount := ($headCount - ($headCount - ($HeadCountPlus - $HeadCountMinus)))
				let $FinalChange := if ($ChangeInCount lt 0) then -1*($ChangeInCount) else $ChangeInCount

				return element {'RECORD'} {
					 element {'FirmId'} {$FirmId}
					,element {'FirmName'} {$FirmName}
					,element {'PracticeArea'} {$PracticeArea}
					,element {'CurrentYearCount'} {$headCount}
					,element {'PreviousYearCount'} {$PreviousYearCount}
					,element {'ChangeInCount'} {$ChangeInCount}
					,element {'HeadCountPlus'} {$HeadCountPlus}
					,element {'HeadCountMinus'} {$HeadCountMinus}
					,element {'FinalChange'} {$FinalChange}
					,element {'PreviousYearValue'} {$PreviousYearValue}
					,element {'CurrentYearValue'} {$CurrentYearValue}
					,element {'HeadCount'} {$headCount}
				}
			)
			else ()
    
		order by $headCount descending
    
		return $return-res
  
	)[1 to 10]

	let $response := element {'RESULT'} {$response}
	
	let $custom :=
		let $config := json:config('custom')
		let $_ := map:put( $config, 'whitespace', 'ignore' )
		let $_ := map:put( $config, 'array-element-names', ('RECORD') )
		return $config
	
	let $response := xdmp:to-json-string(json:transform-to-json($response, $custom)//RECORD)	
	return $response
};

declare function firm:GetFinancialMetricesPostMerger($OrganisationID,$StartYear,$EndYear,$IsDisplayGBP)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)

	let $data := if($checkMergerData != '') then firm:GetFinancialMetricesPM($OrganisationID,$StartYear,$EndYear,$IsDisplayGBP) else firm:GetFinancialMetrices($OrganisationID,$StartYear,$EndYear,$IsDisplayGBP)
	return $data
};

declare function firm:GetFinancialMetrices($OrganisationID,$StartYear,$EndYear,$IsDisplayGBP)
{
	let $isDisplayGBP := if(xs:string($IsDisplayGBP) ne '') then $IsDisplayGBP else 'false'

	let $uk50IDD := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
							)))[1]
	
	let $global100ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
							cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
							)))[1]	
							
	let $date-query := if (fn:not($StartYear) and fn:not($EndYear)) then

			let $all-years := cts:element-values(xs:QName('AMLAW_200:PUBLISHYEAR'),(),('ascending'),
				cts:directory-query($config:RD-SURVEY-AMLAW_200-PATH))

			let $sYear := (fn:max($all-years)-4)
			let $eYear := fn:max($all-years)

			return cts:or-query((
				cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($sYear)),
				cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($eYear))
			))
		else (
			cts:element-range-query(xs:QName('AMLAW_200:PUBLISHYEAR'), '>=', xs:integer($StartYear)),
			cts:element-range-query(xs:QName('AMLAW_200:PUBLISHYEAR'), '<=', xs:integer($EndYear))
		)

	let $survey-data := cts:search(/AMLaw200,
		cts:and-query((
				cts:directory-query($config:RD-SURVEY-AMLAW_200-PATH)
				,cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($OrganisationID))
				,$date-query
			)),
			(
				cts:index-order(cts:element-reference(xs:QName('AMLAW_200:PUBLISHYEAR')) ,'ascending')
			)
		)

	let $org := cts:search(/organization,
		cts:and-query((
			cts:directory-query($config:DD-ORGANIZATION-PATH)
			,cts:element-value-query(xs:QName('organization:ORGANIZATION_ID'),$OrganisationID)
		)))[1]
		
	let $years := cts:element-values(xs:QName('AMLAW_200:PUBLISHYEAR'),(),('ascending'),
				cts:directory-query($config:RD-SURVEY-AMLAW_200-PATH))

	let $pYear := (fn:max($years)-4)
	let $maxYear := fn:max($years)	
    
	let $maxYearDataAmlaw := cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganisationID)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($maxYear))
			)))[1]

	let $maxYearDataUK50 := if($uk50IDD != '') then cts:search(/,
															cts:and-query((
																cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYear)),
																cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
																)))[1] else()
																
	let $maxYearDataGlobal100 := if($global100ID != '') then cts:search(/,
																cts:and-query((
																cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYear)),
																cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
																)))[1] else()

	let $china40 :=cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($maxYear)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]

													 																

    let $currentYear := if($maxYearDataAmlaw ne '' or $maxYearDataUK50 ne '' or $maxYearDataGlobal100 ne '' or $china40 ne '') then $maxYear else xs:integer($maxYear) - 1		
	let $previousYear := if($maxYearDataAmlaw ne '' or $maxYearDataUK50 ne '' or $maxYearDataGlobal100 ne '' or $china40 ne '') then $pYear else xs:integer($pYear) - 1		

	let $ORGANIZATION_NAME := if ($org/organization:ALM_NAME) then $org/organization:ALM_NAME/text() else $org/organization:ORGANIZATION_NAME/text()

	let $response-arr := json:array()
	let $prev-row-obj := json:object()

	let $_ := for $item in ($previousYear,$currentYear)
		
		let $survey := if($isDisplayGBP ne 'true') then cts:search(/AMLaw200,
		cts:and-query((
				cts:directory-query($config:RD-SURVEY-AMLAW_200-PATH)
				,cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($OrganisationID))
				,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($item))
			))) else()
		
		let $response-obj := json:object()
		let $uk50IDCurrentYear := if($uk50IDD != '') then cts:search(/,
															cts:and-query((
																cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($item)),
																cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
																)))[1] else()
																
		let $global100Data := if($global100ID != '' and $isDisplayGBP ne 'true') then cts:search(/,
															cts:and-query((
																cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($item)),
																cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
																)))[1] else()

		let $nlj250 := cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/','1'),
									cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string($item)),
									cts:element-value-query(xs:QName('nlj250:ORGANIZATION_ID'),xs:string($OrganisationID))
									)))

									
		
		let $china40Data :=cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($item)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]																												

		

		let $costValue := ($survey/AMLAW_200:GROSS_REVENUE - $survey/AMLAW_200:NET_OPERATING_INCOME)
		
		let $costByUK50 := if(xs:string($isDisplayGBP) ne 'true') then ($uk50IDCurrentYear//UK_50:GROSS_REVENUE_DOLLAR/text() - ($uk50IDCurrentYear//UK_50:PPP_DOLLAR/text() * $uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text())) 
							else (($uk50IDCurrentYear//UK_50:GROSS_REVENUE_POUND_M/text() * 1000000)- ((if($uk50IDCurrentYear//UK_50:PPP_POUND_K/text()) then $uk50IDCurrentYear//UK_50:PPP_POUND_K/text() * 1000 else 0) * xs:integer($uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()))) 		
		
		let $costByChina40 := if($china40Data//CHINA_40:GROSS_REVENUE/text() ne '') then ($china40Data//CHINA_40:GROSS_REVENUE/text() - ($china40Data//CHINA_40:PROFITS_PER_PARTNER/text() * $china40Data//CHINA_40:EQUITY_PARTNERS/text())) else()

		let $COST := if(xs:string($costValue) ne '' and xs:string($costValue) ne '0') then $costValue 
						else if($global100Data//Global_100:GROSS_REVENUE/text() ne '') then ($global100Data//Global_100:GROSS_REVENUE/text() - ($global100Data//Global_100:PPP/text() * $global100Data//Global_100:NUM_EQUITY_PARTNERS/text()))
						else if($costByUK50) then $costByUK50
						else $costByChina40
		
		let $pplValue := fn:round-half-to-even(($survey/AMLAW_200:NET_OPERATING_INCOME div $survey/AMLAW_200:NUM_OF_LAWYERS ), 2)
		let $pplByUK50 :=if(xs:string($isDisplayGBP) ne 'true') then fn:round-half-to-even($uk50IDCurrentYear//UK_50:PPL_DOLLAR/text(),0) 
						else fn:round-half-to-even($uk50IDCurrentYear//UK_50:PPL_POUND_K/text() * 1000 , 0)
		
		let $PPL :=if(xs:string($pplValue) ne '' and xs:string($pplValue) ne '0') then $pplValue 
					else if($global100Data//Global_100:PPP/text() ne '') then fn:round-half-to-even(($global100Data//Global_100:PPP/text() * $global100Data//Global_100:NUM_EQUITY_PARTNERS/text()) div $global100Data//Global_100:NUM_LAWYERS/text(),0) 
					else if($pplByUK50) then $pplByUK50
					else if($china40Data//CHINA_40:PROFITS_PER_PARTNER/text() ne '') then fn:round-half-to-even(($china40Data//CHINA_40:PROFITS_PER_PARTNER/text() * $china40Data//CHINA_40:EQUITY_PARTNERS/text()) div $china40Data//CHINA_40:FIRMWIDE_LAWYERS/text(),0) 
					else()
		
		let $cplValue := fn:round-half-to-even((($survey/AMLAW_200:GROSS_REVENUE - $survey/AMLAW_200:NET_OPERATING_INCOME ) div $survey/AMLAW_200:NUM_OF_LAWYERS ), 2)
		
		let $pppValueGBP := if($uk50IDCurrentYear//UK_50:PPP_POUND_K/text()) then $uk50IDCurrentYear//UK_50:PPP_POUND_K/text() * 1000 else 0
		let $cplByUK50 := if(xs:string($isDisplayGBP) ne 'true') then (($uk50IDCurrentYear//UK_50:GROSS_REVENUE_DOLLAR/text() - ($uk50IDCurrentYear//UK_50:PPP_DOLLAR/text() * $uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text())) div $uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text())
						  else (( $uk50IDCurrentYear//UK_50:GROSS_REVENUE_POUND_M/text() * 1000000 - ($pppValueGBP * $uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text())) div $uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text())
						  
		let $cplByChina40 := if($china40Data//CHINA_40:GROSS_REVENUE/text() ne '') then ($china40Data//CHINA_40:GROSS_REVENUE/text() - ($china40Data//CHINA_40:PROFITS_PER_PARTNER/text() * $china40Data//CHINA_40:EQUITY_PARTNERS/text())) div $china40Data//CHINA_40:EQUITY_PARTNERS/text() else() 

		let $CPL := if(xs:string($cplValue) ne '' and xs:string($cplValue) ne '0') then $cplValue else
					if($global100Data//Global_100:GROSS_REVENUE/text() ne '') then 	fn:round-half-to-even(($global100Data//Global_100:GROSS_REVENUE/text() - ($global100Data//Global_100:PPP/text() * $global100Data//Global_100:NUM_EQUITY_PARTNERS/text())) div $global100Data//Global_100:NUM_LAWYERS/text() ,0)
					else if($cplByUK50) then $cplByUK50 
					else  $cplByChina40
		
		(: let $associateValue :=if($nlj250//nlj250:NUM_ASSOCIATES/text()) then $nlj250//nlj250:NUM_ASSOCIATES/text() else ($survey/AMLAW_200:NUM_OF_LAWYERS - $survey/AMLAW_200:TOTAL_PARTNERS)
		
		let $ASSOCIATES := if(xs:string($associateValue) ne '' and xs:string($associateValue) ne '0') then $associateValue
							else ($uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text() - $uk50IDCurrentYear//UK_50:TOTAL_PARTNERS/text())  :)

		let $ASSOCIATES := $nlj250//nlj250:NUM_ASSOCIATES/text()
		
		let $PPEQ := fn:round-half-to-even(($survey/AMLAW_200:NET_OPERATING_INCOME/text() div $survey/AMLAW_200:NUM_EQ_PARTNERS/text() ), 2)
		
		let $REVENUE :=if($survey/AMLAW_200:GROSS_REVENUE/text() ne '') then $survey/AMLAW_200:GROSS_REVENUE/text() else
						if($global100Data//Global_100:GROSS_REVENUE/text() ne '') then $global100Data//Global_100:GROSS_REVENUE/text()
						else if($uk50IDCurrentYear) then if(xs:string($isDisplayGBP) ne 'true') then  $uk50IDCurrentYear//UK_50:GROSS_REVENUE_DOLLAR/text()
							  else ($uk50IDCurrentYear//UK_50:GROSS_REVENUE_POUND_M/text() * 1000000)
						else $china40Data//CHINA_40:GROSS_REVENUE/text()  
		
		let $MARGIN := if($survey/AMLAW_200:PROFIT_MARGIN/text() ne '') then $survey/AMLAW_200:PROFIT_MARGIN/text() else 
					     if($global100Data//Global_100:GROSS_REVENUE/text() ne '') then fn:round-half-to-even(($global100Data//Global_100:PPP/text() * $global100Data//Global_100:NUM_EQUITY_PARTNERS/text()) div $global100Data//Global_100:GROSS_REVENUE/text() ,2) * 100
						 else if($uk50IDCurrentYear//UK_50:PROFIT_MARGIN/text()) then ($uk50IDCurrentYear//UK_50:PROFIT_MARGIN/text()) * 100
						 else fn:round-half-to-even(($china40Data//CHINA_40:PROFITS_PER_PARTNER/text() * $china40Data//CHINA_40:EQUITY_PARTNERS/text()) div $china40Data//CHINA_40:GROSS_REVENUE/text() ,2) * 100


		let $NUM_EQ_PARTNERS := if($survey/AMLAW_200:NUM_EQ_PARTNERS/text() ne '') then $survey/AMLAW_200:NUM_EQ_PARTNERS/text() else
								if($global100Data//Global_100:NUM_EQUITY_PARTNERS/text() ne '') then $global100Data//Global_100:NUM_EQUITY_PARTNERS/text()
								else if($uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()) then $uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()
								else $china40Data//CHINA_40:EQUITY_PARTNERS/text()


		let $nonEQPartnerByUK50 := 	$uk50IDCurrentYear//UK_50:TOTAL_PARTNERS/text() - $uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()
		
		let $NUM_NON_EQ_PARTNERS := if($survey/AMLAW_200:NUM_NON_EQ_PARTNERS/text() ne '') then $survey/AMLAW_200:NUM_NON_EQ_PARTNERS/text() 
									else $nonEQPartnerByUK50
		
		let $profitByUK50 := if(xs:string($isDisplayGBP) ne 'true') then $uk50IDCurrentYear//UK_50:PPP_DOLLAR/text() 
							 (: else $uk50IDCurrentYear//UK_50:PPP_POUND_K/text() :)
							 else $uk50IDCurrentYear//UK_50:PPP_POUND_K/text() * 1000

		let $PROFIT := if($survey/AMLAW_200:NET_OPERATING_INCOME/text() ne '') then $survey/AMLAW_200:NET_OPERATING_INCOME/text() else 
					   if($global100Data//Global_100:PPP/text() ne '') then ($global100Data//Global_100:PPP/text() * $global100Data//Global_100:NUM_EQUITY_PARTNERS/text())
					   else if($uk50IDCurrentYear) then
					   			if($profitByUK50 and $uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()) then ($profitByUK50 * $uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text())
								else if(xs:string($isDisplayGBP) ne 'true') then $uk50IDCurrentYear//UK_50:NET_PROFIT_DOLLAR/text()
									 else ($uk50IDCurrentYear//UK_50:NET_PROFIT_POUND_M/text() * 1000000)
					   else ($china40Data//CHINA_40:PROFITS_PER_PARTNER/text() * $china40Data//CHINA_40:EQUITY_PARTNERS/text())
		
		let $LEVERAGE := if($survey/AMLAW_200:LEVERAGE/text() ne '') then $survey/AMLAW_200:LEVERAGE/text() else 
						if($global100Data//Global_100:NUM_LAWYERS/text() ne '')	then fn:round-half-to-even(($global100Data//Global_100:NUM_LAWYERS/text() - $global100Data//Global_100:NUM_EQUITY_PARTNERS/text()) div $global100Data//Global_100:NUM_EQUITY_PARTNERS/text() ,2)
						 else if($uk50IDCurrentYear//UK_50:LEVERAGE/text()) then $uk50IDCurrentYear//UK_50:LEVERAGE/text()
						 else fn:round-half-to-even(($china40Data//CHINA_40:FIRMWIDE_LAWYERS/text() - $china40Data//CHINA_40:EQUITY_PARTNERS/text()) div $china40Data//CHINA_40:EQUITY_PARTNERS/text() ,2)
		
		let $RPL := if($survey/AMLAW_200:RPL/text() ne '') then $survey/AMLAW_200:RPL/text() else 
					if($global100Data//Global_100:REVENUE_PER_LAWYER/text() ne '') then $global100Data//Global_100:REVENUE_PER_LAWYER/text()
					else if($uk50IDCurrentYear) then if(xs:string($isDisplayGBP) ne 'true') then $uk50IDCurrentYear//UK_50:RPL_DOLLAR/text() else ($uk50IDCurrentYear//UK_50:RPL_POUND_K/text() * 1000)
					else $china40Data//CHINA_40:REVENUE_PER_LAWYER/text()
		
		let $PPP := if($survey/AMLAW_200:PPP/text() ne '') then $survey/AMLAW_200:PPP/text() else
					if($global100Data//Global_100:PPP/text() ne '') then $global100Data//Global_100:PPP/text() 
					else if($uk50IDCurrentYear) then if(xs:string($isDisplayGBP) ne 'true') then $uk50IDCurrentYear//UK_50:PPP_DOLLAR/text() else ($uk50IDCurrentYear//UK_50:PPP_POUND_K/text() * 1000)
					else $china40Data//CHINA_40:PROFITS_PER_PARTNER/text()

		let $REVENUECHANGE := if ((map:get($prev-row-obj,'REVENUE') ne 0) and (xs:string(map:get($prev-row-obj,'REVENUE')) ne '') and xs:string($REVENUE) ne '') then
				fn:round-half-to-even((((math:pow((xs:double($REVENUE) div xs:double(map:get($prev-row-obj,'REVENUE'))),0.25))-1)*100),2)
			else 0

		let $MARGINCHAGNE := if ((map:get($prev-row-obj,'MARGIN') ne 0) and (xs:string(map:get($prev-row-obj,'MARGIN')) ne '') and xs:string($MARGIN) ne '') then
				fn:round-half-to-even((((math:pow(($MARGIN div map:get($prev-row-obj,'MARGIN') ), 0.25) )- 1 )* 100 ),2)
				
			else 0

		let $NUMEQPARTNERSCHAGNE := if ((map:get($prev-row-obj,'NUM_EQ_PARTNERS') ne 0) and (map:get($prev-row-obj,'NUM_EQ_PARTNERS') ne 0) and xs:string($NUM_EQ_PARTNERS) ne '') then
				(:fn:round-half-to-even((((math:pow(($NUM_EQ_PARTNERS div map:get($prev-row-obj,'NUM_EQ_PARTNERS') ), 0.25) )- 1 )* 100)):)
				fn:round-half-to-even((((math:pow(($NUM_EQ_PARTNERS div map:get($prev-row-obj,'NUM_EQ_PARTNERS')), 0.25) )- 1 )* 100 ),2)
			else 0 

		let $NUMNONEQPARTNERSCHANGE := if ((map:get($prev-row-obj,'NUM_NON_EQ_PARTNERS') ne 0) and (map:get($prev-row-obj,'NUM_NON_EQ_PARTNERS') ne 0) and xs:string($NUM_NON_EQ_PARTNERS) ne '') then
				fn:round-half-to-even((((math:pow(($NUM_NON_EQ_PARTNERS div map:get($prev-row-obj,'NUM_NON_EQ_PARTNERS')), 0.25) )- 1 )* 100 ),2)
			else 0 

		let $PROFITCHANGE := if ((map:get($prev-row-obj,'PROFIT') ne 0) and (map:get($prev-row-obj,'PROFIT') ne 0) and xs:string($PROFIT) ne'') then
				fn:round-half-to-even((((math:pow(($PROFIT div map:get($prev-row-obj,'PROFIT') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $COSTCHANGE := if ((map:get($prev-row-obj,'COST') ne 0) and (map:get($prev-row-obj,'COST') ne 0) and xs:string($COST) ne '') then
				fn:round-half-to-even((((math:pow(($COST div map:get($prev-row-obj,'COST') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $LEVERAGECHANGE := if ((map:get($prev-row-obj,'LEVERAGE') ne 0) and (map:get($prev-row-obj,'LEVERAGE') ne 0) and xs:string($LEVERAGE) ne '') then
				fn:round-half-to-even((((math:pow(($LEVERAGE div map:get($prev-row-obj,'LEVERAGE') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $RPLCHANGE := if ((map:get($prev-row-obj,'RPL') ne 0) and (map:get($prev-row-obj,'RPL') ne 0) and xs:string($RPL) ne '') then
				fn:round-half-to-even((((math:pow(($RPL div map:get($prev-row-obj,'RPL') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $PPLCHANGE := if ((map:get($prev-row-obj,'PPL') ne 0) and (map:get($prev-row-obj,'PPL') ne 0) and xs:string($PPL) ne '') then
				fn:round-half-to-even((((math:pow(($PPL div map:get($prev-row-obj,'PPL') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $PPPCHANGE := if ((map:get($prev-row-obj,'PPP') ne 0) and (map:get($prev-row-obj,'PPP') ne 0) and xs:string($PPP) ne '') then
				fn:round-half-to-even((((math:pow(($PPP div map:get($prev-row-obj,'PPP') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $CPLCHANGE := (:if ((map:get($prev-row-obj,'CPL') ne 0) and (map:get($prev-row-obj,'CPL') ne 0) and xs:string($CPL) ne '') then
				fn:round-half-to-even((((math:pow(($CPL div map:get($prev-row-obj,'CPL') ), 0.25) )- 1 )* 100 ),2)
			else 0:) 0

		let $ASSOCIATESCHANGE := if ((map:get($prev-row-obj,'ASSOCIATES') ne 0) and (map:get($prev-row-obj,'ASSOCIATES') ne 0) and xs:string($ASSOCIATES) ne '') then
				fn:round-half-to-even((((math:pow(($ASSOCIATES div map:get($prev-row-obj,'ASSOCIATES') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $PPEQCHANGE := if ((map:get($prev-row-obj,'PPEQ') ne 0) and (map:get($prev-row-obj,'PPEQ') ne 0) and xs:string($PPEQ) ne '') then
				fn:round-half-to-even((((math:pow(($PPEQ div map:get($prev-row-obj,'PPEQ') ), 0.25) )- 1 )* 100 ),2) 
			else 0
		let $CPLCHANGE12 := if (map:get($prev-row-obj,'CPL') ne 0 and xs:string($CPL) ne '') then
				$CPL div map:get($prev-row-obj,'CPL')
			else 0
		let $CPLCHANGE := if($CPLCHANGE12 ne 0) then math:pow($CPLCHANGE12, 0.25) else 0

		(: let $cplCHH := $CPL div map:get($prev-row-obj,'CPL')	 :)

		let $_ := (
			 map:put($response-obj, 'ORGANIZATION_NAME', $ORGANIZATION_NAME)
			,map:put($response-obj, 'ORGANIZATION_ID', $OrganisationID)
			,map:put($response-obj, 'REVENUE', if(xs:string($REVENUE) ne '') then fn:round-half-to-even($REVENUE ,0) else 0)
			,map:put($response-obj, 'MARGIN', if(xs:string($MARGIN) ne '') then $MARGIN else 0)
			,map:put($response-obj, 'NUM_EQ_PARTNERS', if(xs:string($NUM_EQ_PARTNERS) ne '') then $NUM_EQ_PARTNERS else 0)
			,map:put($response-obj, 'NUM_NON_EQ_PARTNERS',if(xs:string($NUM_NON_EQ_PARTNERS) ne '') then  $NUM_NON_EQ_PARTNERS else 0)
			,map:put($response-obj, 'PROFIT',if(xs:string($PROFIT) ne '') then  $PROFIT else 0)
			,map:put($response-obj, 'COST',if(xs:string($COST)ne '') then  $COST else 0)
			,map:put($response-obj, 'LEVERAGE',if(xs:string($LEVERAGE) ne '') then  $LEVERAGE else 0)
			,map:put($response-obj, 'RPL',if(xs:string($RPL) ne '') then  $RPL else 0)
			,map:put($response-obj, 'PPL',if(xs:string($PPL) ne '') then  $PPL else 0)
			,map:put($response-obj, 'PPP',if(xs:string($PPP) ne '') then  $PPP else 0)
			,map:put($response-obj, 'CPL',if(xs:string($CPL) ne '') then  $CPL else 0)
			,map:put($response-obj, 'ASSOCIATES',if(xs:string($ASSOCIATES) ne '') then  $ASSOCIATES else 0)
			,map:put($response-obj, 'PPEQ',if(xs:string($PPEQ) ne '') then  $PPEQ else 0)
			,map:put($response-obj, 'REVENUECHANGE', $REVENUECHANGE )
			,map:put($response-obj, 'MARGINCHANGE', $MARGINCHAGNE)
			,map:put($response-obj, 'NUMEQPARTNERSCHANGE', $NUMEQPARTNERSCHAGNE)
			,map:put($response-obj, 'NUMNONEQPARTNERSCHANGE', $NUMNONEQPARTNERSCHANGE)
			,map:put($response-obj, 'PROFITCHANGE', $PROFITCHANGE)
			,map:put($response-obj, 'COSTCHANGE', $COSTCHANGE)
			,map:put($response-obj, 'LEVERAGECHANGE', $LEVERAGECHANGE)
			,map:put($response-obj, 'RPLCHANGE', $RPLCHANGE)
			,map:put($response-obj, 'PPLCHANGE', $PPLCHANGE)
			,map:put($response-obj, 'PPPCHANGE', $PPPCHANGE)
			,map:put($response-obj, 'CPLCHANGE', fn:round-half-to-even($CPLCHANGE,2))
			,map:put($response-obj, 'ASSOCIATESCHANGE', $ASSOCIATESCHANGE)
			,map:put($response-obj, 'PPEQCHANGE', $PPEQCHANGE)
			,map:put($response-obj, 'PUBLISHYEAR', xs:integer($item))
			,map:put($response-obj, 'cbuk50', $uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text())
			
		)

		let $_ := for $key in map:keys($response-obj)
			return map:put($prev-row-obj, $key, map:get($response-obj,$key))

		let $_ := json:array-push($response-arr, $response-obj)
		
		return ()

	return $response-arr
};

declare function firm:GetFinancialMetricesPM($OrganisationID,$StartYear,$EndYear,$IsDisplayGBP)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID

	let $isDisplayGBP := if(xs:string($IsDisplayGBP) ne '') then $IsDisplayGBP else 'false'

	let $uk50IDD := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$orgIDs)
							)))//UK_50:ORGANIZATION_ID/text()
	
	let $global100ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
							cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$orgIDs)
							)))//Global_100:ORGANIZATION_ID/text()
							
	let $date-query := if (fn:not($StartYear) and fn:not($EndYear)) then

			let $all-years := cts:element-values(xs:QName('AMLAW_200:PUBLISHYEAR'),(),('ascending'),
				cts:directory-query($config:RD-SURVEY-AMLAW_200-PATH))

			let $sYear := (fn:max($all-years)-4)
			let $eYear := fn:max($all-years)

			return cts:or-query((
				cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($sYear)),
				cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($eYear))
			))
		else (
			cts:element-range-query(xs:QName('AMLAW_200:PUBLISHYEAR'), '>=', xs:integer($StartYear)),
			cts:element-range-query(xs:QName('AMLAW_200:PUBLISHYEAR'), '<=', xs:integer($EndYear))
		)

	let $survey-data := cts:search(/AMLaw200,
		cts:and-query((
				cts:directory-query($config:RD-SURVEY-AMLAW_200-PATH)
				,cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$orgIDs)
				,$date-query
			)),
			(
				cts:index-order(cts:element-reference(xs:QName('AMLAW_200:PUBLISHYEAR')) ,'ascending')
			)
		)

	(: let $org := cts:search(/organization,
		cts:and-query((
			cts:directory-query($config:DD-ORGANIZATION-PATH)
			,cts:element-value-query(xs:QName('organization:ORGANIZATION_ID'),$OrganisationID)
		)))[1] :)
		
	let $years := cts:element-values(xs:QName('AMLAW_200:PUBLISHYEAR'),(),('ascending'),
				cts:directory-query($config:RD-SURVEY-AMLAW_200-PATH))

	let $pYear := (fn:max($years)-4)
	let $maxYear := fn:max($years)	
    
	let $maxYearDataAmlaw := cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$orgIDs)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($maxYear))
			)))

	let $maxYearDataUK50 := if($uk50IDD != '') then cts:search(/,
															cts:and-query((
																cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYear)),
																cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$orgIDs)
																))) else()
																
	let $maxYearDataGlobal100 := if($global100ID != '') then cts:search(/,
																cts:and-query((
																cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYear)),
																cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$orgIDs)
																))) else()	

    let $currentYear := if($maxYearDataAmlaw != '' or $maxYearDataUK50 != '' or $maxYearDataGlobal100 != '') then $maxYear else xs:integer($maxYear) - 1		
	let $previousYear := if($maxYearDataAmlaw != '' or $maxYearDataUK50 != '' or $maxYearDataGlobal100 != '') then $pYear else xs:integer($pYear) - 1		

	let $ORGANIZATION_NAME :=(: if ($org/organization:ALM_NAME) then $org/organization:ALM_NAME/text() else $org/organization:ORGANIZATION_NAME/text():) ''

	let $response-arr := json:array()
	let $prev-row-obj := json:object()

	let $_ := for $item in ($previousYear,$currentYear)
		
		let $survey := if($isDisplayGBP ne 'true') then cts:search(/AMLaw200,
		cts:and-query((
				cts:directory-query($config:RD-SURVEY-AMLAW_200-PATH)
				,cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$orgIDs)
				,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($item))
			))) else()
		
		let $response-obj := json:object()
		let $uk50IDCurrentYear := if($uk50IDD != '') then cts:search(/,
															cts:and-query((
																cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($item)),
																cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$orgIDs)
																)))[1] else()
																
		let $global100Data := if($global100ID != '' and $isDisplayGBP ne 'true') then cts:search(/,
															cts:and-query((
																cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($item)),
																cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$orgIDs)
																))) else()		


		
		let $nlj250 := cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/','1'),
									cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string($item)),
									cts:element-value-query(xs:QName('nlj250:ORGANIZATION_ID'),xs:string($OrganisationID))
									)))

									

		

		let $costValue := if(sum($survey/AMLAW_200:NET_OPERATING_INCOME) ne 0) then (sum($survey/AMLAW_200:GROSS_REVENUE) - sum($survey/AMLAW_200:NET_OPERATING_INCOME/text())) else 0
		
		let $costByUK50 := if(xs:string($isDisplayGBP) ne 'true') then (sum($uk50IDCurrentYear//UK_50:GROSS_REVENUE_DOLLAR/text()) - (sum($uk50IDCurrentYear//UK_50:PPP_DOLLAR/text()) * sum($uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()))) 
							else (sum($uk50IDCurrentYear//UK_50:GROSS_REVENUE_POUND_M/text()) * 1000000 - (sum($uk50IDCurrentYear//UK_50:PPP_POUND_K/text()) * 1000 *sum( $uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()))) 
		
		let $COST := if(xs:string($costValue) ne '' and xs:string($costValue) ne '0') then $costValue 
						
						else if($global100Data//Global_100:GROSS_REVENUE/text() != '') then (sum($global100Data//Global_100:GROSS_REVENUE/text()) - (sum($global100Data//Global_100:PPP/text()) * sum($global100Data//Global_100:NUM_EQUITY_PARTNERS/text())))
						else $costByUK50
		
		let $pplValue :=if($survey/AMLAW_200:NUM_OF_LAWYERS != '') then  fn:round-half-to-even(sum($survey/AMLAW_200:NET_OPERATING_INCOME) div sum($survey/AMLAW_200:NUM_OF_LAWYERS ), 2) else 0
		let $PPL :=if(xs:string($pplValue) ne '' and xs:string($pplValue) ne '0') then
					$pplValue else if($global100Data//Global_100:PPP/text() != '') then fn:round-half-to-even(sum($global100Data//Global_100:PPP/text()) * sum($global100Data//Global_100:NUM_EQUITY_PARTNERS/text()) div sum($global100Data//Global_100:NUM_LAWYERS/text()),0) 
					else if(xs:string($isDisplayGBP) ne 'true') then sum($uk50IDCurrentYear//UK_50:PPL_DOLLAR/text()) else sum($uk50IDCurrentYear//UK_50:PPP_POUND_K/text()) * 1000
		
		let $cplValue := if($survey/AMLAW_200:NUM_OF_LAWYERS != '') then fn:round-half-to-even(((sum($survey/AMLAW_200:GROSS_REVENUE) - sum($survey/AMLAW_200:NET_OPERATING_INCOME) ) div sum($survey/AMLAW_200:NUM_OF_LAWYERS)), 2) else 0
		
		let $cplByUK50 := if(xs:string($isDisplayGBP) ne 'true' and $uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text() != '') then ((sum($uk50IDCurrentYear//UK_50:GROSS_REVENUE_DOLLAR/text()) - (sum($uk50IDCurrentYear//UK_50:PPP_DOLLAR/text()) * sum($uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()))) div sum($uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text()))
						  else if($uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text() != '') then 
						  		((sum($uk50IDCurrentYear//UK_50:GROSS_REVENUE_POUND_M/text()) * 1000000 - (sum($uk50IDCurrentYear//UK_50:PPP_POUND_K/text()) *1000 * sum($uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()))) div sum($uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text()))
								  else 0
						  
		let $CPL := if(xs:string($cplValue) ne '' and xs:string($cplValue) ne '0') then $cplValue else
					if($global100Data//Global_100:GROSS_REVENUE/text() != '' and $global100Data//Global_100:NUM_LAWYERS/text() != '') then 	fn:round-half-to-even((sum($global100Data//Global_100:GROSS_REVENUE/text()) - (sum($global100Data//Global_100:PPP/text()) * sum($global100Data//Global_100:NUM_EQUITY_PARTNERS/text()))) div sum($global100Data//Global_100:NUM_LAWYERS/text()) ,0)
						else $cplByUK50 
		
		let $associateValue :=if($nlj250//nlj250:NUM_ASSOCIATES/text()) then sum($nlj250//nlj250:NUM_ASSOCIATES/text()) else ( sum($survey/AMLAW_200:NUM_OF_LAWYERS) - sum($survey/AMLAW_200:TOTAL_PARTNERS))																										
		
		let $ASSOCIATES := if(xs:string($associateValue) ne '' and xs:string($associateValue) ne '0') then $associateValue
							else (sum($uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text()) - sum($uk50IDCurrentYear//UK_50:TOTAL_PARTNERS/text())) 
		
		let $PPEQ := if($survey/AMLAW_200:NUM_EQ_PARTNERS/text() != '') then fn:round-half-to-even((sum($survey/AMLAW_200:NET_OPERATING_INCOME/text()) div sum($survey/AMLAW_200:NUM_EQ_PARTNERS/text())), 2) else 0
		
		let $REVENUE :=if($survey/AMLAW_200:GROSS_REVENUE/text() != '') then sum($survey/AMLAW_200:GROSS_REVENUE/text()) else
						if($global100Data//Global_100:GROSS_REVENUE/text() != '') then sum($global100Data//Global_100:GROSS_REVENUE/text())
						else if(xs:string($isDisplayGBP) ne 'true') then  sum($uk50IDCurrentYear//UK_50:GROSS_REVENUE_DOLLAR/text())
							  else sum($uk50IDCurrentYear//UK_50:GROSS_REVENUE_POUND_M/text()) * 1000000 
		
		let $MARGIN := if($survey/AMLAW_200:PROFIT_MARGIN/text() != '') then sum($survey/AMLAW_200:PROFIT_MARGIN/text()) else 
					     if($global100Data//Global_100:GROSS_REVENUE/text() != '') then fn:round-half-to-even((sum($global100Data//Global_100:PPP/text()) * sum($global100Data//Global_100:NUM_EQUITY_PARTNERS/text())) div sum($global100Data//Global_100:GROSS_REVENUE/text()) ,2) * 100
						 else (sum($uk50IDCurrentYear//UK_50:PROFIT_MARGIN/text()) * 100)
		
		let $NUM_EQ_PARTNERS := if($survey/AMLAW_200:NUM_EQ_PARTNERS/text() != '') then sum($survey/AMLAW_200:NUM_EQ_PARTNERS/text()) else
								if($global100Data//Global_100:NUM_EQUITY_PARTNERS/text() != '') then sum($global100Data//Global_100:NUM_EQUITY_PARTNERS/text())
								else sum($uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text())
		
		let $NUM_NON_EQ_PARTNERS := if($survey/AMLAW_200:NUM_NON_EQ_PARTNERS/text() != '') then sum($survey/AMLAW_200:NUM_NON_EQ_PARTNERS/text()) else sum($uk50IDCurrentYear//UK_50:NUMBER_OF_NON_EQ_PARTNERS/text())
		
		let $profitByUK50 := if(xs:string($isDisplayGBP) ne 'true') then sum($uk50IDCurrentYear//UK_50:PPP_DOLLAR/text()) else sum($uk50IDCurrentYear//UK_50:PPP_POUND_K/text())
		let $PROFIT := if($survey/AMLAW_200:NET_OPERATING_INCOME/text() != '') then sum($survey/AMLAW_200:NET_OPERATING_INCOME/text()) else 
					   if($global100Data//Global_100:PPP/text() != '') then (sum($global100Data//Global_100:PPP/text()) * sum($global100Data//Global_100:NUM_EQUITY_PARTNERS/text()))
						else ($profitByUK50 * sum($uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()))
		
		let $LEVERAGE := if($survey/AMLAW_200:LEVERAGE/text() 	!= '') then sum($survey/AMLAW_200:LEVERAGE/text()) else 
						if($global100Data//Global_100:NUM_LAWYERS/text() != '' and $global100Data//Global_100:NUM_EQUITY_PARTNERS/text() != '')	then fn:round-half-to-even((sum($global100Data//Global_100:NUM_LAWYERS/text()) - sum($global100Data//Global_100:NUM_EQUITY_PARTNERS/text())) div sum($global100Data//Global_100:NUM_EQUITY_PARTNERS/text()) ,2)
						 else sum($uk50IDCurrentYear//UK_50:LEVERAGE/text())
		
		let $RPL := if($survey/AMLAW_200:RPL/text() != '') then sum($survey/AMLAW_200:RPL/text()) else 
					if($global100Data//Global_100:REVENUE_PER_LAWYER/text() != '') then sum($global100Data//Global_100:REVENUE_PER_LAWYER/text())
					else if(xs:string($isDisplayGBP) ne 'true') then sum($uk50IDCurrentYear//UK_50:RPL_DOLLAR/text()) else sum($uk50IDCurrentYear//UK_50:RPL_POUND_K/text()) * 1000
		
		let $PPP := if($survey/AMLAW_200:PPP/text() != '') then sum($survey/AMLAW_200:PPP/text()) else
					if($global100Data//Global_100:PPP/text() != '') then sum($global100Data//Global_100:PPP/text()) 
					else  if(xs:string($isDisplayGBP) ne 'true') then sum($uk50IDCurrentYear//UK_50:PPP_DOLLAR/text()) else sum($uk50IDCurrentYear//UK_50:PPP_POUND_K/text()) * 1000

		let $REVENUECHANGE := if ((map:get($prev-row-obj,'REVENUE') ne 0) and (xs:string(map:get($prev-row-obj,'REVENUE')) ne '') and xs:string($REVENUE) ne '') then
				fn:round-half-to-even((((math:pow((xs:double($REVENUE) div xs:double(map:get($prev-row-obj,'REVENUE'))),0.25))-1)*100),2)
			else 0

		let $MARGINCHAGNE := if ((map:get($prev-row-obj,'MARGIN') ne 0) and (xs:string(map:get($prev-row-obj,'MARGIN')) ne '') and xs:string($MARGIN) ne '') then
				fn:round-half-to-even((((math:pow(($MARGIN div map:get($prev-row-obj,'MARGIN') ), 0.25) )- 1 )* 100 ),2)
				
			else 0

		let $NUMEQPARTNERSCHAGNE := if ((map:get($prev-row-obj,'NUM_EQ_PARTNERS') ne 0) and (map:get($prev-row-obj,'NUM_EQ_PARTNERS') ne 0) and xs:string($NUM_EQ_PARTNERS) ne '') then
				(:fn:round-half-to-even((((math:pow(($NUM_EQ_PARTNERS div map:get($prev-row-obj,'NUM_EQ_PARTNERS') ), 0.25) )- 1 )* 100)):)
				fn:round-half-to-even((((math:pow(($NUM_EQ_PARTNERS div map:get($prev-row-obj,'NUM_EQ_PARTNERS')), 0.25) )- 1 )* 100 ),2)
			else 0 

		let $NUMNONEQPARTNERSCHANGE := if ((map:get($prev-row-obj,'NUM_NON_EQ_PARTNERS') ne 0) and (map:get($prev-row-obj,'NUM_NON_EQ_PARTNERS') ne 0) and xs:string($NUM_NON_EQ_PARTNERS) ne '') then
				fn:round-half-to-even((((math:pow(($NUM_NON_EQ_PARTNERS div map:get($prev-row-obj,'NUM_NON_EQ_PARTNERS')), 0.25) )- 1 )* 100 ),2)
			else 0 

		let $PROFITCHANGE := if ((map:get($prev-row-obj,'PROFIT') ne 0) and (map:get($prev-row-obj,'PROFIT') ne 0) and xs:string($PROFIT) ne'') then
				fn:round-half-to-even((((math:pow(($PROFIT div map:get($prev-row-obj,'PROFIT') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $COSTCHANGE := if ((map:get($prev-row-obj,'COST') ne 0) and (map:get($prev-row-obj,'COST') ne 0) and xs:string($COST) ne '') then
				fn:round-half-to-even((((math:pow(($COST div map:get($prev-row-obj,'COST') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $LEVERAGECHANGE := if ((map:get($prev-row-obj,'LEVERAGE') ne 0) and (map:get($prev-row-obj,'LEVERAGE') ne 0) and xs:string($LEVERAGE) ne '') then
				fn:round-half-to-even((((math:pow(($LEVERAGE div map:get($prev-row-obj,'LEVERAGE') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $RPLCHANGE := if ((map:get($prev-row-obj,'RPL') ne 0) and (map:get($prev-row-obj,'RPL') ne 0) and xs:string($RPL) ne '') then
				fn:round-half-to-even((((math:pow(($RPL div map:get($prev-row-obj,'RPL') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $PPLCHANGE := if ((map:get($prev-row-obj,'PPL') ne 0) and (map:get($prev-row-obj,'PPL') ne 0) and xs:string($PPL) ne '') then
				fn:round-half-to-even((((math:pow(($PPL div map:get($prev-row-obj,'PPL') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $PPPCHANGE := if ((map:get($prev-row-obj,'PPP') ne 0) and (map:get($prev-row-obj,'PPP') ne 0) and xs:string($PPP) ne '') then
				fn:round-half-to-even((((math:pow(($PPP div map:get($prev-row-obj,'PPP') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $CPLCHANGE := if ((map:get($prev-row-obj,'CPL') ne 0) and (map:get($prev-row-obj,'CPL') ne 0) and xs:string($CPL) ne '') then
				fn:round-half-to-even((((math:pow(($CPL div map:get($prev-row-obj,'CPL') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $ASSOCIATESCHANGE := if ((map:get($prev-row-obj,'ASSOCIATES') ne 0) and (map:get($prev-row-obj,'ASSOCIATES') ne 0) and xs:string($ASSOCIATES) ne '') then
				fn:round-half-to-even((((math:pow(($ASSOCIATES div map:get($prev-row-obj,'ASSOCIATES') ), 0.25) )- 1 )* 100 ),2)
			else 0

		let $PPEQCHANGE := if ((map:get($prev-row-obj,'PPEQ') ne 0) and (map:get($prev-row-obj,'PPEQ') ne 0) and xs:string($PPEQ) ne '') then
				fn:round-half-to-even((((math:pow(($PPEQ div map:get($prev-row-obj,'PPEQ') ), 0.25) )- 1 )* 100 ),2) 
			else 0

		let $_ := (
			 map:put($response-obj, 'ORGANIZATION_NAME', $ORGANIZATION_NAME)
			,map:put($response-obj, 'ORGANIZATION_ID', $OrganisationID)
			,map:put($response-obj, 'REVENUE', if(xs:string($REVENUE) ne '') then fn:round-half-to-even($REVENUE ,0) else 0)
			,map:put($response-obj, 'MARGIN', if(xs:string($MARGIN) ne '') then $MARGIN else 0)
			,map:put($response-obj, 'NUM_EQ_PARTNERS', if(xs:string($NUM_EQ_PARTNERS) ne '') then $NUM_EQ_PARTNERS else 0)
			,map:put($response-obj, 'NUM_NON_EQ_PARTNERS',if(xs:string($NUM_NON_EQ_PARTNERS) ne '') then  $NUM_NON_EQ_PARTNERS else 0)
			,map:put($response-obj, 'PROFIT',if(xs:string($PROFIT) ne '') then  $PROFIT else 0)
			,map:put($response-obj, 'COST',if(xs:string($COST) ne '') then  $COST else 0)
			,map:put($response-obj, 'LEVERAGE',if(xs:string($LEVERAGE) ne '') then  $LEVERAGE else 0)
			,map:put($response-obj, 'RPL',if(xs:string($RPL) ne '') then  $RPL else 0)
			,map:put($response-obj, 'PPL',if(xs:string($PPL) ne '') then  $PPL else 0)
			,map:put($response-obj, 'PPP',if(xs:string($PPP) ne '') then  $PPP else 0)
			,map:put($response-obj, 'CPL',if(xs:string($CPL) ne '') then  $CPL else 0)
			,map:put($response-obj, 'ASSOCIATES',if(xs:string($ASSOCIATES) ne '') then  $ASSOCIATES else 0)
			,map:put($response-obj, 'PPEQ',if(xs:string($PPEQ) ne '') then  $PPEQ else 0)
			,map:put($response-obj, 'REVENUECHANGE', $REVENUECHANGE )
			,map:put($response-obj, 'MARGINCHANGE', $MARGINCHAGNE)
			,map:put($response-obj, 'NUMEQPARTNERSCHANGE', $NUMEQPARTNERSCHAGNE)
			,map:put($response-obj, 'NUMNONEQPARTNERSCHANGE', $NUMNONEQPARTNERSCHANGE)
			,map:put($response-obj, 'PROFITCHANGE', $PROFITCHANGE)
			,map:put($response-obj, 'COSTCHANGE', $COSTCHANGE)
			,map:put($response-obj, 'LEVERAGECHANGE', $LEVERAGECHANGE)
			,map:put($response-obj, 'RPLCHANGE', $RPLCHANGE)
			,map:put($response-obj, 'PPLCHANGE', $PPLCHANGE)
			,map:put($response-obj, 'PPPCHANGE', $PPPCHANGE)
			,map:put($response-obj, 'CPLCHANGE', $CPLCHANGE)
			,map:put($response-obj, 'ASSOCIATESCHANGE', $ASSOCIATESCHANGE)
			,map:put($response-obj, 'PPEQCHANGE', $PPEQCHANGE)
			,map:put($response-obj, 'PUBLISHYEAR', xs:integer($item))
		)

		let $_ := for $key in map:keys($response-obj)
			return map:put($prev-row-obj, $key, map:get($response-obj,$key))

		let $_ := json:array-push($response-arr, $response-obj)
		
		return ()

	return $response-arr
};


declare function firm:GetProfitPerEquityPartnerChangesPostMerger($OrganisationID,$StartYear,$EndYear,$IsDisplayGBP,$Interval)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $data := if($checkMergerData != '') then firm:GetProfitPerEquityPartnerChangesPM($OrganisationID,$StartYear,$EndYear,$IsDisplayGBP,$Interval) 
				else firm:GetProfitPerEquityPartnerChanges($OrganisationID,$StartYear,$EndYear,$IsDisplayGBP,$Interval)
	return $data	
};

declare function firm:GetProfitPerEquityPartnerChanges($OrganisationID,$StartYear,$EndYear,$IsDisplayGBP,$Interval)
{	
	let $all-years := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('ascending'),cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH))
	
	let $isDisplayGBP := if($IsDisplayGBP ne '') then $IsDisplayGBP else 'false'

	let $amlaw200maxYearData := cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganisationID)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($all-years)))
			)))[1]

	let $uk50maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
				cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(fn:max($all-years))),
				cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
			)))[1]		

	let $global100maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
				cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(fn:max($all-years))),
				cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
			)))[1]				

	let $china40maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/'),
				cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(fn:max($all-years))),
				cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
			)))[1]						

	let $maxYearData := if($uk50maxYearData ne '' or $amlaw200maxYearData ne '' or $global100maxYearData ne '' or $china40maxYearData ne '') then 'Y' else ()

	let $UK50DeltaIds := firmnew:getUK50Ids(xs:string(fn:max($all-years)))
	
	let $org := cts:search(/organization,
		cts:and-query((
			 cts:directory-query($config:DD-ORGANIZATION-PATH)
			,cts:element-value-query(xs:QName('organization:ORGANIZATION_ID'),$OrganisationID)
		)))[1]

	let $years := if (fn:not($StartYear) and fn:not($EndYear)) then
			$all-years[last()-4 to last()]
		else helper:GetDatesBetweenTwoDates(xs:integer($StartYear),xs:integer($EndYear)) (:fn:tokenize('2013,2014,2015,2016,2017',','):)
	
	let $yr := for $item in $years
				order by xs:integer($item) descending
				return $item		
	
	let $response-arr := json:array()

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then $years[1 to xs:integer($interval)] else $years[1 to 5]

	let $data := for $PUBLISHYEAR in $yearss

		let $pYear := xs:string((xs:integer($PUBLISHYEAR) - 1))
		let $qYear := xs:string(xs:integer($PUBLISHYEAR))

	(: -------------------------------------------------------------- 01 -------------------------------------------------------------- :)
		let $ORGANIZATION_NAME :=  if ($org/organization:ALM_NAME ne '') then $org/organization:ALM_NAME/text() else $org/organization:ORGANIZATION_NAME/text()

		let $RPL := ''
		let $LAGV := ''
		let $CHANGE := ''

		let $RPL := if(xs:string($isDisplayGBP) ne 'true') then cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganisationID)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),$qYear)
			)))[1]/survey:PPP/text() else()

		let $LAGV := if(xs:string($isDisplayGBP) ne 'true') then cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganisationID)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),$pYear)
			)))[1]/survey:PPP/text() else()

		let $CHANGE := fn:round-half-to-even((((xs:double($RPL) - xs:double($LAGV)) div xs:double($LAGV)) * 100),2)

		let $global100CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($PUBLISHYEAR)),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]//Global_100:PPP/text() else()

		let $global100IDPreYear := if(xs:string($isDisplayGBP) ne 'true') then sum(cts:search(/,
					cts:and-query((
						cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
						cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($PUBLISHYEAR) - 1)),
						cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
						)))//Global_100:PPP/text()) else()

		let $global100Change := if($global100IDPreYear ne 0) then (($global100CurrentYear - $global100IDPreYear) div $global100IDPreYear) * 100 else 0

		let $china40CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($PUBLISHYEAR)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1] else ()

		let $china40IDPreYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
					cts:and-query((
						cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
						cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(xs:integer($PUBLISHYEAR) - 1)),
						cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
						)))[1] else ()


		
		let $uk50IDCurrentYear := if(xs:string($isDisplayGBP) eq 'true') then cts:search(/,
																					cts:and-query((
																						cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																						cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($PUBLISHYEAR)),
																						cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
																						)))[1]//UK_50:PPP_POUND_K/text()
								   else cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($PUBLISHYEAR)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]//UK_50:PPP_DOLLAR/text()
								    
		let $uk50IDPreYear := if(xs:string($isDisplayGBP) eq 'true') then cts:search(/,
																			cts:and-query((
																				cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																				cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($PUBLISHYEAR) - 1)),
																				cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
																				)))[1]//UK_50:PPP_POUND_K/text()
							  else cts:search(/,
										cts:and-query((
											cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
											cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($PUBLISHYEAR) - 1)),
											cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
											)))[1]//UK_50:PPP_DOLLAR/text()													

		let $grossRev := if($RPL ne 0) then $RPL else
						  if($global100CurrentYear ne 0) then $global100CurrentYear
						  else if($uk50IDCurrentYear) then $uk50IDCurrentYear
						  else $china40CurrentYear//CHINA_40:PROFITS_PER_PARTNER/text()
		
		let $grossRevPreviousYear := if($LAGV ne 0) then $LAGV else
						  if($global100IDPreYear ne 0) then $global100IDPreYear
						  else if($uk50IDPreYear) then $uk50IDPreYear	
						  else $china40IDPreYear//CHINA_40:PROFITS_PER_PARTNER/text()				

		
	    let $isAddMaxYear := if(xs:string($PUBLISHYEAR) ne xs:string(max($all-years))) then 
								'y' else
							if($RPL ne 0 or $global100CurrentYear ne 0 or $uk50IDCurrentYear ne 0 or $china40CurrentYear ne '') then 'y' else 'n'

		let $ppp := if(fn:not(xs:string($RPL) ne '') and fn:not($global100CurrentYear ne '') and fn:not($uk50IDCurrentYear ne '') and fn:not($china40CurrentYear ne '')) then -1000
					else if($grossRevPreviousYear ne 0 and $grossRev ne 0) then (($grossRev - $grossRevPreviousYear) div $grossRevPreviousYear) * 100 else 0

		let $response-obj := json:object()
		let $_ := (
			map:put($response-obj, 'ORGANIZATION_ID', $OrganisationID),
			map:put($response-obj, 'ORGANIZATION_NAME', $ORGANIZATION_NAME),
			map:put($response-obj, 'CHANGE', fn:round-half-to-even($ppp,2)),
			map:put($response-obj, 'PUBLISHYEAR', $PUBLISHYEAR)
		)
		let $_ :=if(xs:string($PUBLISHYEAR) ne xs:string(max($all-years)) and $isAddMaxYear ne 'n') then json:array-push($response-arr,$response-obj) else
					if($maxYearData ne '' and $isAddMaxYear ne 'n') then json:array-push($response-arr,$response-obj) else()

	(: -------------------------------------------------------------- 02 Golobal_100Part -------------------------------------------------------------- :)
		
	let $RPL := ''
	let $LAGV := ''
	let $CHANGE := ''
		
	let $response-obj := json:object()
  
	let $distinctid_global_100_Current  := cts:element-values(xs:QName("Global_100:ORGANIZATION_ID"),(),(),
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/")      
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"),xs:string($qYear))
	  ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
    )))
  
   let $res4 := xs:decimal(avg(cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/") 
      ,cts:element-value-query(xs:QName("Global_100:ORGANIZATION_ID"),($distinctid_global_100_Current ! xs:string(.)))
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"), xs:string($qYear))
	  ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
    )))//Global_100:PPP/text()))
 
   let $distinctid_global_100  := cts:element-values(xs:QName("Global_100:ORGANIZATION_ID"),(),(),
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/")      
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"),xs:string($pYear))
	  ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
    )))
  
   let $lag4 := xs:integer(avg(cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/") 
      ,cts:element-value-query(xs:QName("Global_100:ORGANIZATION_ID"),($distinctid_global_100 ! xs:string(.)))
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"), xs:string($pYear))
	  ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
    )))//Global_100:PPP/text()))
    
   let $CHANGE :=if(fn:not(count($distinctid_global_100_Current) ne 0) or fn:not(count($distinctid_global_100) ne 0) or $ppp eq -1000) then -1000 
   				 else if($res4 ne 0 and $lag4 ne 0) then fn:round-half-to-even((xs:double($res4 - $lag4) div  $lag4 ) * 100 , 2) else 0

   let $response-obj := json:object()
	 let $_ := (
			map:put($response-obj, 'ORGANIZATION_ID', 0),
			map:put($response-obj, 'ORGANIZATION_NAME', 'Global 200'),
			map:put($response-obj, 'CHANGE', $CHANGE),
			map:put($response-obj, 'PUBLISHYEAR', xs:integer($PUBLISHYEAR))
		)
		let $_ := if($isAddMaxYear ne 'n' and xs:string($isDisplayGBP) ne 'true') then json:array-push($response-arr,$response-obj) else()		
	(: -------------------------------------------------------------- UK_50 Part -------------------------------------------------------------- :)
	(:let $RES := if($OrganisationID = $UK50DeltaIds) then 
	let $RPL := ''
	let $LAGV := ''
	let $CHANGE := ''
		
	let $response-obj := json:object()
  
	let $distinctid_global_100  := cts:element-values(xs:QName("UK_50:ORGANIZATION_ID"),(),(),
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")      
      ,cts:element-value-query(xs:QName("UK_50:PUBLISHYEAR"),xs:string($qYear))
    )))
  
	let $res4 := xs:decimal(avg(cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/") 
      ,cts:element-value-query(xs:QName("UK_50:ORGANIZATION_ID"),($distinctid_global_100 ! xs:string(.)))
      ,cts:element-value-query(xs:QName("UK_50:PUBLISHYEAR"), xs:string($qYear))
    )))//UK_50:PPP_DOLLAR/text()))
 
	let $distinctid_global_100  := cts:element-values(xs:QName("UK_50:ORGANIZATION_ID"),(),(),
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")      
      ,cts:element-value-query(xs:QName("UK_50:PUBLISHYEAR"),xs:string($pYear))
      
    )))
  
	let $lag4 := xs:integer(avg(cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/") 
      ,cts:element-value-query(xs:QName("UK_50:ORGANIZATION_ID"),($distinctid_global_100 ! xs:string(.)))
      ,cts:element-value-query(xs:QName("UK_50:PUBLISHYEAR"), xs:string($pYear))
    )))//UK_50:PPP_DOLLAR/text()))
    
	let $CHANGE := fn:round-half-to-even((xs:double($res4 - $lag4) div $lag4 ) * 100 , 2)   
	let $response-obj := json:object()
	let $_ := (
			map:put($response-obj, 'ORGANIZATION_ID', 0),
			map:put($response-obj, 'ORGANIZATION_NAME', 'UK 100'),
			map:put($response-obj, 'CHANGE', $CHANGE),
			map:put($response-obj, 'PUBLISHYEAR', $PUBLISHYEAR),
      map:put($response-obj, xs:string($qYear), $res4),
      map:put($response-obj, xs:string($pYear), $lag4)
		)
	let $_ := json:array-push($response-arr,$response-obj)		
	return ()
	
	else ():)
        
	(: -------------------------------------------------------------- 03 -------------------------------------------------------------- :)
		
	(: let $distinctid_lt_100_Current  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
	cts:and-query((
	cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
	,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '<=',100)
	,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($qYear))
	,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
	))) :)

  let $res2 := xs:decimal(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($qYear))
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
		)))//AMLAW_200:PPP/text()))
	let $response-obj := json:object()
		
	(: let $distinctid_global_100  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '<=',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($pYear))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		))) :)
		
	let $res2-LAG := xs:decimal(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($pYear))
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
		)))//AMLAW_200:PPP/text()))
		
	let $CHANGE := if( $ppp eq -1000) then -1000
				   else if($res2 ne 0 and $res2-LAG ne 0) then fn:round-half-to-even((xs:double($res2 - $res2-LAG) div  $res2-LAG ) * 100 , 2) else 0
	
	let $_ := (
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'Am Law 100'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($qYear))
		)
	let $_ := if($isAddMaxYear ne 'n' and xs:string($isDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else()

	(: -------------------------------------------------------------- 04 -------------------------------------------------------------- :)

  (: let $distinctid_gt_100_Current  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
	cts:and-query((
	cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
	,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '>',100)
	,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($qYear))
	,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
	))) :)

  let $res3 := xs:decimal(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($qYear))
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
		)))//AMLAW_200:PPP/text()))
	let $response-obj := json:object()
		
	(: let $distinctid_gt_100  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($pYear))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		))) :)
		
	let $res3-LAG := xs:decimal(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($pYear))
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
		)))//AMLAW_200:PPP/text()))
		
	let $CHANGE :=if($ppp eq -1000) then -1000
				  else if($res3 ne 0 and $res3-LAG ne 0) then fn:round-half-to-even((xs:double($res3 - $res3-LAG) div  $res3-LAG ) * 100 , 2) else 0
	
	let $_ := (
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'Am Law 2nd Hundred'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($qYear))
		)
	let $_ := if($isAddMaxYear ne 'n' and xs:string($isDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else()

	(:------------------------UK50------------------------:)
		
	let $response-obj := json:object()
	
	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")(:,
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($PUBLISHYEAR)):),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
							)))[1]//UK_50:ORGANIZATION_ID/text()

	let $distinctid_gt_100_Cur := fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($PUBLISHYEAR))
							)))//UK_50:ORGANIZATION_ID/text())

	
		let $res3 :=if(xs:string($isDisplayGBP) ne 'true') then  avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100_Cur ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($PUBLISHYEAR))
							)))//UK_50:PPP_DOLLAR/text())
					else 
					avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100_Cur ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($PUBLISHYEAR))
							)))//UK_50:PPP_POUND_K/text())		
		
		let $distinctid_gt_100  :=fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($PUBLISHYEAR) - 1))
							)))//UK_50:ORGANIZATION_ID/text())
		
		let $res3-LAG :=if(xs:string($isDisplayGBP) ne 'true') then avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($PUBLISHYEAR) -1))
							)))//UK_50:PPP_DOLLAR/text())
						else
						avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($PUBLISHYEAR) -1))
							)))//UK_50:PPP_POUND_K/text())	
		
		let $difference := $res3 - $res3-LAG

		let $CHANGE :=if(fn:not(count($distinctid_gt_100_Cur) ne 0) or fn:not(count($distinctid_gt_100) ne 0) or $ppp eq -1000) then -1000
					  else if($res3 ne 0 and $res3-LAG ne 0) then fn:round-half-to-even((xs:double($difference) div  $res3-LAG ) * 100 , 2) else 0
		
		let $_ :=(
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'UK 100'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($PUBLISHYEAR))
		)
		let $_ :=if($uk50ID ne '' and max($all-years) ne xs:integer($PUBLISHYEAR)  and $isAddMaxYear ne 'n') then json:array-push($response-arr, $response-obj)
					else if($uk50ID ne '' and $isAddMaxYear ne 'n') then json:array-push($response-arr, $response-obj)
				 else()	
  
  return ()
	return $response-arr
};

declare function firm:GetProfitPerEquityPartnerChangesPM($OrganizationID,$StartYear,$EndYear,$IsDisplayGBP,$Interval)
{	
	let $checkMergerData :=  firmnew:GetMergedFirmData($OrganizationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganizationID),',') else $OrganizationID

	let $all-years := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('ascending'),cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH))
	
	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")(:,
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($PUBLISHYEAR)):),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$checkMergerData//FirmData//FirmID)
							)))//UK_50:ORGANIZATION_ID/text()
	
	let $isDisplayGBP := if($IsDisplayGBP ne '') then $IsDisplayGBP else 'false'

	let $UK50DeltaIds := firmnew:getUK50Ids(xs:string(fn:max($all-years)))
	
	
	let $years := if (fn:not($StartYear) and fn:not($EndYear)) then
			$all-years[last()-4 to last()]
		else helper:GetDatesBetweenTwoDates(xs:integer($StartYear),xs:integer($EndYear)) (:fn:tokenize('2013,2014,2015,2016,2017',','):)
	
	let $yr := for $item in $years
				order by xs:integer($item) descending
				return $item		
	
	let $response-arr := json:array()

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then $years[1 to xs:integer($interval)] else $years[1 to 5]

	let $data := for $PUBLISHYEAR in $yearss

		let $pYear := xs:string((xs:integer($PUBLISHYEAR) - 1))
		let $qYear := xs:string(xs:integer($PUBLISHYEAR))

	(: -------------------------------------------------------------- 01 -------------------------------------------------------------- :)
		let $loopData := for $item in $checkMergerData//FirmData
							let $OrganisationID := $item//FirmID/text()
							let $ORGANIZATION_NAME := $item//FirmName/text()
							let $org := cts:search(/organization,
										cts:and-query((
											cts:directory-query($config:DD-ORGANIZATION-PATH)
											,cts:element-value-query(xs:QName('organization:ORGANIZATION_ID'),$OrganisationID)
										)))[1]

							(: let $ORGANIZATION_NAME :=  if ($org/organization:ALM_NAME ne '') then $org/organization:ALM_NAME/text() else $org/organization:ORGANIZATION_NAME/text() :)

							let $RPL := ''
							let $LAGV := ''
							let $CHANGE := ''

							let $RPL := if(xs:string($isDisplayGBP) ne 'true') then cts:search(//survey:YEAR,
								cts:and-query((
									cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
									,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganisationID)
									,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),$qYear)
								)))[1]/survey:PPP/text() else()

							let $LAGV := if(xs:string($isDisplayGBP) ne 'true') then cts:search(//survey:YEAR,
								cts:and-query((
									cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
									,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganisationID)
									,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),$pYear)
								)))[1]/survey:PPP/text() else()

							let $CHANGE := fn:round-half-to-even((((xs:double($RPL) - xs:double($LAGV)) div xs:double($LAGV)) * 100),2)

							let $global100CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																		cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($PUBLISHYEAR)),
																		cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
																		)))[1]//Global_100:PPP/text() else()

							let $global100IDPreYear := if(xs:string($isDisplayGBP) ne 'true') then sum(cts:search(/,
										cts:and-query((
											cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
											cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($PUBLISHYEAR) - 1)),
											cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
											)))//Global_100:PPP/text()) else()

							let $global100Change := if($global100IDPreYear ne 0) then (($global100CurrentYear - $global100IDPreYear) div $global100IDPreYear) * 100 else 0

							let $china40CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($PUBLISHYEAR)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1] else ()

							let $china40IDPreYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
										cts:and-query((
											cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
											cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(xs:integer($PUBLISHYEAR) - 1)),
											cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
											)))[1] else ()

							
							let $uk50IDCurrentYear := if(xs:string($isDisplayGBP) eq 'true') then cts:search(/,
																										cts:and-query((
																											cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																											cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($PUBLISHYEAR)),
																											cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
																											)))[1]//UK_50:PPP_POUND_K/text()
													else cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																		cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($PUBLISHYEAR)),
																		cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
																		)))[1]//UK_50:PPP_DOLLAR/text()
														
							let $uk50IDPreYear := if(xs:string($isDisplayGBP) eq 'true') then cts:search(/,
																								cts:and-query((
																									cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																									cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($PUBLISHYEAR) - 1)),
																									cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
																									)))[1]//UK_50:PPP_POUND_K/text()
												else cts:search(/,
															cts:and-query((
																cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($PUBLISHYEAR) - 1)),
																cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
																)))[1]//UK_50:PPP_DOLLAR/text()													

							let $grossRev := if($RPL ne 0) then $RPL else
											if($global100CurrentYear ne 0) then $global100CurrentYear
											else if($uk50IDCurrentYear) then $uk50IDCurrentYear
											else $china40CurrentYear//CHINA_40:PROFITS_PER_PARTNER/text()
							
							let $grossRevPreviousYear := if($LAGV ne 0) then $LAGV else
											if($global100IDPreYear ne 0) then $global100IDPreYear
											else if($uk50IDPreYear) then $uk50IDPreYear					
											else $china40IDPreYear//CHINA_40:PROFITS_PER_PARTNER/text()

							
							(: let $isAddMaxYear := if(xs:string($PUBLISHYEAR) ne xs:string(max($all-years))) then 
													if($RPL ne '' or $global100CurrentYear ne '' or $uk50IDCurrentYear ne '') then 'y' else 'n' else
												if($RPL ne 0 or $global100CurrentYear ne 0 or $uk50IDCurrentYear ne 0) then 'y' else 'n' :)

							let $ppp := if(fn:not(xs:string($RPL) ne '') and fn:not($global100CurrentYear ne '') and fn:not($uk50IDCurrentYear ne '') and fn:not($china40CurrentYear ne '')) then -1000
										else if($grossRevPreviousYear ne 0 and $grossRev ne 0) then (($grossRev - $grossRevPreviousYear) div $grossRevPreviousYear) * 100 else 0

							let $response-obj := json:object()
							let $_ := (
								map:put($response-obj, 'ORGANIZATION_ID', $OrganisationID),
								map:put($response-obj, 'ORGANIZATION_NAME', $ORGANIZATION_NAME),
								map:put($response-obj, 'CHANGE', fn:round-half-to-even($ppp,2)),
								map:put($response-obj, 'PUBLISHYEAR', $PUBLISHYEAR)
							)
							let $_ := json:array-push($response-arr,$response-obj)

							return()			

	(: -------------------------------------------------------------- 02 Golobal_100Part -------------------------------------------------------------- :)
		
	let $RPL := ''
	let $LAGV := ''
	let $CHANGE := ''
		
	let $response-obj := json:object()
  
	let $distinctid_global_100_Current  := cts:element-values(xs:QName("Global_100:ORGANIZATION_ID"),(),(),
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/")      
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"),xs:string($qYear))
      ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
    )))
  
   let $res4 := xs:decimal(avg(cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/") 
      ,cts:element-value-query(xs:QName("Global_100:ORGANIZATION_ID"),($distinctid_global_100_Current ! xs:string(.)))
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"), xs:string($qYear))
    )))//Global_100:PPP/text()))
 
   let $distinctid_global_100  := cts:element-values(xs:QName("Global_100:ORGANIZATION_ID"),(),(),
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/")      
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"),xs:string($pYear))
      ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
    )))
  
   let $lag4 := xs:integer(avg(cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/") 
      ,cts:element-value-query(xs:QName("Global_100:ORGANIZATION_ID"),($distinctid_global_100 ! xs:string(.)))
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"), xs:string($pYear))
    )))//Global_100:PPP/text()))
    
   let $CHANGE :=if(fn:not(count($distinctid_global_100_Current) ne 0) or fn:not(count($distinctid_global_100) ne 0)) then -1000 
   				 else if($res4 ne 0 and $lag4 ne 0) then fn:round-half-to-even((xs:double($res4 - $lag4) div  $lag4 ) * 100 , 2) else 0

   let $response-obj := json:object()
	 let $_ := (
			map:put($response-obj, 'ORGANIZATION_ID', 0),
			map:put($response-obj, 'ORGANIZATION_NAME', 'Global 200'),
			map:put($response-obj, 'CHANGE', $CHANGE),
			map:put($response-obj, 'PUBLISHYEAR', xs:integer($PUBLISHYEAR))
		)
		let $_ := if(xs:string($isDisplayGBP) ne 'true') then json:array-push($response-arr,$response-obj) else()		
	(: -------------------------------------------------------------- UK_50 Part -------------------------------------------------------------- :)
	(:let $RES := if($OrganisationID = $UK50DeltaIds) then 
	let $RPL := ''
	let $LAGV := ''
	let $CHANGE := ''
		
	let $response-obj := json:object()
  
	let $distinctid_global_100  := cts:element-values(xs:QName("UK_50:ORGANIZATION_ID"),(),(),
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")      
      ,cts:element-value-query(xs:QName("UK_50:PUBLISHYEAR"),xs:string($qYear))
    )))
  
	let $res4 := xs:decimal(avg(cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/") 
      ,cts:element-value-query(xs:QName("UK_50:ORGANIZATION_ID"),($distinctid_global_100 ! xs:string(.)))
      ,cts:element-value-query(xs:QName("UK_50:PUBLISHYEAR"), xs:string($qYear))
    )))//UK_50:PPP_DOLLAR/text()))
 
	let $distinctid_global_100  := cts:element-values(xs:QName("UK_50:ORGANIZATION_ID"),(),(),
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")      
      ,cts:element-value-query(xs:QName("UK_50:PUBLISHYEAR"),xs:string($pYear))
      
    )))
  
	let $lag4 := xs:integer(avg(cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/") 
      ,cts:element-value-query(xs:QName("UK_50:ORGANIZATION_ID"),($distinctid_global_100 ! xs:string(.)))
      ,cts:element-value-query(xs:QName("UK_50:PUBLISHYEAR"), xs:string($pYear))
    )))//UK_50:PPP_DOLLAR/text()))
    
	let $CHANGE := fn:round-half-to-even((xs:double($res4 - $lag4) div $lag4 ) * 100 , 2)   
	let $response-obj := json:object()
	let $_ := (
			map:put($response-obj, 'ORGANIZATION_ID', 0),
			map:put($response-obj, 'ORGANIZATION_NAME', 'UK 100'),
			map:put($response-obj, 'CHANGE', $CHANGE),
			map:put($response-obj, 'PUBLISHYEAR', $PUBLISHYEAR),
      map:put($response-obj, xs:string($qYear), $res4),
      map:put($response-obj, xs:string($pYear), $lag4)
		)
	let $_ := json:array-push($response-arr,$response-obj)		
	return ()
	
	else ():)
        
	

	(:------------------------UK50------------------------:)
		
	let $response-obj := json:object()
	
	

	let $distinctid_gt_100_Cur := fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($PUBLISHYEAR))
							)))//UK_50:ORGANIZATION_ID/text())

	
		let $res3 := avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100_Cur ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($PUBLISHYEAR))
							)))//UK_50:PPP_DOLLAR/text())
		
		let $distinctid_gt_100  :=fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($PUBLISHYEAR) - 1))
							)))//UK_50:ORGANIZATION_ID/text())
		
		let $res3-LAG := avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($PUBLISHYEAR) -1))
							)))//UK_50:PPP_DOLLAR/text())
		
		let $difference := $res3 - $res3-LAG

		let $CHANGE :=if(fn:not(count($distinctid_gt_100_Cur) ne 0) or fn:not(count($distinctid_gt_100) ne 0)) then -1000
					  else if($res3 ne 0 and $res3-LAG ne 0) then fn:round-half-to-even((xs:double($difference) div  $res3-LAG ) * 100 , 2) else 0
		
		let $_ :=(
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'UK 100'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($PUBLISHYEAR))
		)
		let $_ :=if($uk50ID != '') then json:array-push($response-arr, $response-obj)
				 else()	
  
  return ()
	return $response-arr
};

declare function firm:GetLawfirmAvailableData(
	 $callType
	,$firmID
	,$type
)
{
	let $firmId := if($type) then firm:GetREIdByOrgId($firmID) else $firmID
	let $RE_ID := firm:GetREIdByOrgId($firmID)

	let $response-obj := json:object()

	let $_ := (
		map:put($response-obj, 'HasNews', 'false'),
		map:put($response-obj, 'HasClinets', 'false'),
		map:put($response-obj, 'HasContacts', 'false'),
		map:put($response-obj, 'HasFinancials', 'false'),
		map:put($response-obj, 'HasHeadcount', 'false'),
		map:put($response-obj, 'HasOverview', 'false'),
		map:put($response-obj, 'HasLocation', 'false'),
		map:put($response-obj, 'HasPractice', 'false'),
		map:put($response-obj, 'HasIndustries', 'false'),
		map:put($response-obj, 'HasResearch', 'false'),
		map:put($response-obj, 'HasStaffing', 'false'),
		map:put($response-obj, 'HasLateralPartner', 'false')
	)

	let $_ := if($callType = '') then
		let $org := cts:search(/organization,
			cts:and-query((
				cts:directory-query($config:DD-ORGANIZATION-PATH),
				cts:element-value-query(xs:QName('organization:ORGANIZATION_ID'),$firmID)
			)))[1]

		let $firmName := if ($org/organization:ALM_NAME ne '') then $org/organization:ALM_NAME/text() else $org/organization:ORGANIZATION_NAME/text()
		let $fromDate := fn:format-date(xs:date(xdmp:parse-dateTime('[Y0001]-[M01]-[D01]',xs:string(fn:current-date() - xs:yearMonthDuration('P5Y')))),'[Y0001]-[M01]-[D01]')
		let $toDate := fn:format-date(xs:date(xdmp:parse-dateTime('[Y0001]-[M01]-[D01]',xs:string(xs:date(fn:current-date())))),'[Y0001]-[M01]-[D01]')

		let $ProfileNewsCount := firm:GeLawFirmProfileNewsData($RE_ID,$fromDate,$toDate)
		let $IsNewsExist := firm:IsNewsExists($RE_ID)
		let $_ := if (($ProfileNewsCount) gt 0 or xs:integer($IsNewsExist) gt 0) then map:put($response-obj, 'HasNews', 'true') else ()

		let $LocationCount := firm:GetRELawFirmLocationCountPostMerger($firmID)
		let $_ := if (($LocationCount)>0) then map:put($response-obj, 'HasLocation', 'true') else ()

		let $PracticeareaCount := firm:GetRELawFirmPracticeareaCount($firmID)
		let $_ := if (($PracticeareaCount)>0) then map:put($response-obj, 'HasPractice', 'true') else ()

		let $ClientsNewCount := firm:GetClientsNewCount($firmID,$fromDate,$toDate)
		let $_ := if(fn:not(firmnew:GetClientMaxYear($firmID))) then map:put($response-obj, 'HasClinets', 'false')
				  else if (($ClientsNewCount)>0) then map:put($response-obj, 'HasClinets', 'true') else ()

		let $ProfileContactsCount := fn:count(xdmp:unquote(fn:string(firm:GetLawfirmProfileContacts($firmID,'',(),'','')))//ORGANIZATION_ID)
		let $ContactsAddedCount := firm:GetLawfirmContactsAddedCount($RE_ID)

		let $_ := if (($ProfileContactsCount)>0) then 
				map:put($response-obj, 'HasContacts', 'true') 
			else (
				let $ContactsAddedCount := firm:GetLawfirmContactsAddedCount($RE_ID)
				let $_ := if ($ContactsAddedCount>0) then map:put($response-obj, 'HasContacts', 'true') else ()
				return ()
			)

		let $_ := if ($ProfileNewsCount > 0) then
			map:put($response-obj, 'HasOverview', 'true')
		else (
			let $ProfileRankings := fn:count(xdmp:unquote(fn:string(firm:GetLawfirmProfileRankings($firmID)))//FirmId)
			return if($ProfileRankings > 0) then 
					map:put($response-obj, 'HasOverview', 'true')
				else (
					let $RevenueHeadCount := fn:count(xdmp:unquote(fn:string(firm:GetLawfirmRevenueHeadCountChart($firmID,'')))//ORGANIZATION_ID)
						return if($RevenueHeadCount > 0) then 
								map:put($response-obj, 'HasOverview', 'true')
							else (
								let $org := cts:search(/organization,
									cts:and-query((
										cts:directory-query($config:DD-ORGANIZATION-PATH),
										cts:element-value-query(xs:QName('organization:ORGANIZATION_ID'),$firmID)
									)))[1]
								return if($org) then map:put($response-obj, 'HasOverview', 'true') else ()
							)
				)
		)

		let $RevenueByYearCount := json:array-size(firm:GetRevenueByYearPostMergerCount($firmID,'',''))
		let $_ := if (($RevenueByYearCount)>0) then map:put($response-obj, 'HasFinancials', 'true') else ()

		let $HeadCount := fn:count(xdmp:unquote(fn:string(firm:GetTotalHeadCount($firmID,0,0,'')))//Organization_Id)
		let $_ := if (($RevenueByYearCount)>0) then map:put($response-obj, 'HasStaffing', 'true') else ()

		let $LawfirmReportCount := fn:count(firm:GetLawfirmReports($firmID))
		let $_ := if (($RevenueByYearCount)>0) then map:put($response-obj, 'HasResearch', 'true') else ()

		let $IndustryCountbyId := fn:count(xdmp:unquote(fn:string(firm:GetTotalIndustrybyIdCount($firmID)))//Industry)
		let $_ := if (($IndustryCountbyId)>0) then map:put($response-obj, 'HasIndustries', 'true') else ()

		let $LateralPartnerChangesCount := fn:count(xdmp:unquote(fn:string(firm:GetLateralPartnerChangesPostMerger($firmID,'','')))//company_id)
		let $_ := if (($LateralPartnerChangesCount)>0) then map:put($response-obj, 'HasLateralPartner', 'true') else ()

		return ()

	else ()

	return $response-obj
};

declare function firm:GetLawfirmProfileContacts(
	 $firmID
	,$position
	,$FirmLocation 
	,$SortBy
	,$SortDirection
)
{
	let $firmIds := fn:tokenize($firmID,',')
	let $sortDirection := if($SortDirection eq 'ASC') then 'ascending' else 'descending'
	let $CONTACT_TYPE_Q := if ($position ne '') then
			let $positions := fn:tokenize($position,',')
			return cts:element-value-query(xs:QName('organization-contact:CONTACT_TYPE'),$positions,('case-insensitive'))
		else ()
	
	(: Filter By FirmLocation :)
	let $ADDRESS_IDs := if ($FirmLocation != '') then
			firm-comp:GetOrganizationIDByAddress($FirmLocation)
		else ()
	

	let $conditions := (
		 cts:directory-query($config:RD-ORGANIZATION_CONTACT-PATH)
		,cts:element-value-query(xs:QName('organization-contact:ORGANIZATION_ID'), $firmIds)
		,if ($ADDRESS_IDs) then cts:element-value-query(xs:QName('organization-contact:ORGANIZATION_ADDRESS_ID'), ($ADDRESS_IDs ! xs:string(.))) else ()
		,$CONTACT_TYPE_Q
	)
	
	let $order-by-q := if ($SortBy eq 'Name') then cts:index-order(cts:element-reference(xs:QName('organization-contact:CONTACT_NAME')) ,$sortDirection)
					   else if ($SortBy eq 'Position') then cts:index-order(cts:element-reference(xs:QName('organization-contact:CONTACT_TYPE')) ,$sortDirection)
					   else if ($SortBy eq 'Title') then cts:index-order(cts:element-reference(xs:QName('organization-contact:CONTACT_TITLE')) ,$sortDirection)
					   (: else if ($SortBy eq 'Location') then cts:index-order(cts:element-reference(xs:QName('organization-contact:CITY')) ,$sortDirection) :)
					   else cts:index-order(cts:element-reference(xs:QName('organization-contact:CONTACT_NAME')) ,'ascending')
	
	let $search := cts:search(/organization-contact, cts:and-query(($conditions)), $order-by-q)
	
	let $response := for $contact in $search

		let $ORGANIZATION_ID := fn:normalize-space($contact/organization-contact:ORGANIZATION_ID/text())
		let $CONTACT_NAME := fn:normalize-space($contact/organization-contact:CONTACT_NAME/text())
		let $CONTACT_TYPE := fn:normalize-space($contact/organization-contact:CONTACT_TYPE/text())
		let $CONTACT_TITLE := fn:normalize-space($contact/organization-contact:CONTACT_TITLE/text())
		let $CONTACT_MAIN_PHONE := fn:normalize-space($contact/organization-contact:CONTACT_MAIN_PHONE/text())
		let $CONTACT_EMAIL := fn:normalize-space($contact/organization-contact:CONTACT_EMAIL/text())
		let $CONTACT_FAX := fn:normalize-space($contact/organization-contact:CONTACT_FAX/text())
		let $FIRST_NAME := fn:normalize-space($contact/organization-contact:FIRST_NAME/text())
		let $MIDDLE_NAME := fn:normalize-space($contact/organization-contact:MIDDLE_NAME/text())
		let $LAST_NAME := fn:normalize-space($contact/organization-contact:LAST_NAME/text())
		let $ADDRESS_ID := fn:normalize-space($contact/organization-contact:ORGANIZATION_ADDRESS_ID/text())

		let $add := cts:search(/organization-address,
			cts:and-query((
				 cts:directory-query($config:RD-ORGANIZATION-ADDRESS-PATH)
				,cts:element-value-query(xs:QName('org-address:ORGANIZATION_ID'),$ORGANIZATION_ID)
				,cts:element-value-query(xs:QName('org-address:ADDRESS_ID'),$ADDRESS_ID)
			)))[1]

		return (:if ($add) then    :)

			let $LOCATION := if ($add/org-address:STATE ne '') then (
					if ($add/org-address:CITY) then (
						fn:concat($add/org-address:CITY/text(), fn:concat(', ', $add/org-address:STATE/text()))
					)
					else ()
				)
				else (
					if ($add/org-address:CITY) then (
						fn:concat($add/org-address:CITY/text(), fn:concat(', ', $add/org-address:COUNTRY/text()))
					)
					else ()
				)

			let $order-by := if (fn:upper-case($SortBy) = fn:upper-case('Name')) then
					$CONTACT_NAME
				else if (fn:upper-case($SortBy) = fn:upper-case('Position')) then
					$CONTACT_TYPE
				else if (fn:upper-case($SortBy) = fn:upper-case('Title')) then
					$CONTACT_TITLE
				else if (fn:upper-case($SortBy) = fn:upper-case('Location')) then
					$LOCATION
				else ()

			let $direction := if (fn:upper-case($SortDirection) = 'DESC') then 'descending' else 'ascending'

			 order by
				if ($direction ne 'descending') then () else $order-by descending,
				if ($direction ne 'ascending') then () else $order-by ascending 

			return element {'RECORD'} {
				 element {'FirmId'} {$ORGANIZATION_ID}
				,element {'Name'} {$CONTACT_NAME}
				,element {'TitleType'} {$CONTACT_TYPE}
				,element {'Title'} {$CONTACT_TITLE}
				,element {'Phone'} {$CONTACT_MAIN_PHONE}
				,element {'Email'} {$CONTACT_EMAIL}
				,element {'CONTACT_FAX'} {$CONTACT_FAX}
				,element {'FIRST_NAME'} {$FIRST_NAME}
				,element {'MIDDLE_NAME'} {$MIDDLE_NAME}
				,element {'LAST_NAME'} {$LAST_NAME}
				,element {'ADDRESS_ID'} {$ADDRESS_ID}
				,element {'LOCATION'} {$LOCATION}
			}

	let $count := fn:count($response)
	
	 let $response1 := element {'RESULT'} {$response}

	let $response2 := for $item in $response1//RECORD
							order by if ($sortDirection ne 'descending') then () else $item//LOCATION/text() descending,if ($sortDirection ne 'ascending') then () else $item//LOCATION/text() ascending
							return $item 


	let $response :=  if (fn:upper-case($SortBy) eq fn:upper-case('Location')) then element {'RESULT'}{$response2} else $response1
	
	let $custom :=
		let $config := json:config('custom')
		let $_ := map:put( $config, 'whitespace', 'ignore' )
		let $_ := map:put( $config, 'array-element-names', ('RECORD') )
		return $config
	
	let $response := if ($count > 1) then 
			xdmp:to-json-string(json:transform-to-json($response, $custom)//RECORD) 
		else json:to-array(json:transform-to-json($response, $custom)//RECORD)

	return $response
};

declare function firm:GetLawfirmContactsAddedCount($firmID)
{
  fn:count(cts:search(/person,
    cts:and-query((
      cts:directory-query($config:RD-PEOPLE_CHANGES-PATH),
      cts:element-value-query(xs:QName('people_changes:action'),('added','removed','updated')),
      cts:element-value-query(xs:QName('people_changes:company'),$firmID)
    ))))
};

declare function firm:GetLateralPartnerChangesPostMerger($firmID, $title,$Interval)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($firmID)

	let $data := if($checkMergerData != '') then firm:GetLateralPartnerChangesPM($firmID, $title,$Interval) else firm:GetLateralPartnerChanges($firmID, $title,$Interval)

	return $data
};

declare function firm:GetLateralPartnerChanges($firmID, $title,$Interval)
{
	let $RE_ID := firm:GetREIdByOrgId($firmID)
	let $interval := if(xs:string($Interval) ne '') then $Interval else 4

	let $fromYear := fn:concat('P',$interval,'Y')
	let $sYear := fn:format-date(xs:date(xdmp:parse-dateTime('[Y01]-[M01]-[D01]',xs:string(fn:current-date() - xs:yearMonthDuration($fromYear)))),'[Y0001]')
	let $eYear := fn:format-date(xs:date(xdmp:parse-dateTime('[Y01]-[M01]-[D01]',xs:string(fn:current-date()))),'[Y0001]')
	
	let $years := helper:GetDatesBetweenTwoDates(xs:integer($sYear),xs:integer($eYear))
	
	let $company := fn:doc(fn:concat($config:RD-COMPANY-PATH,$RE_ID,'.xml'))/company/company:company/text()

	let $response-arr := json:array()

	let $title_query := if ($title) then
			cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:Title'),$title,())
		else ()

	let $_ := for $year in $years
		let $sDate := fn:concat($year,'-01','-01')
		let $eDate := fn:concat($year,'-12','-31')

		let $changes := cts:search(/ALI_RE_LateralMoves_Data,
			cts:and-query((
				 cts:directory-query($config:RD-ALI_RE_LATERALMOVES_DATA-PATH,'infinity')
				,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:company_Id'), $RE_ID)
				,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), ('0000-00-00','0/0/0000'),('wildcarded')))
				,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), ''))
				,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:action'), ''))
				,cts:element-range-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), '>=', xs:date($sDate))
				,cts:element-range-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), '<=', xs:date($eDate))
				(:,cts:element-query(xs:QName('people_changes:std_title'),cts:and-query(())):)
				,$title_query
			)))

		let $response-obj := json:object()
		let $headCountPlus := fn:count($changes/ALI_RE_LateralMoves_Data:action[. = 'added'])
		let $headCountMinus := fn:count($changes/ALI_RE_LateralMoves_Data:action[. = 'removed'])

		let $_ := (
			map:put($response-obj, 'company_id', $RE_ID),
			map:put($response-obj, 'company_name', $company),
			map:put($response-obj, 'ActionYear', $year),
			map:put($response-obj, 'headCountPlus', $headCountPlus),
			map:put($response-obj, 'headCountMinus', $headCountMinus)
		)

		let $_ := if ($headCountPlus or $headCountMinus) then json:array-push($response-arr,$response-obj) else ()

		return ()

	return $response-arr
};

declare function firm:GetLateralPartnerChangesPM($OrganisationID, $title,$Interval)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID
	
	let $RE_ID := fn:distinct-values(firm:GetREIdByOrgId1($orgIDs))

	let $interval := if(xs:string($Interval) ne '') then $Interval else 4
	let $fromYear := fn:concat('P',$interval,'Y')
	let $sYear := fn:format-date(xs:date(xdmp:parse-dateTime('[Y01]-[M01]-[D01]',xs:string(fn:current-date() - xs:yearMonthDuration($fromYear)))),'[Y0001]')
	
	let $eYear := fn:format-date(xs:date(xdmp:parse-dateTime('[Y01]-[M01]-[D01]',xs:string(fn:current-date()))),'[Y0001]')
	
	let $years := helper:GetDatesBetweenTwoDates(xs:integer($sYear),xs:integer($eYear))
	
	let $response-arr := json:array()

	let $title_query := if ($title) then
			cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:Title'),$title,())
		else ()

	let $_ := for $year in $years
		let $sDate := fn:concat($year,'-01','-01')
		let $eDate := fn:concat($year,'-12','-31')

		let $changes := cts:search(/ALI_RE_LateralMoves_Data,
			cts:and-query((
				 cts:directory-query($config:RD-ALI_RE_LATERALMOVES_DATA-PATH,'infinity')
				,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:company_Id'), $RE_ID)
				,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), ('0000-00-00','0/0/0000'),('wildcarded')))
				,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), ''))
				,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:action'), ''))
				,cts:element-range-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), '>=', xs:date($sDate))
				,cts:element-range-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), '<=', xs:date($eDate))
				(:,cts:element-query(xs:QName('people_changes:std_title'),cts:and-query(())):)
				,$title_query
			)))

		let $response-obj := json:object()
		let $headCountPlus := fn:count($changes/ALI_RE_LateralMoves_Data:action[. = 'added'])
		let $headCountMinus := fn:count($changes/ALI_RE_LateralMoves_Data:action[. = 'removed'])

		let $_ := (
			map:put($response-obj, 'company_id', $RE_ID[1]),
			map:put($response-obj, 'company_name', ''),
			map:put($response-obj, 'ActionYear', $year),
			map:put($response-obj, 'headCountPlus', $headCountPlus),
			map:put($response-obj, 'headCountMinus', $headCountMinus)
		)

		let $_ := if ($headCountPlus or $headCountMinus) then json:array-push($response-arr,$response-obj) else ()

		return ()

	return $response-arr
};

declare function firm:GetSearchResults($ORGANIZATION_ID)
{
let $search-result := for $x in cts:search(/TOP500,
		cts:and-query((
			cts:directory-query($config:RD-TOP500-PATH)
			,cts:element-value-query(xs:QName('TOP500:COMPANY_ID'),$ORGANIZATION_ID)
			,cts:not-query(cts:element-value-query(xs:QName('TOP500:PRIMARY_INDUSTRY'),''))
		)))
		return for $item in $x 
					return element {'RECORD'} { 
					element {'PRIMARY_INDUSTRY'} {$item/TOP500:PRIMARY_INDUSTRY/text()},
					element {'COMPANY_ID'} {$item/TOP500:COMPANY_ID/text()}
		}

	let $distinct-values := helper:distinct-node($search-result)
	
	let $response := for $facet in fn:distinct-values($distinct-values/PRIMARY_INDUSTRY/text())
		
		let $company_id := $distinct-values[PRIMARY_INDUSTRY eq $facet]/COMPANY_ID/text()
		let $count := fn:count($ORGANIZATION_ID[. = $company_id])
		
		let $obj := element {'RECORD'} {
			element {'Total'} {$count},
			element {'Industry'} {$facet}
		}
		
		return $obj

	return $response
};

declare function firm:GetTotalIndustrybyId($orgIDs)
{
	let $fromYear := (fn:max(cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),(), cts:directory-query($config:DD-SURVEY-AMLAW_100-PATH)))-1)
	let $toYear := fn:max(cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),(), cts:directory-query($config:DD-SURVEY-AMLAW_100-PATH)))

	let $checkMergerData := (:firmnew:GetLawFirmMergerData($orgIDs):) ''
	let $firmID := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$orgIDs),',') else $orgIDs

	(: ---------------------------------- Stored Procedure 1st Part ---------------------------------- :)
	let $PARTY_IDs := cts:element-values(xs:QName('bdbs-representer:PARTY_ID'),(),(),
		cts:and-query((
			cts:directory-query($config:RD-BDBS_REPRESENTER-PATH),
			cts:element-value-query(xs:QName('bdbs-representer:ORGANIZATION_ID'),$firmID),
			cts:not-query(cts:element-value-query(xs:QName('bdbs-representer:PARTY_ID'),''))
		)))

	let $TRANSACTION_IDs := cts:element-values(xs:QName('bdbs-transaction:TRANSACTION_ID'),(),(),
		cts:and-query((
			cts:directory-query($config:RD-BDBS_TRANSACTION-PATH),
			cts:element-range-query(xs:QName('bdbs-transaction:YEAR'),'>=',$fromYear),
			cts:element-range-query(xs:QName('bdbs-transaction:YEAR'),'<=',$toYear)
		)))

	let $ORGANIZATION_ID_1 := cts:search(/bdbs-party,
		cts:and-query((
			cts:directory-query($config:RD-BDBS_PARTY-PATH),
			cts:element-value-query(xs:QName('bdbs-party:PARTY_ID'),($PARTY_IDs ! xs:string(.))),
			cts:element-value-query(xs:QName('bdbs-party:TRANSACTION_ID'),($TRANSACTION_IDs ! xs:string(.))),
			cts:not-query(cts:element-value-query(xs:QName('bdbs-party:ORGANIZATION_ID'),''))
		)))/bdbs-party:ORGANIZATION_ID/text()
	
	
	let $RESPONSE_1 := firm:GetSearchResults($ORGANIZATION_ID_1)
	
	(: ---------------------------------- Stored Procedure 2nd Part ---------------------------------- :)
	
	let $ORGANIZATION_ID_2 := cts:search(/WhoCounselsWho, 
		cts:and-query((
			cts:directory-query($config:RD-SURVEY-WHO_COUNSELS_WHO-PATH)
			,cts:element-value-query(xs:QName('Who_Counsels_who:OUTSIDE_COUNSEL_ID'),$firmID)
			,cts:element-range-query(xs:QName('Who_Counsels_who:PUBLISHYEAR'), '>=', $fromYear)
			,cts:element-range-query(xs:QName('Who_Counsels_who:PUBLISHYEAR'), '<=', $toYear)
		)))/Who_Counsels_who:ORGANIZATION_ID/text()
	
	let $RESPONSE_2 := firm:GetSearchResults($ORGANIZATION_ID_2)
	
	(: ---------------------------------- Stored Procedure 3rd Part ---------------------------------- :)
	
	let $ORGANIZATION_ID_3 := cts:search(/COMPANYPROFILE_LFR_NEW,
		cts:and-query((
			cts:directory-query($config:RD-SURVEY-COMPANYPROFILE_LFR_NEW-PATH)
			,cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:FIRM_ID'),$firmID)
			,cts:element-range-query(xs:QName('COMPANYPROFILE_LFR_NEW:YEAR'), '>=', $fromYear)
			,cts:element-range-query(xs:QName('COMPANYPROFILE_LFR_NEW:YEAR'), '<=', $toYear)
		)))/COMPANYPROFILE_LFR_NEW:COMPANY_ID/text()
		
	let $RESPONSE_3 := firm:GetSearchResults($ORGANIZATION_ID_3)
	
	(: ---------------------------------- Stored Procedure 4th Part ---------------------------------- :)
	
	let $ORGANIZATION_ID_4 := cts:search(/COMPANYPROFILE_LFR,
		cts:and-query((
			cts:directory-query($config:RD-SURVEY-COMPANYPROFILE_LFR-PATH)
			,cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:FIRM_ID'),$firmID)
			,cts:element-range-query(xs:QName('COMPANYPROFILE_LFR:YEAR'), '>=', $fromYear)
			,cts:element-range-query(xs:QName('COMPANYPROFILE_LFR:YEAR'), '<=', $toYear)
		)))/COMPANYPROFILE_LFR:COMPANY_ID/text()
		
	let $RESPONSE_4 := firm:GetSearchResults($ORGANIZATION_ID_4)
	
	let $OBJECT := ($RESPONSE_1, $RESPONSE_2, $RESPONSE_3, $RESPONSE_4)
	
	let $response-arr := json:array()
	
	let $_ := for $OBJ in fn:distinct-values($OBJECT/Industry/text())
		
		let $response-obj := json:object()
		
		let $total := fn:sum($OBJECT[Industry = $OBJ]/Total/text())
		
		let $_ := (
			map:put($response-obj ,'Total', $total),
			map:put($response-obj ,'Industry', $OBJ)
		)
		let $_ := json:array-push($response-arr,$response-obj)
		
		return $_
		
	return $response-arr
};

declare function firm:GetTotalIndustrybyIdCount($orgIDs)
{
	let $fromYear := (fn:max(cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),(), cts:directory-query($config:DD-SURVEY-AMLAW_100-PATH)))-1)
	let $toYear := fn:max(cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),(), cts:directory-query($config:DD-SURVEY-AMLAW_100-PATH)))

	let $checkMergerData := firmnew:GetLawFirmMergerData($orgIDs)
	let $firmID := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$orgIDs),',') else $orgIDs

	(: ---------------------------------- Stored Procedure 1st Part ---------------------------------- :)
	let $PARTY_IDs := cts:element-values(xs:QName('bdbs-representer:PARTY_ID'),(),(),
		cts:and-query((
			cts:directory-query($config:RD-BDBS_REPRESENTER-PATH),
			cts:element-value-query(xs:QName('bdbs-representer:ORGANIZATION_ID'),$firmID),
			cts:not-query(cts:element-value-query(xs:QName('bdbs-representer:PARTY_ID'),''))
		)))

	let $TRANSACTION_IDs := cts:element-values(xs:QName('bdbs-transaction:TRANSACTION_ID'),(),(),
		cts:and-query((
			cts:directory-query($config:RD-BDBS_TRANSACTION-PATH),
			cts:element-range-query(xs:QName('bdbs-transaction:YEAR'),'>=',$fromYear),
			cts:element-range-query(xs:QName('bdbs-transaction:YEAR'),'<=',$toYear)
		)))

	let $ORGANIZATION_ID_1 := cts:search(/bdbs-party,
		cts:and-query((
			cts:directory-query($config:RD-BDBS_PARTY-PATH),
			cts:element-value-query(xs:QName('bdbs-party:PARTY_ID'),($PARTY_IDs ! xs:string(.))),
			cts:element-value-query(xs:QName('bdbs-party:TRANSACTION_ID'),($TRANSACTION_IDs ! xs:string(.))),
			cts:not-query(cts:element-value-query(xs:QName('bdbs-party:ORGANIZATION_ID'),''))
		)))/bdbs-party:ORGANIZATION_ID/text()
	
	
	let $RESPONSE_1 := firm:GetSearchResults($ORGANIZATION_ID_1)
	
	(: ---------------------------------- Stored Procedure 2nd Part ---------------------------------- :)
	
	let $ORGANIZATION_ID_2 := cts:search(/WhoCounselsWho, 
		cts:and-query((
			cts:directory-query($config:RD-SURVEY-WHO_COUNSELS_WHO-PATH)
			,cts:element-value-query(xs:QName('Who_Counsels_who:OUTSIDE_COUNSEL_ID'),$firmID)
			,cts:element-range-query(xs:QName('Who_Counsels_who:PUBLISHYEAR'), '>=', $fromYear)
			,cts:element-range-query(xs:QName('Who_Counsels_who:PUBLISHYEAR'), '<=', $toYear)
		)))/Who_Counsels_who:ORGANIZATION_ID/text()
	
	let $RESPONSE_2 := firm:GetSearchResults($ORGANIZATION_ID_2)
	
	(: ---------------------------------- Stored Procedure 3rd Part ---------------------------------- :)
	
	let $ORGANIZATION_ID_3 := cts:search(/COMPANYPROFILE_LFR_NEW,
		cts:and-query((
			cts:directory-query($config:RD-SURVEY-COMPANYPROFILE_LFR_NEW-PATH)
			,cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:FIRM_ID'),$firmID)
			,cts:element-range-query(xs:QName('COMPANYPROFILE_LFR_NEW:YEAR'), '>=', $fromYear)
			,cts:element-range-query(xs:QName('COMPANYPROFILE_LFR_NEW:YEAR'), '<=', $toYear)
		)))/COMPANYPROFILE_LFR_NEW:COMPANY_ID/text()
		
	let $RESPONSE_3 := firm:GetSearchResults($ORGANIZATION_ID_3)
	
	(: ---------------------------------- Stored Procedure 4th Part ---------------------------------- :)
	
	let $ORGANIZATION_ID_4 := cts:search(/COMPANYPROFILE_LFR,
		cts:and-query((
			cts:directory-query($config:RD-SURVEY-COMPANYPROFILE_LFR-PATH)
			,cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:FIRM_ID'),$firmID)
			,cts:element-range-query(xs:QName('COMPANYPROFILE_LFR:YEAR'), '>=', $fromYear)
			,cts:element-range-query(xs:QName('COMPANYPROFILE_LFR:YEAR'), '<=', $toYear)
		)))/COMPANYPROFILE_LFR:COMPANY_ID/text()
		
	let $RESPONSE_4 := firm:GetSearchResults($ORGANIZATION_ID_4)
	
	let $OBJECT := ($RESPONSE_1, $RESPONSE_2, $RESPONSE_3, $RESPONSE_4)
	
	let $response-arr := json:array()
	
	let $_ := for $OBJ in fn:distinct-values($OBJECT/Industry/text())
		
		let $response-obj := json:object()
		
		let $total := fn:sum($OBJECT[Industry = $OBJ]/Total/text())
		
		let $_ := (
			map:put($response-obj ,'Total', $total),
			map:put($response-obj ,'Industry', $OBJ)
		)
		let $_ := json:array-push($response-arr,$response-obj)
		
		return $_
		
	return $response-arr
};

declare function firm:GetCostPerLawyerPostMerger($OrganisationID,$StartYear,$EndYear,$isDisplayGBP,$Interval)
{
	
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)

	let $data := if($checkMergerData != '') then firm:GetCostPerLawyerPM($OrganisationID,$StartYear,$EndYear,$isDisplayGBP,$Interval) else firm:GetCostPerLawyer($OrganisationID,$StartYear,$EndYear,$isDisplayGBP,$Interval)
	return $data
};

declare function firm:GetCostPerLawyer($OrganisationID,$StartYear,$EndYear,$isDisplayGBP,$Interval)
{
	
	let $IsDisplayGBP := if($isDisplayGBP ne '') then $isDisplayGBP else 'false'
	let $distinct-years := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('ascending'),
		cts:and-query((
			cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH,'1')
		)))                      

	let $organization := cts:search(/organization,
		cts:and-query((
			cts:directory-query($config:DD-ORGANIZATION-PATH),
		cts:element-value-query(xs:QName('organization:ORGANIZATION_ID'),$OrganisationID)
		)))

	let $years := if (fn:not($StartYear) and fn:not($EndYear)) then
			$distinct-years[last()-4 to last()]
		else 
		for $year in $distinct-years
			where ($year ge xs:integer($StartYear) and $year le xs:integer($EndYear))
			return $year (:fn:tokenize('2013,2014,2015,2016,2017',','):)
			
	let $yr := for $item in $years
				order by xs:integer($item) descending
				return $item		

	let $AMLAW_200_URI := fn:concat($config:DD-SURVEY-AMLAW_200-PATH,$OrganisationID,'.xml')
	let $AMLAW_200 := fn:doc($AMLAW_200_URI)//survey:YEAR

	let $response-arr := json:array()

	let $amlaw200maxYearData := cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganisationID)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($years)))
			)))[1]

	let $uk50maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
				cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(max($years))),
				cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
			)))[1]		

	let $global100maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
				cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(fn:max($years))),
				cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
			)))[1]				

	let $china40maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/'),
				cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(fn:max($years))),
				cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
			)))[1]						

	let $maxYearData := if($uk50maxYearData ne '' or $amlaw200maxYearData ne '' or $global100maxYearData ne '' or $china40maxYearData ne '') then 'Y' else ()

	let $interval := if(xs:string($Interval) ne '') then if(xs:integer($Interval) gt 5) then $Interval else 5 else ()
	let $yearss := if(xs:string($interval) ne '') then $years[1 to xs:integer($interval)] else $years[1 to 5]

	let $_ := for $year in $yearss
		let $response-obj := json:object()

		let $AMLAW_200_NODE := if(xs:string($IsDisplayGBP) ne 'true') then $AMLAW_200[@PublishYear = $year] else()
		
		let $uk50Data :=cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID)),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
							)))[1]
		
		let $global100Data :=if(xs:string($IsDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1] else()

		let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1] else ()

												
		
		let $ORGANIZATION_ID := $organization/organization:ORGANIZATION_ID/text()
		let $ORGANIZATION_NAME := if($organization/organization:ALM_NAME/text()) then 
				$organization/organization:ALM_NAME/text() 
			else $organization/organization:ORGANIZATION_NAME/text()
		let $PUBLISHYEAR := $year
		let $COSTPERLAWYER := $AMLAW_200[1]
		
		let $COSTPERLAWYER := if(fn:sum($AMLAW_200_NODE//survey:NUM_OF_LAWYERS/text()) ne 0) then fn:round((xs:decimal(fn:sum($AMLAW_200_NODE//survey:GROSS_REVENUE/text())) - xs:decimal(fn:sum($AMLAW_200_NODE//survey:NET_OPERATING_INCOME/text()))) div xs:decimal(fn:sum($AMLAW_200_NODE//survey:NUM_OF_LAWYERS/text()))) else 0
		
		let $cplByUk50 := if($uk50Data//UK_50:NUMBER_OF_LAWYERS/text() ne '') then 
								if(xs:string($IsDisplayGBP) eq 'true') then fn:round-half-to-even((($uk50Data//UK_50:GROSS_REVENUE_POUND_M/text() * 1000000) - (($uk50Data//UK_50:PPP_POUND_K/text() * 1000) * $uk50Data//UK_50:NUMBER_OF_EQ_PARTNERS/text())) div $uk50Data//UK_50:NUMBER_OF_LAWYERS/text() ,2)
								else fn:round-half-to-even(($uk50Data//UK_50:GROSS_REVENUE_DOLLAR/text() - ($uk50Data//UK_50:PPP_DOLLAR/text() * $uk50Data//UK_50:NUMBER_OF_EQ_PARTNERS/text())) div $uk50Data//UK_50:NUMBER_OF_LAWYERS/text() ,2) 
						  else()
		
		let $cplByGlobal100 := if($global100Data//Global_100:GROSS_REVENUE/text() ne '') then fn:round-half-to-even(($global100Data//Global_100:GROSS_REVENUE/text() - ($global100Data//Global_100:PPP/text() * $global100Data//Global_100:NUM_EQUITY_PARTNERS/text())) div $global100Data//Global_100:NUM_LAWYERS/text(),0) else 0
		
		let $cplByChina40 := if($china40//CHINA_40:GROSS_REVENUE/text() ne '') then fn:round-half-to-even(($china40//CHINA_40:GROSS_REVENUE/text() - ($china40//CHINA_40:PROFITS_PER_PARTNER/text() * $china40//CHINA_40:EQUITY_PARTNERS/text())) div $china40//CHINA_40:FIRMWIDE_LAWYERS/text(),0) else 0

		let $cpl := if(fn:not($AMLAW_200_NODE ne '') and fn:not($global100Data ne '') and fn:not($uk50Data ne '') and fn:not($china40 ne '')) then -1000
					else if($COSTPERLAWYER ne 0) then $COSTPERLAWYER else 
						 if($cplByGlobal100 ne 0) then $cplByGlobal100
						 else if($cplByUk50 ne 0) then $cplByUk50 
						 else if($cplByChina40 ne 0) then $cplByChina40 else 0

		let $isAddMaxYear := if(xs:string($year) ne xs:string(max($years))) then 'y' else
							if($cpl ne 0 and $cpl ne -1000) then 'y' else 'n'			
		
		let $response-obj := json:object()
		let $_ := (
			map:put($response-obj, 'ORGANIZATION_ID', $OrganisationID),
			map:put($response-obj, 'ORGANIZATION_NAME', $ORGANIZATION_NAME),
			map:put($response-obj, 'COSTPERLAWYER', $cpl),
			map:put($response-obj, 'PUBLISHYEAR', $PUBLISHYEAR)
		)

		let $_ := if(xs:string($year) ne xs:string(max($years))) then json:array-push($response-arr,$response-obj) else
					if($maxYearData ne '' and $isAddMaxYear ne 'n') then json:array-push($response-arr,$response-obj) else()

    let $distinctid_lt_100  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '<=',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		)))
    
    let $AMLAW_100 :=fn:avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($year))
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'), ''))
		)))//AMLAW_200:CPL/text())
    
    
		let $COSTPERLAWYER := if(fn:not($cpl ne -1000)) then -1000
							  else $AMLAW_100

		let $response-obj := json:object()
		let $_ := (
			map:put($response-obj, 'ORGANIZATION_ID', 0),
			map:put($response-obj, 'ORGANIZATION_NAME', 'AM Law 100'),
			map:put($response-obj, 'COSTPERLAWYER', fn:round-half-to-even($COSTPERLAWYER,2)),
			map:put($response-obj, 'PUBLISHYEAR', $PUBLISHYEAR)
		)
		let $_ := if($isAddMaxYear ne 'n' and xs:string($IsDisplayGBP) ne 'true') then json:array-push($response-arr,$response-obj) else()

    let $distinctid_gt_100  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		
		)))
    
		let $SECOND_100 := fn:avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		(: ,cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.))) :)
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'), ''))
		)))//AMLAW_200:CPL/text())

		let $COSTPERLAWYER :=if(fn:not($cpl ne -1000)) then -1000
							 else $SECOND_100

		let $response-obj := json:object()
		let $_ := (
			map:put($response-obj, 'ORGANIZATION_ID', 0),
			map:put($response-obj, 'ORGANIZATION_NAME', 'Am Law 2nd Hundred'),
			map:put($response-obj, 'COSTPERLAWYER', fn:round-half-to-even($COSTPERLAWYER,2)),
			map:put($response-obj, 'PUBLISHYEAR', xs:integer($PUBLISHYEAR))
		)
		let $_ := if($isAddMaxYear ne 'n' and xs:string($IsDisplayGBP) ne 'true') then json:array-push($response-arr,$response-obj) else()
		
		(:------------------------UK50------------------------:)
		
	let $response-obj := json:object()
	
	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
							)))[1]//UK_50:ORGANIZATION_ID/text()

	let $distinctid_gt_100_Cur := fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
							)))//UK_50:ORGANIZATION_ID/text())

	
		let $res3 := cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100_Cur ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
							)))

		let $grossRevenue := if(xs:string($IsDisplayGBP) ne 'true')	then avg($res3//UK_50:GROSS_REVENUE_DOLLAR/text()) else avg($res3//UK_50:GROSS_REVENUE_POUND_M/text()) * 1000000
		let $ppp := if(xs:string($IsDisplayGBP) ne 'true')	then avg($res3//UK_50:PPP_DOLLAR/text()) else avg($res3//UK_50:PPP_POUND_K/text()) * 1000
		
		
		
		let $CHANGE := if(fn:not($distinctid_gt_100_Cur != '')  or fn:not($cpl ne -1000) or  $isAddMaxYear eq 'n') then -1000
					   else if($res3//UK_50:NUMBER_OF_LAWYERS/text() != '') then fn:round-half-to-even(($grossRevenue - ($ppp * avg($res3//UK_50:NUMBER_OF_EQ_PARTNERS/text()))) div avg($res3//UK_50:NUMBER_OF_LAWYERS/text()) ,2) else()
		
		
		let $_ :=(
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'UK 100'),
		map:put($response-obj,'COSTPERLAWYER', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		let $_ :=  if($uk50ID != '') then json:array-push($response-arr, $response-obj)
				 else()

		return ()

	return $response-arr
};

declare function firm:GetCostPerLawyerPM($OrganisationID,$StartYear,$EndYear,$isDisplayGBP,$Interval)
{
	let $checkMergerData := firmnew:GetMergedFirmData($OrganisationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID

	let $IsDisplayGBP := if($isDisplayGBP ne '') then $isDisplayGBP else 'false'
	let $distinct-years := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('ascending'),
		cts:and-query((
			cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH,'1')
		)))                      

	

	let $years := if (fn:not($StartYear) and fn:not($EndYear)) then
			$distinct-years[last()-4 to last()]
		else 
		for $year in $distinct-years
			where ($year ge xs:integer($StartYear) and $year le xs:integer($EndYear))
			return $year (:fn:tokenize('2013,2014,2015,2016,2017',','):)
			
	let $yr := for $item in $years
				order by xs:integer($item) descending
				return $item		

	

	let $response-arr := json:array()

	(: let $maxYearData := cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganisationID)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($years)))
			)))[1] :)
	let $interval := if(xs:string($Interval) ne '') then if(xs:integer($Interval) gt 5) then $Interval else 5 else ()
	let $yearss := if(xs:string($interval) ne '') then $years[1 to xs:integer($interval)] else $years[1 to 5]

	let $_ := for $year in $yearss
				let $PUBLISHYEAR := $year
				let $loopData := for $item in $checkMergerData//FirmData
									let $OrganisationID := $item//FirmID/text()
									let $ORGANIZATION_NAME := $item//FirmName/text()

									let $organization := cts:search(/organization,
															cts:and-query((
																cts:directory-query($config:DD-ORGANIZATION-PATH),
															cts:element-value-query(xs:QName('organization:ORGANIZATION_ID'),$OrganisationID)
															)))
															
									let $AMLAW_200_URI := fn:concat($config:DD-SURVEY-AMLAW_200-PATH,$OrganisationID,'.xml')
									let $AMLAW_200 := fn:doc($AMLAW_200_URI)//survey:YEAR
									let $response-obj := json:object()

									let $AMLAW_200_NODE := if(xs:string($IsDisplayGBP) ne 'true') then $AMLAW_200[@PublishYear = $year] else()
									
									let $uk50Data :=cts:search(/,
													cts:and-query((
														cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
														cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID)),
														cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
														)))[1]
									
									let $global100Data :=if(xs:string($IsDisplayGBP) ne 'true') then cts:search(/,
																			cts:and-query((
																				cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																				cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
																				cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
																				)))[1] else()
		
									let $ORGANIZATION_ID := $organization/organization:ORGANIZATION_ID/text()
									(: let $ORGANIZATION_NAME := if($organization/organization:ALM_NAME/text()) then 
											$organization/organization:ALM_NAME/text() 
										else $organization/organization:ORGANIZATION_NAME/text() :)

									let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1] else ()	
									
									let $COSTPERLAWYER := $AMLAW_200[1]
									
									let $COSTPERLAWYER := if(fn:sum($AMLAW_200_NODE//survey:NUM_OF_LAWYERS/text()) ne 0) then fn:round((xs:decimal(fn:sum($AMLAW_200_NODE//survey:GROSS_REVENUE/text())) - xs:decimal(fn:sum($AMLAW_200_NODE//survey:NET_OPERATING_INCOME/text()))) div xs:decimal(fn:sum($AMLAW_200_NODE//survey:NUM_OF_LAWYERS/text()))) else 0
									
									let $cplByUk50 := if($uk50Data//UK_50:NUMBER_OF_LAWYERS/text() ne '') then 
															if(xs:string($IsDisplayGBP) eq 'true') then fn:round-half-to-even((($uk50Data//UK_50:GROSS_REVENUE_POUND_M/text() * 1000000) - (($uk50Data//UK_50:PPP_POUND_K/text() * 1000) * $uk50Data//UK_50:NUMBER_OF_EQ_PARTNERS/text())) div $uk50Data//UK_50:NUMBER_OF_LAWYERS/text() ,2)
															else fn:round-half-to-even(($uk50Data//UK_50:GROSS_REVENUE_DOLLAR/text() - ($uk50Data//UK_50:PPP_DOLLAR/text() * $uk50Data//UK_50:NUMBER_OF_EQ_PARTNERS/text())) div $uk50Data//UK_50:NUMBER_OF_LAWYERS/text() ,2) 
													else ()
									
									let $cplByGlobal100 := if($global100Data//Global_100:GROSS_REVENUE/text() ne '') then fn:round-half-to-even(($global100Data//Global_100:GROSS_REVENUE/text() - ($global100Data//Global_100:PPP/text() * $global100Data//Global_100:NUM_EQUITY_PARTNERS/text())) div $global100Data//Global_100:NUM_LAWYERS/text(),0) else 0
									let $cplByChina40 := if($china40//CHINA_40:GROSS_REVENUE/text() ne '') then fn:round-half-to-even(($china40//CHINA_40:GROSS_REVENUE/text() - ($china40//CHINA_40:PROFITS_PER_PARTNER/text() * $china40//CHINA_40:EQUITY_PARTNERS/text())) div $china40//CHINA_40:FIRMWIDE_LAWYERS/text(),0) else 0

									let $cpl := if(fn:not($AMLAW_200_NODE ne '') and fn:not($global100Data ne '') and fn:not($uk50Data ne '')) then -1000
												else if($COSTPERLAWYER ne 0) then $COSTPERLAWYER else 
													if($cplByGlobal100 ne 0) then $cplByGlobal100
													else if($cplByUk50 ne 0) then $cplByUk50 
													else if($cplByChina40 ne 0) then $cplByChina40 else 0

											
									
									let $response-obj := json:object()
									let $_ := (
										map:put($response-obj, 'ORGANIZATION_ID', $OrganisationID),
										map:put($response-obj, 'ORGANIZATION_NAME', $ORGANIZATION_NAME),
										map:put($response-obj, 'COSTPERLAWYER', $cpl),
										map:put($response-obj, 'AMLAW_200_NODE', $AMLAW_200_NODE),
										map:put($response-obj, 'global100Data', $global100Data),
										map:put($response-obj, 'uk50Data', $uk50Data),
										map:put($response-obj, 'PUBLISHYEAR', $PUBLISHYEAR)
									)

									let $_ := json:array-push($response-arr,$response-obj)
									return()

    let $distinctid_lt_100  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '<=',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		)))
    
    let $AMLAW_100 :=fn:avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),($distinctid_lt_100 ! xs:string(.)))
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($year))
		)))//AMLAW_200:CPL/text())
    
    
		let $COSTPERLAWYER := if(fn:not(count($distinctid_lt_100) ne 0)) then -1000
							  else $AMLAW_100

		let $response-obj := json:object()
		let $_ := (
			map:put($response-obj, 'ORGANIZATION_ID', 0),
			map:put($response-obj, 'ORGANIZATION_NAME', 'AM Law 100'),
			map:put($response-obj, 'COSTPERLAWYER', fn:round-half-to-even($COSTPERLAWYER,2)),
			map:put($response-obj, 'PUBLISHYEAR', $PUBLISHYEAR)
		)
		let $_ := if(xs:string($COSTPERLAWYER) ne 'NaN' and xs:string($IsDisplayGBP) ne 'true') then json:array-push($response-arr,$response-obj) else()

    let $distinctid_gt_100  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		)))
    
		let $SECOND_100 := fn:avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.)))
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($year))
		)))//AMLAW_200:CPL/text())

		let $COSTPERLAWYER :=if(fn:not(count($distinctid_gt_100) ne 0)) then -1000
							 else $SECOND_100

		let $response-obj := json:object()
		let $_ := (
			map:put($response-obj, 'ORGANIZATION_ID', 0),
			map:put($response-obj, 'ORGANIZATION_NAME', 'Am Law 2nd Hundred'),
			map:put($response-obj, 'COSTPERLAWYER', fn:round-half-to-even($COSTPERLAWYER,2)),
			map:put($response-obj, 'PUBLISHYEAR', xs:integer($PUBLISHYEAR))
		)
		let $_ := if(xs:string($COSTPERLAWYER) ne '' and xs:string($IsDisplayGBP) ne 'true' ) then json:array-push($response-arr,$response-obj) else()
		
		(:------------------------UK50------------------------:)
		
	let $response-obj := json:object()
	
	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$checkMergerData//FirmData//FirmID)
							)))[1]//UK_50:ORGANIZATION_ID/text()

	let $distinctid_gt_100_Cur := fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
							)))//UK_50:ORGANIZATION_ID/text())

	
		let $res3 := cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100_Cur ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
							)))
		
		let $grossRevenue := if(xs:string($IsDisplayGBP) ne 'true')	then avg($res3//UK_50:GROSS_REVENUE_DOLLAR/text()) else avg($res3//UK_50:GROSS_REVENUE_POUND_M/text()) * 1000000
		let $ppp := if(xs:string($IsDisplayGBP) ne 'true')	then avg($res3//UK_50:PPP_DOLLAR/text()) else avg($res3//UK_50:PPP_POUND_K/text()) * 1000
		
		
		
		let $CHANGE := if(fn:not($distinctid_gt_100_Cur != '')) then -1000
					   else if($res3//UK_50:NUMBER_OF_LAWYERS/text() != '') then fn:round-half-to-even(($grossRevenue - ($ppp * avg($res3//UK_50:NUMBER_OF_EQ_PARTNERS/text()))) div avg($res3//UK_50:NUMBER_OF_LAWYERS/text()) ,2) else()

		
		(: let $CHANGE := if(fn:not($distinctid_gt_100_Cur != '')) then -1000
					   else if($res3//UK_50:NUMBER_OF_LAWYERS/text() ne '') then fn:round-half-to-even(($res3//UK_50:GROSS_REVENUE_DOLLAR/text() - ($res3//UK_50:PPP_DOLLAR/text() * $res3//UK_50:NUMBER_OF_EQ_PARTNERS/text())) div $res3//UK_50:NUMBER_OF_LAWYERS/text() ,2) else() :)

		let $_ :=(
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'UK 100'),
		map:put($response-obj,'COSTPERLAWYER', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		let $_ :=  if($uk50ID != '') then json:array-push($response-arr, $response-obj)
				 else()

		return ()

	return $response-arr
};

declare function firm:GetCostPerLawyerByYearPostMerger($OrganisationID,$StartYear,$EndYear,$isDisplayGBP,$Interval)
{
	
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)

	let $data := if($checkMergerData != '') then firm:GetCostPerLawyerByYearPM($OrganisationID,$StartYear,$EndYear,$isDisplayGBP,$Interval) else firm:GetCostPerLawyerByYear($OrganisationID,$StartYear,$EndYear,$isDisplayGBP,$Interval)
	return $data
};

declare function firm:GetCostPerLawyerByYear($OrganisationID,$StartYear,$EndYear,$isDisplayGBP,$Interval)
{
	
	let $IsDisplayGBP := if($isDisplayGBP ne '') then $isDisplayGBP else 'false'
	let $distinct-years := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('ascending'),
		cts:and-query((
			cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH,'1')
		)))                      

	let $organization := cts:search(/organization,
		cts:and-query((
			cts:directory-query($config:DD-ORGANIZATION-PATH),
		cts:element-value-query(xs:QName('organization:ORGANIZATION_ID'),$OrganisationID)
		)))

	let $years := if (fn:not($StartYear) and fn:not($EndYear)) then
			$distinct-years[last()-4 to last()]
		else 
		for $year in $distinct-years
			where ($year ge xs:integer($StartYear) and $year le xs:integer($EndYear))
			return $year (:fn:tokenize('2013,2014,2015,2016,2017',','):)
			
	let $yr := for $item in $years
				order by xs:integer($item) descending
				return $item		

	let $AMLAW_200_URI := fn:concat($config:DD-SURVEY-AMLAW_200-PATH,$OrganisationID,'.xml')
	let $AMLAW_200 := fn:doc($AMLAW_200_URI)//survey:YEAR

	let $response-arr := json:array()

	let $amlaw200maxYearData := cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganisationID)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($years)))
			)))[1]

	let $uk50maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
				cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(max($years))),
				cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
			)))[1]		

	let $global100maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
				cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(fn:max($years))),
				cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
			)))[1]

	let $CHINA_40 := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/'),
				cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(fn:max($years))),
				cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
			)))[1]						

	let $maxYearData := if($uk50maxYearData ne '' or $amlaw200maxYearData ne '' or $global100maxYearData ne '' or $CHINA_40 ne '') then 'Y' else ()	

	let $interval := if(xs:string($Interval) ne '') then if(xs:integer($Interval) gt 5) then $Interval else 5 else ()
	let $yearss := if(xs:string($interval) ne '') then $years[1 to xs:integer($interval)] else $years[1 to 5]


	let $_ := for $year in $yearss
		let $response-obj := json:object()

		let $AMLAW_200_NODE := if(xs:string($IsDisplayGBP) ne 'true') then $AMLAW_200[@PublishYear = $year] else()
		
		let $uk50Data :=cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID)),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
							)))[1]
		
		let $global100Data :=if(xs:string($IsDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1] else()

		let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1] else ()

												
		let $cplByChina40 := if($china40//CHINA_40:GROSS_REVENUE/text() ne '') then fn:round-half-to-even(($china40//CHINA_40:GROSS_REVENUE/text() - ($china40//CHINA_40:PROFITS_PER_PARTNER/text() * $china40//CHINA_40:EQUITY_PARTNERS/text())) div $china40//CHINA_40:FIRMWIDE_LAWYERS/text(),0) else 0
													
		
		let $ORGANIZATION_ID := $organization/organization:ORGANIZATION_ID/text()
		let $ORGANIZATION_NAME := if($organization/organization:ALM_NAME/text()) then 
				$organization/organization:ALM_NAME/text() 
			else $organization/organization:ORGANIZATION_NAME/text()
		let $PUBLISHYEAR := $year
		let $COSTPERLAWYER := $AMLAW_200[1]
		
		let $COSTPERLAWYER := if(fn:sum($AMLAW_200_NODE//survey:NUM_OF_LAWYERS/text()) ne 0) then fn:round((xs:decimal(fn:sum($AMLAW_200_NODE//survey:GROSS_REVENUE/text())) - xs:decimal(fn:sum($AMLAW_200_NODE//survey:NET_OPERATING_INCOME/text()))) div xs:decimal(fn:sum($AMLAW_200_NODE//survey:NUM_OF_LAWYERS/text()))) else 0
		
		let $cplByUk50 := if($uk50Data//UK_50:NUMBER_OF_LAWYERS/text() ne '') then 
								if(xs:string($IsDisplayGBP) eq 'true') then fn:round-half-to-even((($uk50Data//UK_50:GROSS_REVENUE_POUND_M/text() * 1000000) - (($uk50Data//UK_50:PPP_POUND_K/text() * 1000) * $uk50Data//UK_50:NUMBER_OF_EQ_PARTNERS/text())) div $uk50Data//UK_50:NUMBER_OF_LAWYERS/text() ,2)
								else fn:round-half-to-even(($uk50Data//UK_50:GROSS_REVENUE_DOLLAR/text() - ($uk50Data//UK_50:PPP_DOLLAR/text() * $uk50Data//UK_50:NUMBER_OF_EQ_PARTNERS/text())) div $uk50Data//UK_50:NUMBER_OF_LAWYERS/text() ,2) 
						  else()
		
		let $cplByGlobal100 := if($global100Data//Global_100:GROSS_REVENUE/text() ne '') then fn:round-half-to-even(($global100Data//Global_100:GROSS_REVENUE/text() - ($global100Data//Global_100:PPP/text() * $global100Data//Global_100:NUM_EQUITY_PARTNERS/text())) div $global100Data//Global_100:NUM_LAWYERS/text(),0) else 0
		
		let $cpl := if(fn:not($AMLAW_200_NODE ne '') and fn:not($global100Data ne '') and fn:not($uk50Data ne '') and fn:not($china40 ne '')) then -1000
					else if($COSTPERLAWYER ne 0) then $COSTPERLAWYER else 
						 if($cplByGlobal100 ne 0) then $cplByGlobal100
						 else if($cplByUk50 ne 0) then $cplByUk50 
						 else if($cplByChina40 ne 0) then $cplByChina40 
						 else 0

		let $isAddMaxYear := if(xs:string($year) ne xs:string(max($years))) then 'y' else
							if($cpl ne 0 and $cpl ne -1000) then 'y' else 'n'			
		
		let $response-obj := json:object()
		let $_ := (
			map:put($response-obj, 'ORGANIZATION_ID', $OrganisationID),
			map:put($response-obj, 'ORGANIZATION_NAME', $ORGANIZATION_NAME),
			map:put($response-obj, 'COSTPERLAWYER', $cpl),
			map:put($response-obj, 'PUBLISHYEAR', $PUBLISHYEAR)
		)

		let $_ := if(xs:string($year) ne xs:string(max($years))) then json:array-push($response-arr,$response-obj) else
					if($maxYearData ne '' and $isAddMaxYear ne 'n') then json:array-push($response-arr,$response-obj) else()

		return()

	return $response-arr
};					

declare function firm:GetCostPerLawyerByYearPM($OrganisationID,$StartYear,$EndYear,$isDisplayGBP,$Interval)
{
	let $checkMergerData := firmnew:GetMergedFirmData($OrganisationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID

	let $IsDisplayGBP := if($isDisplayGBP ne '') then $isDisplayGBP else 'false'
	let $distinct-years := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('ascending'),
		cts:and-query((
			cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH,'1')
		)))                      

	

	let $years := if (fn:not($StartYear) and fn:not($EndYear)) then
			$distinct-years[last()-4 to last()]
		else 
		for $year in $distinct-years
			where ($year ge xs:integer($StartYear) and $year le xs:integer($EndYear))
			return $year (:fn:tokenize('2013,2014,2015,2016,2017',','):)
			
	let $yr := for $item in $years
				order by xs:integer($item) descending
				return $item		

	let $interval := if(xs:string($Interval) ne '') then if(xs:integer($Interval) gt 5) then $Interval else 5 else ()
	let $yearss := if(xs:string($interval) ne '') then $years[1 to xs:integer($interval)] else $years[1 to 5]


	let $response-arr := json:array()

	let $_ := for $year in $yearss
				let $PUBLISHYEAR := $year
				let $loopData := for $item in $checkMergerData//FirmData
									let $OrganisationID := $item//FirmID/text()
									let $ORGANIZATION_NAME := $item//FirmName/text()

									(: let $organization := cts:search(/organization,
															cts:and-query((
																cts:directory-query($config:DD-ORGANIZATION-PATH),
															cts:element-value-query(xs:QName('organization:ORGANIZATION_ID'),$OrganisationID)
															))) :)
															
									let $AMLAW_200_URI := fn:concat($config:DD-SURVEY-AMLAW_200-PATH,$OrganisationID,'.xml')
									let $AMLAW_200 := fn:doc($AMLAW_200_URI)//survey:YEAR
									let $response-obj := json:object()

									let $AMLAW_200_NODE := if(xs:string($IsDisplayGBP) ne 'true') then $AMLAW_200[@PublishYear = $year] else()
									
									let $uk50Data :=cts:search(/,
													cts:and-query((
														cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
														cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID)),
														cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
														)))[1]
									
									let $global100Data :=if(xs:string($IsDisplayGBP) ne 'true') then cts:search(/,
																			cts:and-query((
																				cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																				cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
																				cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
																				)))[1] else()
		
									(: let $ORGANIZATION_ID := $organization/organization:ORGANIZATION_ID/text()
									let $ORGANIZATION_NAME := if($organization/organization:ALM_NAME/text()) then 
											$organization/organization:ALM_NAME/text() 
										else $organization/organization:ORGANIZATION_NAME/text() :)
									
									let $COSTPERLAWYER := $AMLAW_200[1]
									
									let $COSTPERLAWYER := if(fn:sum($AMLAW_200_NODE//survey:NUM_OF_LAWYERS/text()) ne 0) then fn:round((xs:decimal(fn:sum($AMLAW_200_NODE//survey:GROSS_REVENUE/text())) - xs:decimal(fn:sum($AMLAW_200_NODE//survey:NET_OPERATING_INCOME/text()))) div xs:decimal(fn:sum($AMLAW_200_NODE//survey:NUM_OF_LAWYERS/text()))) else 0
									
									let $cplByUk50 := if($uk50Data//UK_50:NUMBER_OF_LAWYERS/text() ne '') then 
															if(xs:string($IsDisplayGBP) eq 'true') then fn:round-half-to-even((($uk50Data//UK_50:GROSS_REVENUE_POUND_M/text() * 1000000) - (($uk50Data//UK_50:PPP_POUND_K/text() * 1000) * $uk50Data//UK_50:NUMBER_OF_EQ_PARTNERS/text())) div $uk50Data//UK_50:NUMBER_OF_LAWYERS/text() ,2)
															else fn:round-half-to-even(($uk50Data//UK_50:GROSS_REVENUE_DOLLAR/text() - ($uk50Data//UK_50:PPP_DOLLAR/text() * $uk50Data//UK_50:NUMBER_OF_EQ_PARTNERS/text())) div $uk50Data//UK_50:NUMBER_OF_LAWYERS/text() ,2) 
													else ()
									
									let $cplByGlobal100 := if($global100Data//Global_100:GROSS_REVENUE/text() ne '') then fn:round-half-to-even(($global100Data//Global_100:GROSS_REVENUE/text() - ($global100Data//Global_100:PPP/text() * $global100Data//Global_100:NUM_EQUITY_PARTNERS/text())) div $global100Data//Global_100:NUM_LAWYERS/text(),0) else 0
									
									let $cpl := if(fn:not($AMLAW_200_NODE ne '') and fn:not($global100Data ne '') and fn:not($uk50Data ne '')) then 0
												else if($COSTPERLAWYER ne 0) then $COSTPERLAWYER else 
													if($cplByGlobal100 ne 0) then $cplByGlobal100
													else if($cplByUk50 ne 0) then $cplByUk50 else 0

											
									
									let $response-obj := json:object()
									let $_ := (
										map:put($response-obj, 'ORGANIZATION_ID', $OrganisationID),
										map:put($response-obj, 'ORGANIZATION_NAME', $ORGANIZATION_NAME),
										map:put($response-obj, 'COSTPERLAWYER', $cpl),
										map:put($response-obj, 'PUBLISHYEAR', $PUBLISHYEAR)
									)

									let $_ := json:array-push($response-arr,$response-obj)
									return()
									return()
	return $response-arr
};								

declare function firm:GetLawfirmReports($firmID)
{
	let $S_LISTINGS :=for $x in cts:search(/SURVEYLISTING,
		cts:and-query((
			cts:directory-query($config:DD-SURVEY-LISTING-PATH),
			cts:not-query(cts:element-value-query(xs:QName('survey-listing:TABLENAME'),''))
		)))
		
		
		return element {'RESULT'} {
			attribute {'xmlns'} {'http://alm.com/LegalCompass/dd/survey-listing'},
			$x/survey-listing:TABLENAME,
			$x/survey-listing:SURVEYLISTINGID,
			$x/survey-listing:NAME
		}

	let $year := (:fn:max(cts:element-attribute-values(xs:QName('survey:YEAR'), xs:QName('PublishYear'),(),('descending'),cts:directory-query($config:DD-SURVEY-AMLAW_100-PATH))):)
							cts:element-attribute-values(xs:QName("survey:YEAR"),xs:QName("PublishYear"),(),("descending"),
						  cts:and-query((
							cts:directory-query("/LegalCompass/denormalized-data/surveys/AMLAW_200/","1")
						  )))[1 to 2]

			  
	let $response-arr := json:array()

	let $checkMergerData := firmnew:GetLawFirmMergerData($firmID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$firmID),',') else $firmID

	(: let $uk50Data := cts:search(/,
					cts:and-query((
					cts:directory-query($directory),
					cts:element-value-query(xs:QName('UK50:ORGANIZATION_ID'),$orgIDs),
					cts:element-value-query(xs:QName('UK50:PUBLISHYEAR'),$year)
				)))[1]			 :)

	let $response := for $S_LISTING in $S_LISTINGS

		let $TABLENAME := $S_LISTING/survey-listing:TABLENAME/text()
		let $NAME := $S_LISTING/survey-listing:NAME/text()
		let $SURVEYLISTINGID := $S_LISTING/survey-listing:SURVEYLISTINGID/text()
		let $resObj := json:object()

		let $directory :=  if (fn:upper-case($TABLENAME) = fn:upper-case('ALIST')) then (
				element {'PATH'} {$config:DD-SURVEY-ALIST-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('AMLAW_200')) then (
				element {'PATH'} {$config:DD-SURVEY-AMLAW_200-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('Legal_Times_150')) then (
				element {'PATH'} {$config:DD-SURVEY-LEGAL_TIMES_150-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('Tech_Scorecard')) then (
				element {'PATH'} {$config:DD-SURVEY-TECH_SCORECARD-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('NY100')) then (
				element {'PATH'} {$config:DD-SURVEY-NY100-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('Who_Counsels_who')) then (
				element {'PATH'} {$config:DD-SURVEY-WHO_COUNSELS_WHO-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('DC20')) then (
				element {'PATH'} {$config:DD-SURVEY-DC20-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('LAWFIRMVALUATIONS')) then (
				element {'PATH'} {$config:DD-SURVEY-LAWFIRMVALUATIONS-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('Billing_Survey_Florida')) then (
				element {'PATH'} {$config:DD-SURVEY-BILLING_SURVEY_FLORIDA-PATH}
			)
			  else if (fn:upper-case($TABLENAME) = fn:upper-case('Global_100')) then (
				element {'PATH'} {$config:DD-SURVEY-GLOBAL_100-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('AMLAW_100')) then (
				element {'PATH'} {$config:DD-SURVEY-AMLAW_100-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('LAWFIRM_MERGERS')) then (
				element {'PATH'} {$config:RD-SURVEY-LAWFIRM_MERGERS-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('Associate_natl')) then (
				element {'PATH'} {$config:DD-SURVEY-ASSOCIATE_NATL-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('NLJ_LGBT')) then (
				element {'PATH'} {$config:DD-SURVEY-NLJ_LGBT-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('NLJ_250')) then (
				element {'PATH'} {$config:DD-SURVEY-NLJ_250-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('Pro_Bono')) then (
				element {'PATH'} {$config:DD-SURVEY-PRO_BONO-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('NLJ_Staffing')) then (
				element {'PATH'} {$config:DD-SURVEY-NLJ_STAFFING-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('Associate_summer_survey')) then (
				element {'PATH'} {$config:DD-SURVEY-ASSOCIATE_SUMMER_SURVEY-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('Corporate_scorecard')) then (
				element {'PATH'} {$config:DD-SURVEY-CORPORATE_SCORECARD-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('Diversity_Scorecard')) then (
				element {'PATH'} {$config:DD-SURVEY-DIVERSITY_SCORECARD-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('TX100')) then (
				element {'PATH'} {$config:DD-SURVEY-TX100-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('FEMALE_SCORECARD')) then (
				element {'PATH'} {$config:DD-SURVEY-FEMALE_SCORECARD-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('Lateral_Partner')) then (
				element {'PATH'} {$config:DD-SURVEY-LATERAL_PARTNER-PATH}
			)
			else if (fn:upper-case($TABLENAME) = fn:upper-case('Lateral_Partner')) then (
				element {'PATH'} {$config:DD-SURVEY-LATERAL_PARTNER-PATH}
			)

			else ()

		let $obj := if($directory) then cts:search(/,
											cts:and-query((
												cts:directory-query($directory),
												if($directory eq '/LegalCompass/relational-data/surveys/LAWFIRM_MERGERS/') then cts:element-value-query(xs:QName('LawFirmMergers:NEW_FIRM_ID'),$orgIDs) else cts:element-attribute-value-query(xs:QName('survey:YEAR'), xs:QName('OrganizationID'),$orgIDs),
												if($directory eq '/LegalCompass/relational-data/surveys/LAWFIRM_MERGERS/') then cts:element-value-query(xs:QName('LawFirmMergers:PUBLISHYEAR'),(xs:string($year[1]),xs:string($year[2])))
												else cts:element-attribute-value-query(xs:QName('survey:YEAR'), xs:QName('PublishYear'),(xs:string($year[1]),xs:string($year[2])))
												(:else cts:element-attribute-value-query(xs:QName('survey:YEAR'), xs:QName('PublishYear'),xs:string($year)):)
											)))[1] else()

			(: let $node := if ($record) then (
				element {'RECORD'} {
					 element {'Organization_Id'} {xs:string($orgIDs[1])}
					,element {'SurveyName'} {fn:upper-case($NAME)}
					,element {'Survey_Id'} {$SURVEYLISTINGID}
				}
			) :)

		let $_ := (
					map:put($resObj,'Organization_Id',xs:string($orgIDs[1])),
					map:put($resObj,'SurveyName',fn:upper-case($NAME)),
					map:put($resObj,'Survey_Id',$SURVEYLISTINGID)
				  )

		let $_ := if($obj) then json:array-push($response-arr,$resObj) else()
		return()

	let $resObj := json:object()
	let $china40Data := cts:search(/,
					cts:and-query((
					cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/'),
					cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),$orgIDs),
					cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),($year ! fn:string(.)))
				)))[1]


	let $_ := (
					map:put($resObj,'Organization_Id',xs:string($orgIDs[1])),
					map:put($resObj,'SurveyName','CHINA 40'),
					map:put($resObj,'Survey_Id',109)
				)

	let $_ := if($china40Data) then json:array-push($response-arr,$resObj) else()				

	let $resObj := json:object()
	let $uk50Data := cts:search(/,
					cts:and-query((
					cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/'),
					cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$orgIDs),
					cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),($year ! fn:string(.)))
				)))[1]


	let $_ := (
					map:put($resObj,'Organization_Id',xs:string($orgIDs[1])),
					map:put($resObj,'SurveyName','UK 100'),
					map:put($resObj,'Survey_Id',259)
				)

	let $_ := if($uk50Data) then json:array-push($response-arr,$resObj) else()

	return $response-arr	
};

declare function firm:GetTotalHeadCountPostMerger($request)
{
	let $OrganisationID := $request/OrganisationID/text()
	let $StartYear := $request/StartYear/text()
	let $EndYear := $request/EndYear/text()
	let $Interval := if($request//Interval/text() ne '') then if(xs:integer($request//Interval/text()) gt 5) then $request//Interval/text() else 4 else ''


	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $data := if($checkMergerData != '') then firm:GetTotalHeadCountPM($OrganisationID,$StartYear,$EndYear,$Interval)
				 else firm:GetTotalHeadCount($OrganisationID,$StartYear,$EndYear,$Interval)

	return $data			 
};

declare function firm:GetTotalHeadCount(
	 $OrganisationID
	,$StartYear 
	,$EndYear
	,$Interval
)
{
	let $StartYear := ''
	let $EndYear := ''
	let $org := cts:search(/organization,
		cts:and-query((
			cts:directory-query($config:DD-ORGANIZATION-PATH),
			cts:element-value-query(xs:QName('organization:ORGANIZATION_ID'),$OrganisationID)
		)))[1]

	let $response-arr := json:array()

	let $res := if (($StartYear) and ($EndYear)) then (
		(: let $survey-data := cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-NLJ_250-PATH),
				cts:element-attribute-range-query(xs:QName('survey:YEAR'), xs:QName('PublishYear'), '>=', $StartYear),
				cts:element-attribute-range-query(xs:QName('survey:YEAR'), xs:QName('PublishYear'), '<=', $EndYear),
				cts:element-attribute-value-query(xs:QName('survey:YEAR'), xs:QName('OrganizationID'),xs:string($OrganisationID))
			))) :)
		let $survey-data := cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/','1'),
									cts:element-range-query(xs:QName('nlj250:PUBLISHYEAR'),'>=',xs:integer($StartYear)),
									cts:element-range-query(xs:QName('nlj250:PUBLISHYEAR'),'<=',xs:integer($EndYear)),
									cts:element-value-query(xs:QName('nlj250:ORGANIZATION_ID'),xs:string($OrganisationID))
									)))

		let $_ := for $item in $survey-data
			let $response-obj := json:object()
			let $ORGANIZATION_NAME := if ($org/organization:ALM_NAME ne '') then $org/organization:ALM_NAME/text() else $org/organization:ORGANIZATION_NAME/text()
			let $_ := (
				map:put($response-obj, 'Organization_Id', $item//nlj250:ORGANIZATION_ID/text()),
				map:put($response-obj, 'Organization_Name', $ORGANIZATION_NAME),
				map:put($response-obj, 'Count', $item//nlj250:NUM_ATTORNEYS/text()),
				map:put($response-obj, 'TotalCount', $item//nlj250:NUM_ATTORNEYS/text()),
				map:put($response-obj, 'Publishyear', $item//nlj250:PUBLISHYEAR/text())
			)
			let $_ := json:array-push($response-arr,$response-obj)
			return $item

		return ()
	)
	else (

		let $interval := if(xs:string($Interval) ne '') then xs:integer($Interval) else 4
		
		let $year := (fn:max(cts:element-attribute-values(xs:QName('survey:YEAR'), xs:QName('PublishYear'), (), ('descending'), 
			cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH))))

		let $loopData := for $item in (xs:integer($year) - 4 to xs:integer($year))
							let $amlaw200maxYearData := cts:search(//survey:YEAR,
															cts:and-query((
																cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/')
																,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganisationID)
																,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($item))
															)))[1]


							

							let $uk50maxYearData := cts:search(/,
								cts:and-query((
									cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
									cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($item)),
									cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
								)))[1]		

							let $global100maxYearData := cts:search(/,
								cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
									cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($item)),
									cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
								)))[1]	

							let $china40 :=cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($item)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]	
															

							let $response-obj := json:object()
							let $ORGANIZATION_NAME := if ($org/organization:ALM_NAME ne '') then $org/organization:ALM_NAME/text() else $org/organization:ORGANIZATION_NAME/text()
							let $num_attorneys := if($amlaw200maxYearData//survey:NUM_ATTORNEYS/text() ne '') then $amlaw200maxYearData//survey:NUM_ATTORNEYS/text() 
												else if($global100maxYearData//Global_100:NUM_LAWYERS/text() ne '') then $global100maxYearData//Global_100:NUM_LAWYERS/text()
												else if($uk50maxYearData//UK_50:NUMBER_OF_LAWYERS/text() ne '') then $uk50maxYearData//UK_50:NUMBER_OF_LAWYERS/text() 
												else if($china40//CHINA_40:FIRMWIDE_LAWYERS/text() ne '') then $china40//CHINA_40:FIRMWIDE_LAWYERS/text()
												else 0
							let $_ := (
								map:put($response-obj, 'Organization_Id', $OrganisationID),
								map:put($response-obj, 'Organization_Name', $ORGANIZATION_NAME),
								map:put($response-obj, 'Count', $num_attorneys),
								map:put($response-obj, 'TotalCount', $num_attorneys),
								map:put($response-obj, 'Publishyear', $item)
							)
							let $_ := json:array-push($response-arr,$response-obj)
							

						return ()
						return()
	)

	return $response-arr
};

declare function firm:GetTotalHeadCountPM(
	 $OrganisationID
	,$StartYear
	,$EndYear
	,$Interval
)
{
	let $checkMergerData := firmnew:GetMergedFirmData($OrganisationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID

	let $org := cts:search(/organization,
		cts:and-query((
			cts:directory-query($config:DD-ORGANIZATION-PATH),
			cts:element-value-query(xs:QName('organization:ORGANIZATION_ID'),$orgIDs)
		)))//organization:ORGANIZATION_ID/text()

	let $response-arr := json:array()

	let $res := if (($StartYear) and ($EndYear)) then (
		let $data := for $year in ($StartYear to $EndYear)
		let $loopData := for $item in $checkMergerData//FirmData
								let $OrganisationID := $item//FirmID/text()
								let $ORGANIZATION_NAME := $item//FirmName/text()

								let $amlaw200maxYearData := cts:search(//survey:YEAR,
									cts:and-query((
										cts:directory-query($config:DD-SURVEY-NLJ_250-PATH),
										(: cts:element-attribute-range-query(xs:QName('survey:YEAR'), xs:QName('PublishYear'), '>=', $StartYear), :)
										cts:element-attribute-value-query(xs:QName('survey:YEAR'), xs:QName('PublishYear'), xs:string($year)),
										cts:element-attribute-value-query(xs:QName('survey:YEAR'), xs:QName('OrganizationID'),xs:string($OrganisationID))
									)))

								let $uk50maxYearData := cts:search(/,
								cts:and-query((
									cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
									cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
									cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
								)))[1]		

							   let $global100maxYearData := cts:search(/,
									cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
										cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
										cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
									)))[1]

								let $china40 :=cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]	

							

								let $num_attorneys := if($amlaw200maxYearData//survey:NUM_ATTORNEYS/text() ne '') then $amlaw200maxYearData//survey:NUM_ATTORNEYS/text() 
												else if($global100maxYearData//Global_100:NUM_LAWYERS/text() ne '') then $global100maxYearData//Global_100:NUM_LAWYERS/text()
												else if($uk50maxYearData//UK_50:NUMBER_OF_LAWYERS/text() ne '') then $uk50maxYearData//UK_50:NUMBER_OF_LAWYERS/text() 
												else if($china40//CHINA_40:FIRMWIDE_LAWYERS/text() ne '') then $china40//CHINA_40:FIRMWIDE_LAWYERS/text()		
												else 0					

							
											let $response-obj := json:object()
											(: let $ORGANIZATION_NAME := if ($org1/organization:ALM_NAME ne '') then $org1/organization:ALM_NAME/text() else $org1/organization:ORGANIZATION_NAME/text() :)
											let $_ := (
												map:put($response-obj, 'Organization_Id', $OrganisationID),
												map:put($response-obj, 'Organization_Name', $ORGANIZATION_NAME),
												map:put($response-obj, 'Count', $num_attorneys),
												map:put($response-obj, 'TotalCount', $num_attorneys),
												map:put($response-obj, 'Publishyear', xs:integer($year))
											)

											let $_ := json:array-push($response-arr,$response-obj)
											 return () 
											return()

		return ()
	)
	else (

		let $interval := if(xs:string($Interval) ne '') then xs:integer($Interval) else 4
		let $minYear := (fn:max(cts:element-attribute-values(xs:QName('survey:YEAR'), xs:QName('PublishYear'), (), ('descending'), 
			cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH))) - $interval)
		let $maxYear := (fn:max(cts:element-attribute-values(xs:QName('survey:YEAR'), xs:QName('PublishYear'), (), ('descending'), 
			cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH))))	

		let $data := for $year in ($minYear to $maxYear)
							let $loopData := for $item in $checkMergerData//FirmData
											let $OrganisationID := $item//FirmID/text()
											let $ORGANIZATION_NAME := $item//FirmName/text()
											let $amlaw200maxYearData := cts:search(//survey:YEAR,
																	cts:and-query((
																		cts:directory-query($config:DD-SURVEY-NLJ_250-PATH),
																		cts:element-attribute-value-query(xs:QName('survey:YEAR'), xs:QName('PublishYear'), xs:string($year)),
																		cts:element-attribute-value-query(xs:QName('survey:YEAR'), xs:QName('OrganizationID'),xs:string($OrganisationID))
																	)))[1]

											let $uk50maxYearData := cts:search(/,
													cts:and-query((
														cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
														cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
														cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]		

											let $global100maxYearData := cts:search(/,
														cts:and-query((
															cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
															cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
															cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
														)))[1]	

											let $china40 :=cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]	

							

											let $num_attorneys := if($amlaw200maxYearData//survey:NUM_ATTORNEYS/text() ne '') then $amlaw200maxYearData//survey:NUM_ATTORNEYS/text() 
																	else if($global100maxYearData//Global_100:NUM_LAWYERS/text() ne '') then $global100maxYearData//Global_100:NUM_LAWYERS/text()
																	else if($uk50maxYearData//UK_50:NUMBER_OF_LAWYERS/text() ne '') then $uk50maxYearData//UK_50:NUMBER_OF_LAWYERS/text() 
																	else if($china40//CHINA_40:FIRMWIDE_LAWYERS/text() ne '') then $china40//CHINA_40:FIRMWIDE_LAWYERS/text()			
																	else 0						

											let $org1 := cts:search(/organization,
																cts:and-query((
																	cts:directory-query($config:DD-ORGANIZATION-PATH),
																	cts:element-value-query(xs:QName('organization:ORGANIZATION_ID'),$OrganisationID)
																)))[1]						

											
												let $response-obj := json:object()
												(: let $ORGANIZATION_NAME := if ($org1/organization:ALM_NAME ne '') then $org1/organization:ALM_NAME/text() else $org1/organization:ORGANIZATION_NAME/text() :)
												let $_ := (
													map:put($response-obj, 'Organization_Id', xs:integer($OrganisationID)),
													map:put($response-obj, 'Organization_Name', $ORGANIZATION_NAME),
													map:put($response-obj, 'Count', if($num_attorneys) then $num_attorneys else 0),
													map:put($response-obj, 'TotalCount', $num_attorneys),
													map:put($response-obj, 'Publishyear', $year)
												)

												let $_ := json:array-push($response-arr,$response-obj)
												
												return ()
												return()

		return ()
	)

	return $response-arr
};

declare function firm:GeLawFirmProfileNewsData($OrganisationID,$fromDate,$toDate)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $firmID := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID

	return fn:count(cts:search(/DATA,
					cts:and-query((
						cts:directory-query($config:RD-DATA_TABLE-PATH),
						cts:element-value-query(xs:QName('data:company_id'),$firmID),
						cts:not-query(cts:element-word-query(xs:QName('data:std_date'),('','*0/0/*'),('wildcarded'))),
						cts:element-range-query(xs:QName('data:std_date'),'>=',xs:date($fromDate)),
						cts:element-range-query(xs:QName('data:std_date'),'<',xs:date($toDate))
					)))[1 to 5])
};

declare function firm:GetClientsNewCount($firmID,$fromDate,$toDate)
{

	let $checkMergerData := firmnew:GetLawFirmMergerData($firmID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$firmID),',') else $firmID
	
	let $fromYear := xs:integer(fn:format-date(xs:date($fromDate),'[Y0001]'))
	let $toYear := xs:integer(fn:format-date(xs:date($toDate),'[Y0001]'))

	let $WHO_COUNSELS_WHO := xdmp:estimate(cts:search(/SURVEY/survey:YEAR,
		cts:and-query((
			cts:directory-query($config:DD-SURVEY-WHO_COUNSELS_WHO-PATH),
			cts:element-value-query(xs:QName('survey:OUTSIDE_COUNSEL_ID'),$orgIDs),
			cts:element-range-query(xs:QName('survey:FISCAL_YEAR'),'>=',$fromYear),
			cts:element-range-query(xs:QName('survey:FISCAL_YEAR'),'<=',$toYear)
		))))
	let $partyAndQuery := cts:and-query((
			cts:directory-query($config:RD-BDBS_REPRESENTER-PATH),
			cts:element-value-query(xs:QName('bdbs-representer:ORGANIZATION_ID'),$orgIDs),
			cts:not-query(cts:element-value-query(xs:QName('bdbs-representer:PARTY_ID'),''))
		))
	let $PARTY_IDs := cts:values(cts:element-reference(xs:QName('bdbs-representer:PARTY_ID')),(),(),$partyAndQuery)
	
	(:cts:search(/bdbs-representer,
		cts:and-query((
			cts:directory-query($config:RD-BDBS_REPRESENTER-PATH),
			cts:element-value-query(xs:QName('bdbs-representer:ORGANIZATION_ID'),$firmID),
			cts:not-query(cts:element-value-query(xs:QName('bdbs-representer:PARTY_ID'),''))
		)))/bdbs-representer:PARTY_ID/text():)
	let $trandquery := cts:and-query((
			cts:directory-query($config:RD-BDBS_PARTY-PATH),
			cts:element-value-query(xs:QName('bdbs-party:PARTY_ID'),$PARTY_IDs!fn:string(.)),
			cts:not-query(cts:element-value-query(xs:QName('bdbs-party:TRANSACTION_ID'),''))
		))
	let $TRANSACTION_IDs := cts:values(cts:element-reference(xs:QName('bdbs-party:TRANSACTION_ID')),(),(),$trandquery)
	
	(:cts:search(/bdbs-party,
		cts:and-query((
			cts:directory-query($config:RD-BDBS_PARTY-PATH),
			cts:element-value-query(xs:QName('bdbs-party:PARTY_ID'),$PARTY_IDs),
			cts:not-query(cts:element-value-query(xs:QName('bdbs-party:TRANSACTION_ID'),''))
		)))/bdbs-party:TRANSACTION_ID/text():)

	let $TRANSACTION := xdmp:estimate(cts:search(/bdbs-transaction,
		cts:and-query((
			cts:directory-query($config:RD-BDBS_TRANSACTION-PATH),
			cts:element-value-query(xs:QName('bdbs-transaction:TRANSACTION_ID'),$TRANSACTION_IDs!fn:string(.)),
			cts:element-range-query(xs:QName('bdbs-transaction:YEAR'),'>=',$fromYear),
			cts:element-range-query(xs:QName('bdbs-transaction:YEAR'),'<=',$toYear)
		))))
	let $count := if($WHO_COUNSELS_WHO > 0 or $TRANSACTION >0) then 1 else 0
	return $count
};


declare function firm:GetClientsNewCount_bckp($firmID,$fromDate,$toDate)
{
	let $fromYear := xs:integer(fn:format-date(xs:date($fromDate),'[Y0001]'))
	let $toYear := xs:integer(fn:format-date(xs:date($toDate),'[Y0001]'))

	let $WHO_COUNSELS_WHO := cts:search(/SURVEY/survey:YEAR,
		cts:and-query((
			cts:directory-query($config:DD-SURVEY-WHO_COUNSELS_WHO-PATH),
			cts:element-value-query(xs:QName('survey:OUTSIDE_COUNSEL_ID'),$firmID),
			cts:element-range-query(xs:QName('survey:FISCAL_YEAR'),'>=',$fromYear),
			cts:element-range-query(xs:QName('survey:FISCAL_YEAR'),'<=',$toYear)
		)))/survey:WHOCOUNSELSWHO_SOURCE

	let $PARTY_IDs := cts:search(/bdbs-representer,
		cts:and-query((
			cts:directory-query($config:RD-BDBS_REPRESENTER-PATH),
			cts:element-value-query(xs:QName('bdbs-representer:ORGANIZATION_ID'),$firmID),
			cts:not-query(cts:element-value-query(xs:QName('bdbs-representer:PARTY_ID'),''))
		)))/bdbs-representer:PARTY_ID/text()

	let $TRANSACTION_IDs := cts:search(/bdbs-party,
		cts:and-query((
			cts:directory-query($config:RD-BDBS_PARTY-PATH),
			cts:element-value-query(xs:QName('bdbs-party:PARTY_ID'),$PARTY_IDs),
			cts:not-query(cts:element-value-query(xs:QName('bdbs-party:TRANSACTION_ID'),''))
		)))/bdbs-party:TRANSACTION_ID/text()

	let $TRANSACTION := cts:search(/bdbs-transaction,
		cts:and-query((
			cts:directory-query($config:RD-BDBS_TRANSACTION-PATH),
			cts:element-value-query(xs:QName('bdbs-transaction:TRANSACTION_ID'),$TRANSACTION_IDs),
			cts:element-range-query(xs:QName('bdbs-transaction:YEAR'),'>=',$fromYear),
			cts:element-range-query(xs:QName('bdbs-transaction:YEAR'),'<=',$toYear)
		)))/bdbs-transaction:TRANSACTION_ID

	return fn:count(($TRANSACTION,$WHO_COUNSELS_WHO))
};

declare function firm:GetRELawFirmPracticeareaCount($firmID)
{
  let $RE_ID := firm:GetREIdByOrgId($firmID)

  let $data := element {'RESULT'} {
      for $practice_area in cts:element-values(xs:QName('practices_kws:practice_area'))
        let $key := fn:concat('*',$practice_area,'*')
        let $result := cts:search(/person,
            cts:and-query((
              cts:collection-query($config:RD-PEOPLE-COLLECTION),
              cts:directory-query($config:RD-PEOPLE-PATH),
              cts:element-value-query(xs:QName('rd_person:company'),$RE_ID),
              cts:element-word-query(xs:QName('rd_person:std_practices'),$key,('wildcarded','case-insensitive')),
              cts:not-query(cts:element-value-query(xs:QName('rd_person:std_practices'),''))
            )))[1]

        return if ($result) then element {'RECORD'} { $practice_area } else ()
    }

  return fn:count($data/RECORD)
};

declare function firm:GetRELawFirmLocationCountPostMerger($firmID)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($firmID)

	let $data := if($checkMergerData != '') then firm:GetRELawFirmLocationCountPM($firmID) else firm:GetRELawFirmLocationCount($firmID)
	return $data
};

declare function firm:GetRELawFirmLocationCountPM($firmID)
{

	let $checkMergerData := firmnew:GetLawFirmMergerData($firmID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$firmID),',') else $firmID

	let $RE_ID := firm:GetREIdByOrgId1($orgIDs)
	
	let $count := if ($RE_ID) then
		
		(: let $company := fn:doc(fn:concat($config:RD-COMPANY-PATH,$RE_ID,'.xml'))/* :)
		
		let $std_locs := cts:element-values(xs:QName('dd_person:std_loc'),(),(),
			cts:and-query((
				 cts:directory-query($config:DD-PEOPLE-PATH)
				,cts:element-value-query(xs:QName('dd_person:company'),$RE_ID)
			)))
			
		let $data := element {'RESULT'} {
			
			for $std_loc in $std_locs
				
				let $person := cts:search(/person,
					cts:and-query((
						cts:directory-query($config:DD-PEOPLE-PATH)
						,cts:element-value-query(xs:QName('dd_person:company'),$RE_ID)
						,cts:element-value-query(xs:QName('dd_person:std_loc'),$std_loc)
					)))[1]
				
				let $city := cts:search(/city,
					cts:and-query((
						cts:directory-query($config:RD-CITY-PATH)
						,cts:element-value-query(xs:QName('city:std_loc'),$std_loc,('case-insensitive'))
						,cts:not-query(cts:element-value-query(xs:QName('city:country'),''))
					)))[1]

				return if ($city) then
					element {'RECORD'}{''}
				else ()
        }  

      return fn:count($data/RECORD)

    else 0

	return $count

};

declare function firm:GetRELawFirmLocationCount($firmID)
{
	let $RE_ID := firm:GetREIdByOrgId($firmID)
	
	let $count := if ($RE_ID) then
		
		let $company := fn:doc(fn:concat($config:RD-COMPANY-PATH,$RE_ID,'.xml'))/*
		
		let $std_locs := cts:element-values(xs:QName('dd_person:std_loc'),(),(),
			cts:and-query((
				 cts:directory-query($config:DD-PEOPLE-PATH)
				,cts:element-value-query(xs:QName('dd_person:company'),$RE_ID)
			)))
			
		let $data := element {'RESULT'} {
			
			for $std_loc in $std_locs
				
				let $person := cts:search(/person,
					cts:and-query((
						cts:directory-query($config:DD-PEOPLE-PATH)
						,cts:element-value-query(xs:QName('dd_person:company'),$RE_ID)
						,cts:element-value-query(xs:QName('dd_person:std_loc'),$std_loc)
					)))[1]
				
				let $city := cts:search(/city,
					cts:and-query((
						cts:directory-query($config:RD-CITY-PATH)
						,cts:element-value-query(xs:QName('city:std_loc'),$std_loc,('case-insensitive'))
						,cts:not-query(cts:element-value-query(xs:QName('city:country'),''))
					)))[1]

				return if ($city) then
					element {'RECORD'}{''}
				else ()
        }  

      return fn:count($data/RECORD)

    else 0

	return $count

};

declare function firm:GetLawfirmLocations(
	$firmID as xs:string
)
{
	let $RE_ID := firm:GetREIdByOrgId($firmID)

	let $response-arr := json:array()

	let $_ := if ($RE_ID) then

		let $company := fn:doc(fn:concat($config:RD-COMPANY-PATH,$RE_ID,'.xml'))/*

		let $std_locs := cts:element-values(xs:QName('dd_person:std_loc'),(),(),
			cts:and-query((
				cts:directory-query($config:DD-PEOPLE-PATH),
				cts:element-value-query(xs:QName('dd_person:company'),$RE_ID)
			)))

		let $_ := for $std_loc in $std_locs

			let $person := cts:search(/person,
				cts:and-query((
					cts:directory-query($config:DD-PEOPLE-PATH),
					cts:element-value-query(xs:QName('dd_person:company'),$RE_ID),
					cts:element-value-query(xs:QName('dd_person:std_loc'),$std_loc)
				)))

			let $city := cts:search(/city,
				cts:and-query((
					cts:directory-query($config:RD-CITY-PATH),
					cts:element-value-query(xs:QName('city:std_loc'),$std_loc,('case-insensitive')),
					cts:not-query(cts:element-value-query(xs:QName('city:country'),''))
				)))[1]

			let $_ := if($city) then

				let $response-obj := json:object()

				let $FirmName := $company/company:company/text()
				let $City := $city/city:city/text()
				let $State := $city/city:state/text()
				let $Country := $city/city:country/text()
				let $CountryType := if (fn:lower-case($Country) = 'usa') then 'USA' else 'Other'
				let $NoofAttorneys := fn:count($person/dd_person:std_title[. = ('Partner','Associate','Other Counsel/Attorney')])
				let $NoofPartners := fn:count($person/dd_person:std_title[. = ('Partner')])
				let $EquityPartners := ''
				let $NonEquityPartners := ''
				let $Associates := fn:count($person/dd_person:std_title[. = ('Associate')])
				let $OtherAttorneys := fn:count($person/dd_person:std_title[fn:lower-case(.) = 'other'])

				let $_ := (
					map:put($response-obj, 'FirmName',$FirmName),
					map:put($response-obj, 'BranchOffice',$std_loc),
					map:put($response-obj, 'City',$City),
					map:put($response-obj, 'FirmId',$RE_ID),
					map:put($response-obj, 'State',$State),
					map:put($response-obj, 'Country',$Country),
					map:put($response-obj, 'CountryType',$CountryType),
					map:put($response-obj, 'NoofAttorneys',$NoofAttorneys),
					map:put($response-obj, 'NoofPartners',$NoofPartners),
					map:put($response-obj, 'EquityPartners',$EquityPartners),
					map:put($response-obj, 'NonEquityPartners',$NonEquityPartners),
					map:put($response-obj, 'Associates',$Associates),
					map:put($response-obj, 'OtherAttorneys',$OtherAttorneys)
				)
				let $ _ := json:array-push($response-arr,$response-obj)
				return ()
			else ()

			return ()

		return ()

	else
		let $fiscal_year := fn:max(cts:element-values(xs:QName('organization-branch:FISCAL_YEAR')))

		let $organizations := cts:search(/organization-branch,
			cts:and-query((
				cts:directory-query($config:RD-ORGANIZATION_BRANCH-PATH),
				cts:element-value-query(xs:QName('organization-branch:ORGANIZATION_ID'),$firmID),
				cts:element-value-query(xs:QName('organization-branch:FISCAL_YEAR'),xs:string($fiscal_year))
			)))

		let $_ := for $organization in $organizations
			let $response-obj := json:object()

			let $FirmName := $organization/organization-branch:ORGANIZATION_NAME/text()
			let $BranchOffice := $organization/organization-branch:BRANCH_NAME/text()
			let $City := $organization/organization-branch:CITY/text()
			let $FirmId := $organization/organization-branch:ORGANIZATION_ID /text()
			let $State := $organization/organization-branch:STATE/text()
			let $Country := $organization/organization-branch:COUNTRY/text()
			let $CountryType := if(fn:lower-case($Country) = 'usa') then 'USA' else 'Other'
			let $NoofAttorneys := $organization/organization-branch:NUM_ATTORNEYS/text()
			let $NoofPartners := $organization/organization-branch:TOTAL_PARTNERS/text()
			let $EquityPartners := $organization/organization-branch:EQUITY_PARTNERS/text()
			let $NonEquityPartners := $organization/organization-branch:NON_EQUITY_PARTNERS/text()
			let $Associates := $organization/organization-branch:ASSOCIATES/text()
			let $OtherAttorneys := $organization/organization-branch:OTHER_ATTORNEYS/text()

			let $_ := (
				map:put($response-obj, 'FirmName',$FirmName),
				map:put($response-obj, 'BranchOffice',$BranchOffice),
				map:put($response-obj, 'City',$City),
				map:put($response-obj, 'FirmId',$FirmId),
				map:put($response-obj, 'State',$State),
				map:put($response-obj, 'Country',$Country),
				map:put($response-obj, 'CountryType',$CountryType),
				map:put($response-obj, 'NoofAttorneys',$NoofAttorneys),
				map:put($response-obj, 'NoofPartners',$NoofPartners),
				map:put($response-obj, 'EquityPartners',$EquityPartners),
				map:put($response-obj, 'NonEquityPartners',$NonEquityPartners),
				map:put($response-obj, 'Associates',$Associates),
				map:put($response-obj, 'OtherAttorneys',$OtherAttorneys)
			)

			let $_ := json:array-push($response-arr,$response-obj)
			return ()

		return ()

	return $response-arr
};

declare function firm:GetLawFirmPracticeareaPostMerger(
	$firmID as xs:string
)
{
	let $checkMergerData := firmnew:GetLawFirmMergerDataForOverview($firmID)

	let $data := if($checkMergerData != '') then firm:GetLawFirmPracticeareaPM($firmID) else firm:GetLawFirmPracticearea($firmID)
	return $data
};

declare function firm:GetLawFirmPracticeareaPM(
	$firmID as xs:string
)
{
	let $checkMergerData := firmnew:GetLawFirmMergerDataForOverview($firmID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$firmID),',') else $firmID	

	let $RE_ID := firm:GetREIdByOrgId1($orgIDs)

	let $response-arr := json:array()
	
	let $response := for $practice_area in cts:element-values(xs:QName('practices_kws:practice_area'))
		
		(: let $key := fn:concat('*',$practice_area,'*') :)
    let $key := $practice_area
		let $result := xdmp:estimate(cts:search(/person,
			cts:and-query((
			cts:collection-query($config:RD-PEOPLE-COLLECTION),
				cts:directory-query($config:RD-PEOPLE-PATH),
				cts:element-value-query(xs:QName('rd_person:company'),$RE_ID),
				cts:element-word-query(xs:QName('rd_person:practice_area'),$key,('wildcarded','case-insensitive')),
				cts:not-query(cts:element-value-query(xs:QName('rd_person:std_practices'),'')),
				cts:element-value-query(xs:QName('rd_person:std_title'), ('Partner','Associate','Other Counsel/Attorney'))
			))))
    
		let $HeadCount := ($result)
		let $PartnerCount := xdmp:estimate(cts:search(/person,
			cts:and-query((
			cts:collection-query($config:RD-PEOPLE-COLLECTION),
				cts:directory-query($config:RD-PEOPLE-PATH),
				cts:element-value-query(xs:QName('rd_person:company'),$RE_ID),
        cts:element-value-query(xs:QName('rd_person:std_title'), 'Partner'),
				cts:element-word-query(xs:QName('rd_person:practice_area'),$key,('wildcarded','case-insensitive')),
				cts:not-query(cts:element-value-query(xs:QName('rd_person:std_practices'),''))
			))))
      
		let $AssociateCount := xdmp:estimate(cts:search(/person,
			cts:and-query((
			cts:collection-query($config:RD-PEOPLE-COLLECTION),
				cts:directory-query($config:RD-PEOPLE-PATH),
				cts:element-value-query(xs:QName('rd_person:company'),$RE_ID),
        cts:element-value-query(xs:QName('rd_person:std_title'), 'Associate'),
				cts:element-word-query(xs:QName('rd_person:practice_area'),$key,('wildcarded','case-insensitive')),
				cts:not-query(cts:element-value-query(xs:QName('rd_person:std_practices'),''))
			))))
      
		let $OtherCounselCount := xdmp:estimate(cts:search(/person,
			cts:and-query((
			cts:collection-query($config:RD-PEOPLE-COLLECTION),
				cts:directory-query($config:RD-PEOPLE-PATH),
				cts:element-value-query(xs:QName('rd_person:company'),$RE_ID),
        cts:element-value-query(xs:QName('rd_person:std_title'), 'Other Counsel/Attorney'),
				cts:element-word-query(xs:QName('rd_person:practice_area'),$key,('wildcarded','case-insensitive')),
				cts:not-query(cts:element-value-query(xs:QName('rd_person:std_practices'),''))
			))))

		let $AdminCount := xdmp:estimate(cts:search(/person,
			cts:and-query((
			cts:collection-query($config:RD-PEOPLE-COLLECTION),
				cts:directory-query($config:RD-PEOPLE-PATH),
				cts:element-value-query(xs:QName('rd_person:company'),$RE_ID),
        cts:element-value-query(xs:QName('rd_person:std_title'), 'Administrative / Support Staff'),
				cts:element-word-query(xs:QName('rd_person:practice_area'),$key,('wildcarded','case-insensitive')),
				cts:not-query(cts:element-value-query(xs:QName('rd_person:std_practices'),''))
			))))
      
		let $OtherCount := xdmp:estimate(cts:search(/person,
			cts:and-query((
			cts:collection-query($config:RD-PEOPLE-COLLECTION),
				cts:directory-query($config:RD-PEOPLE-PATH),
				cts:element-value-query(xs:QName('rd_person:company'),$RE_ID),
        cts:element-value-query(xs:QName('rd_person:std_title'), 'Other'),
				cts:element-word-query(xs:QName('rd_person:practice_area'),$key,('wildcarded','case-insensitive')),
				cts:not-query(cts:element-value-query(xs:QName('rd_person:std_practices'),''))
			))))

		let $obj := if ($HeadCount > 0) then 
			element {'RECORD'} {
				element {'Practicearea'} {$practice_area},
				element {'HeadCount'} {$HeadCount},
				element {'PartnerCount'} {$PartnerCount},
				element {'FirmID'} {$RE_ID[1]},
				element {'AssociateCount'} {$AssociateCount},
				element {'OtherCounselCount'} {$OtherCounselCount},
				element {'AdminCount'} {$AdminCount},
				element {'OtherCount'} {0}
			}
		else ()
		
		order by $HeadCount descending, $practice_area descending
		
		return $obj
		
	let $response := element {'RESULT'} {$response}
	
	let $custom :=
		let $config := json:config('custom')
		let $_ := map:put( $config, 'whitespace', 'ignore' )
		let $_ := map:put( $config, 'array-element-names', ('RECORD') )
		return $config
	
	let $response := xdmp:to-json-string(json:transform-to-json($response, $custom)//RECORD)

	return $response
};

declare function firm:GetLawFirmPracticearea(
	$firmID as xs:string
)
{
	
	let $RE_ID := firm:GetREIdByOrgId($firmID)

	let $response-arr := json:array()
	
	let $response := for $practice_area in cts:element-values(xs:QName('practices_kws:practice_area'))
		
		(: let $key := fn:concat('*',$practice_area,'*') :)
    let $key := $practice_area
		let $result := xdmp:estimate(cts:search(/person,
			cts:and-query((
			cts:collection-query($config:RD-PEOPLE-COLLECTION),
				cts:directory-query($config:RD-PEOPLE-PATH),
				cts:element-value-query(xs:QName('rd_person:company'),$RE_ID),
				cts:element-word-query(xs:QName('rd_person:practice_area'),$key,('wildcarded','case-insensitive')),
				cts:not-query(cts:element-value-query(xs:QName('rd_person:std_practices'),'')),
				cts:element-value-query(xs:QName('rd_person:std_title'), ('Partner','Associate','Other Counsel/Attorney'))
			))))
    
		let $HeadCount := ($result)
		let $PartnerCount := xdmp:estimate(cts:search(/person,
			cts:and-query((
			cts:collection-query($config:RD-PEOPLE-COLLECTION),
				cts:directory-query($config:RD-PEOPLE-PATH),
				cts:element-value-query(xs:QName('rd_person:company'),$RE_ID),
        cts:element-value-query(xs:QName('rd_person:std_title'), 'Partner'),
				cts:element-word-query(xs:QName('rd_person:practice_area'),$key,('wildcarded','case-insensitive')),
				cts:not-query(cts:element-value-query(xs:QName('rd_person:std_practices'),''))
			))))
      
		let $AssociateCount := xdmp:estimate(cts:search(/person,
			cts:and-query((
			cts:collection-query($config:RD-PEOPLE-COLLECTION),
				cts:directory-query($config:RD-PEOPLE-PATH),
				cts:element-value-query(xs:QName('rd_person:company'),$RE_ID),
        cts:element-value-query(xs:QName('rd_person:std_title'), 'Associate'),
				cts:element-word-query(xs:QName('rd_person:practice_area'),$key,('wildcarded','case-insensitive')),
				cts:not-query(cts:element-value-query(xs:QName('rd_person:std_practices'),''))
			))))
      
		let $OtherCounselCount := xdmp:estimate(cts:search(/person,
			cts:and-query((
			cts:collection-query($config:RD-PEOPLE-COLLECTION),
				cts:directory-query($config:RD-PEOPLE-PATH),
				cts:element-value-query(xs:QName('rd_person:company'),$RE_ID),
        cts:element-value-query(xs:QName('rd_person:std_title'), 'Other Counsel/Attorney'),
				cts:element-word-query(xs:QName('rd_person:practice_area'),$key,('wildcarded','case-insensitive')),
				cts:not-query(cts:element-value-query(xs:QName('rd_person:std_practices'),''))
			))))

		let $AdminCount := xdmp:estimate(cts:search(/person,
			cts:and-query((
			cts:collection-query($config:RD-PEOPLE-COLLECTION),
				cts:directory-query($config:RD-PEOPLE-PATH),
				cts:element-value-query(xs:QName('rd_person:company'),$RE_ID),
        cts:element-value-query(xs:QName('rd_person:std_title'), 'Administrative / Support Staff'),
				cts:element-word-query(xs:QName('rd_person:practice_area'),$key,('wildcarded','case-insensitive')),
				cts:not-query(cts:element-value-query(xs:QName('rd_person:std_practices'),''))
			))))
      
		let $OtherCount := xdmp:estimate(cts:search(/person,
			cts:and-query((
			cts:collection-query($config:RD-PEOPLE-COLLECTION),
				cts:directory-query($config:RD-PEOPLE-PATH),
				cts:element-value-query(xs:QName('rd_person:company'),$RE_ID),
        cts:element-value-query(xs:QName('rd_person:std_title'), 'Other'),
				cts:element-word-query(xs:QName('rd_person:practice_area'),$key,('wildcarded','case-insensitive')),
				cts:not-query(cts:element-value-query(xs:QName('rd_person:std_practices'),''))
			))))

		let $obj := if ($HeadCount > 0) then 
			element {'RECORD'} {
				element {'Practicearea'} {$practice_area},
				element {'HeadCount'} {$HeadCount},
				element {'PartnerCount'} {$PartnerCount},
				element {'FirmID'} {$RE_ID},
				element {'AssociateCount'} {$AssociateCount},
				element {'OtherCounselCount'} {$OtherCounselCount},
				element {'AdminCount'} {$AdminCount},
				element {'OtherCount'} {0}
			}
		else ()
		
		order by $HeadCount descending, $practice_area descending
		
		return $obj
		
	let $response := element {'RESULT'} {$response}
	
	let $custom :=
		let $config := json:config('custom')
		let $_ := map:put( $config, 'whitespace', 'ignore' )
		let $_ := map:put( $config, 'array-element-names', ('RECORD') )
		return $config
	
	let $response := xdmp:to-json-string(json:transform-to-json($response, $custom)//RECORD)

	return $response
};

declare function firm:GetLawfirmProfileRankingsPostMerger(
	$firmID as xs:string
)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($firmID)

	let $data := if($checkMergerData != '') then firm:GetLawfirmProfileRankingsPM($firmID) else firm:GetLawfirmProfileRankings($firmID)
	return $data

};

declare function firm:GetLawfirmProfileRankings(
	$firmID as xs:string
)
{
	let $conditions := (
		 cts:directory-query($config:DD-ORGANIZATION-SURVEY-PATH)
		,cts:element-value-query(xs:QName('firm-org:OrganizationID'),$firmID)
	)
	let $order-by := cts:index-order(cts:element-reference(xs:QName('firm-org:PUBLISHYEAR')),'descending')
	let $search := cts:search(/SURVEY, cts:and-query(($conditions)),$order-by)[1 to 10]
	
	let $response-arr := json:array()
	let $_ := for $res in $search
		let $response-obj := json:object()
		
		let $Year := $res/firm-org:PUBLISHYEAR/text()
		let $FirmName := fn:normalize-space($res/firm-org:OrganizationName/text())
		(: let $AMLaw200Rank := $res/firm-org:AMLAW200_RANK/text() :)
		let $AListRank := $res/firm-org:ALIST_RANK/text()
		(: let $Global100Rank := $res/firm-org:RANK_BY_GROSS_REVENUE/text() :)
		let $NLJ500Rank := $res/firm-org:NLJ250_RANK/text()
		let $NoofAttorneys := if ($res/firm-org:NUM_ATTORNEYS/text() != '') then $res/firm-org:NUM_ATTORNEYS/text() else $res/firm-org:NUM_OF_LAWYERS/text()
		let $Revenue := if ($res/firm-org:AMLAW_200_GROSS_REVENUE/text() != '') then $res/firm-org:AMLAW_200_GROSS_REVENUE/text() else $res/firm-org:Global_100_GROSS_REVENUE/text()
		let $IsAddedToCompareList := ''
		let $uk50Rank :=cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1'),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$firmID),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),$Year)
						)))[1]//UK_50:UK_50_RANK/text()

		let $Global100Rank :=cts:search(/,
												cts:and-query((
													cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/','1'),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$firmID),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),$Year)
												)))[1]//Global_100:RANK_BY_GROSS_REVENUE/text()

		let $AMLaw200Rank := cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
							cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$firmID),
							cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),$Year)
						)))[1]//AMLAW_200:AMLAW200_RANK/text()

		let $china40Rank :=cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/','1'),
							cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),$firmID),
							cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),$Year)
						)))[1]//CHINA_40:RANK_BY_GROSS_REVENUE/text()				

		let $_ := (
			map:put($response-obj,'TotalCount',''),
			map:put($response-obj,'IsAddedToCompareList',''),
			map:put($response-obj,'FirmName',$FirmName),
			map:put($response-obj,'FirmId',$firmID),
			map:put($response-obj,'Revenue',$Revenue),
			map:put($response-obj,'NoofAttorneys',$NoofAttorneys),
			map:put($response-obj,'Year',$Year),
			map:put($response-obj,'AMLaw200Rank',$AMLaw200Rank),
			map:put($response-obj,'NLJ500Rank',$NLJ500Rank),
			map:put($response-obj,'Global100Rank',$Global100Rank),
			map:put($response-obj,'AListRank',$AListRank),
			map:put($response-obj,'UK50Rank',$uk50Rank),
			map:put($response-obj,'China40Rank',$china40Rank)
		)

		let $_ := json:array-push($response-arr, $response-obj)
		return ()
	
	return $response-arr
};

declare function firm:GetLawfirmProfileRankingsPM($organizationID)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($organizationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$organizationID),',') else $organizationID	
	let $response-arr := json:array()
	
	let $loopData := for $firmID in $orgIDs
						let $conditions := (
							cts:directory-query($config:DD-ORGANIZATION-SURVEY-PATH)
							,cts:element-value-query(xs:QName('firm-org:OrganizationID'),$firmID)
						)
						let $order-by := cts:index-order(cts:element-reference(xs:QName('firm-org:PUBLISHYEAR')),'descending')
						let $search := cts:search(/SURVEY, cts:and-query(($conditions)),$order-by)[1 to 10]
						
						
						let $_ := for $res in $search
							let $response-obj := json:object()
							
							let $Year := $res/firm-org:PUBLISHYEAR/text()
							let $FirmName := fn:normalize-space($res/firm-org:OrganizationName/text())
							(: let $AMLaw200Rank := $res/firm-org:AMLAW200_RANK/text() :)
							let $AListRank := $res/firm-org:ALIST_RANK/text()
							(: let $Global100Rank := $res/firm-org:RANK_BY_GROSS_REVENUE/text() :)
							let $NLJ500Rank := $res/firm-org:NLJ250_RANK/text()
							let $NoofAttorneys := if ($res/firm-org:NUM_ATTORNEYS/text() != '') then $res/firm-org:NUM_ATTORNEYS/text() else $res/firm-org:NUM_OF_LAWYERS/text()
							let $Revenue := if ($res/firm-org:AMLAW_200_GROSS_REVENUE/text() != '') then $res/firm-org:AMLAW_200_GROSS_REVENUE/text() else $res/firm-org:Global_100_GROSS_REVENUE/text()
							let $IsAddedToCompareList := ''
							let $uk50Rank :=cts:search(/,
											cts:and-query((
												cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1'),
												cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$firmID),
												cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),$Year)
											)))[1]//UK_50:UK_50_RANK/text()
							
							let $Global100Rank :=cts:search(/,
												cts:and-query((
													cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/','1'),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$firmID),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),$Year)
												)))[1]//Global_100:RANK_BY_GROSS_REVENUE/text()

							let $AMLaw200Rank := cts:search(/,
											cts:and-query((
												cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
												cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$firmID),
												cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),$Year)
											)))[1]//AMLAW_200:AMLAW200_RANK/text()


							let $china40Rank :=cts:search(/,
												cts:and-query((
													cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/','1'),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),$firmID),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),$Year)
												)))[1]//CHINA_40:RANK_BY_GROSS_REVENUE/text()

							let $_ := (
								map:put($response-obj,'TotalCount',''),
								map:put($response-obj,'IsAddedToCompareList',''),
								map:put($response-obj,'FirmName',$FirmName),
								map:put($response-obj,'FirmId',$firmID),
								map:put($response-obj,'Revenue',$Revenue),
								map:put($response-obj,'NoofAttorneys',$NoofAttorneys),
								map:put($response-obj,'Year',$Year),
								map:put($response-obj,'AMLaw200Rank',$AMLaw200Rank),
								map:put($response-obj,'NLJ500Rank',$NLJ500Rank),
								map:put($response-obj,'Global100Rank',$Global100Rank),
								map:put($response-obj,'AListRank',$AListRank),
								map:put($response-obj,'UK50Rank',$uk50Rank),
								map:put($response-obj,'China40Rank',$china40Rank)
							)

							let $_ := json:array-push($response-arr, $response-obj)
							return ()
	return()						
	
	return $response-arr
};

declare function firm:GetLawfirmRevenueHeadCountChartPostMerger(
	$OrganisationID as xs:string,
	$type as xs:string
)
{
	let $checkMergerData := firmnew:GetLawFirmMergerDataForOverview($OrganisationID)

	let $data := if($checkMergerData != '') then firm:GetLawfirmRevenueHeadCountChartPM($OrganisationID,$type) else firm:GetLawfirmRevenueHeadCountChart($OrganisationID,$type)
	return $data
};

declare function firm:GetLawfirmRevenueHeadCountChartPM($OrganisationID,$type)
{
	let $checkMergerData := firmnew:GetLawFirmMergerDataForOverview($OrganisationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID
	let $mergedYear := if($checkMergerData != '') then firmnew:GetLawFirmMergerYear($OrganisationID) else -1000
	let $amlawYear := fn:distinct-values(cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/")
													   )))//AMLAW_200:PUBLISHYEAR/text())


	let $result-arr := json:array()

	let $loopData := for $firmID in $orgIDs
						

					let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$firmID,'.xml'))
					
					let $orgName := if((/organization[organization:ORGANIZATION_ID = xs:string($firmID)]/organization:ALM_NAME/text())[1] ne '')then 
														/organization[organization:ORGANIZATION_ID = xs:string($firmID)]/organization:ALM_NAME/text()[1]
														else 
														/organization[organization:ORGANIZATION_ID = xs:string($firmID)]/organization:ORGANIZATION_NAME/text()[1]
					
					let $orgName := cts:search(/,
										cts:and-query((
											cts:directory-query('/LegalCompass/relational-data/organization/'),
											cts:element-value-query(xs:QName('rd-organization:ORGANIZATION_ID'),$firmID)
										))
									)//rd-organization:ORGANIZATION_NAME/text()	
						
					
					let $years := for $item in $amlawYear
									order by xs:integer($item) descending
									return $item
					
					let $uk50ID := cts:search(/,
										cts:and-query((
											cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
											cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($firmID))
											)))//UK_50:ORGANIZATION_ID/text()

					

					let $_ := for $res in $years[1 to 10]
									let $result-obj := json:object()
									let $PublishYear := $res
									
									let $uk50IDCurrentYear := if($uk50ID != '') then cts:search(/,
																			cts:and-query((
																				cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																				cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($PublishYear)),
																				cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($firmID))
																				)))[1] else()

									let $global100GR := cts:search(/,
																			cts:and-query((
																				cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																				cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($firmID)),
																				cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($PublishYear)))
																				))[1]
													   
									let $am200GR := cts:search(/,
																			cts:and-query((
																				cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
																				cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($firmID)),
																				cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($PublishYear)))
																				))[1]

									let $china40GR := cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
                                                       cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($firmID)),
                                                       cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($PublishYear)))
													   ))[1]																					   

									let $revenue := if(fn:not($am200GR//AMLAW_200:GROSS_REVENUE/text() ne '') and fn:not($global100GR//Global_100:GROSS_REVENUE/text() ne '') and fn:not($uk50IDCurrentYear//UK_50:GROSS_REVENUE_DOLLAR/text() ne '')) then '-1000'
													else if($am200GR//AMLAW_200:GROSS_REVENUE/text() ne '') then $am200GR//AMLAW_200:GROSS_REVENUE/text()
													else if($global100GR//Global_100:GROSS_REVENUE/text() ne '') then $global100GR//Global_100:GROSS_REVENUE/text() 
													else if($uk50IDCurrentYear//UK_50:GROSS_REVENUE_DOLLAR/text() ne '') then $uk50IDCurrentYear//UK_50:GROSS_REVENUE_DOLLAR/text()
													else if($china40GR//CHINA_40:GROSS_REVENUE/text() ne '') then $china40GR//CHINA_40:GROSS_REVENUE/text() 
													else()
													
													
									let $noofattorneys :=if(fn:not($am200GR//AMLAW_200:GROSS_REVENUE/text() ne '') and fn:not($global100GR//Global_100:GROSS_REVENUE/text() ne '') and fn:not($uk50IDCurrentYear//UK_50:GROSS_REVENUE_DOLLAR/text() ne '')) then '-1000'
													else if($am200GR//AMLAW_200:NUM_OF_LAWYERS/text() ne '') then $am200GR//AMLAW_200:NUM_OF_LAWYERS/text()
													else if($global100GR//Global_100:NUM_LAWYERS/text() ne '') then $global100GR//Global_100:NUM_LAWYERS/text() 
													else if($uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text() ne '') then $uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text() 
													else if($china40GR//CHINA_40:FIRMWIDE_LAWYERS/text() ne '') then $china40GR//CHINA_40:FIRMWIDE_LAWYERS/text() 
													else ''

	

									let $_ := (
										map:put($result-obj,'ORGANIZATION_ID',xs:integer($firmID)),
										map:put($result-obj,'ORGANIZATION_NAME',$orgName),
										map:put($result-obj,'GROSS_REVENUE',$revenue),
										map:put($result-obj,'NUM_ATTORNEYS',$noofattorneys),
										map:put($result-obj,'PUBLISHYEAR',$PublishYear)
									)
									let $_ :=  json:array-push($result-arr, $result-obj)
									return ()
									return()

		 return $result-arr
};

declare function firm:GetLawfirmRevenueHeadCountChart(
	$firmID as xs:string,
	$type as xs:string
)
{
	let $orgName := cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/organization/'),
							cts:element-value-query(xs:QName('rd-organization:ORGANIZATION_ID'),$firmID)
						))
					)//rd-organization:ORGANIZATION_NAME/text()	
		
	let $amlawYear := fn:distinct-values(cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/")
													   )))//AMLAW_200:PUBLISHYEAR/text())
    let $years := for $item in $amlawYear
					order by xs:integer($item) descending
					return $item
					
	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($firmID))
							)))//UK_50:ORGANIZATION_ID/text()

	let $result-arr := json:array()

	let $_ := for $res in $years[1 to 10]
		let $result-obj := json:object()
		let $PublishYear := $res
		
		let $uk50IDCurrentYear := if($uk50ID != '') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($PublishYear)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($firmID))
													)))[1] else()

		let $global100GR := cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                       cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($firmID)),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($PublishYear)))
													   ))[1]
													   
		let $am200GR := cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                       cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($firmID)),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($PublishYear)))
													   ))[1]

		let $china40GR := cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
                                                       cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($firmID)),
                                                       cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($PublishYear)))
													   ))[1]											   										   

		let $revenue := if($am200GR//AMLAW_200:GROSS_REVENUE/text() ne '') then $am200GR//AMLAW_200:GROSS_REVENUE/text()
						else if($global100GR//Global_100:GROSS_REVENUE/text() ne '') then $global100GR//Global_100:GROSS_REVENUE/text() 
						else if($uk50IDCurrentYear//UK_50:GROSS_REVENUE_DOLLAR/text() ne '') then $uk50IDCurrentYear//UK_50:GROSS_REVENUE_DOLLAR/text() 
						else if($china40GR//CHINA_40:GROSS_REVENUE/text() ne '') then $china40GR//CHINA_40:GROSS_REVENUE/text() 
						else 0
						
		let $noofattorneys := if($am200GR//AMLAW_200:NUM_OF_LAWYERS/text() ne '') then $am200GR//AMLAW_200:NUM_OF_LAWYERS/text()
						else if($global100GR//Global_100:NUM_LAWYERS/text() ne '') then $global100GR//Global_100:NUM_LAWYERS/text() 
						else if($uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text() ne '') then $uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text() 
						else if($china40GR//CHINA_40:FIRMWIDE_LAWYERS/text() ne '') then $china40GR//CHINA_40:FIRMWIDE_LAWYERS/text() 
						else 0

		let $_ := (
			map:put($result-obj,'ORGANIZATION_ID',xs:integer($firmID)),
			map:put($result-obj,'ORGANIZATION_NAME',$orgName),
			map:put($result-obj,'GROSS_REVENUE',$revenue),
			map:put($result-obj,'NUM_ATTORNEYS',$noofattorneys),
			map:put($result-obj,'PUBLISHYEAR',$PublishYear)
		)
		let $_ := if($revenue ne 0 or $noofattorneys ne 0) then json:array-push($result-arr, $result-obj) else()
		return ()

	return $result-arr
};


declare function firm:GetLawfirmProfileDetail(
	$callType,$firmIDD,$type
)
{
	(:
	let $TotalRevenueYear := fn:max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text())
	:)				  
	let $TotalRevenueYear := fn:max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:FISCAL_YEAR/text())
					  
	let $firmID := xs:string($firmIDD)
	
	let $org := cts:search(/organization,
		cts:and-query((
			cts:directory-query($config:RD-ORGANIZATION-PATH),
			cts:element-value-query(xs:QName('rd-organization:ORGANIZATION_ID'),$firmID)
		)))[1]
		
	let $add := cts:search(/organization-address,
		cts:and-query((
			cts:directory-query($config:RD-ORGANIZATION-ADDRESS-PATH),
			cts:element-value-query(xs:QName('org-address:ORGANIZATION_ID'),$firmID),
			cts:element-value-query(xs:QName('org-address:HEADQUARTERS'),'H',('case-insensitive'))
		)))[1]

	
	let $NLJ_250_NODE := doc(fn:concat($config:DD-SURVEY-NLJ_250-PATH,$firmID,'.xml'))/SURVEY/survey:YEAR
	let $NLJ_250_MAX := fn:max($NLJ_250_NODE/@PublishYear)
	let $NLJ_250 := $NLJ_250_NODE[@PublishYear = $NLJ_250_MAX]

	let $AMLAW_200_NODE := doc(fn:concat($config:DD-SURVEY-AMLAW_200-PATH,$firmID,'.xml'))/SURVEY/survey:YEAR
	let $AMLAW_200_MAX := fn:max($AMLAW_200_NODE/@PublishYear)
	(:let $TotalRevenueYear := fn:max($AMLAW_200_NODE/@FiscalYear):)
	let $AMLAW_200 := $AMLAW_200_NODE[@PublishYear = $AMLAW_200_MAX]
	let $AMLAW200_RANK := $AMLAW_200/survey:AMLAW200_RANK/text()

	let $Global_100_NODE := doc(fn:concat($config:DD-SURVEY-GLOBAL_100-PATH,$firmID,'.xml'))/SURVEY/survey:YEAR
	let $Global_100_MAX := fn:max($Global_100_NODE/@PublishYear)
	let $Global_100 := $Global_100_NODE[@PublishYear = $Global_100_MAX]

	
	let $uk50maxyear :=fn:max(cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
						)))//UK_50:PUBLISHYEAR/text())

	let $china40maxyear :=fn:max(cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/','1')
						)))//CHINA_40:PUBLISHYEAR/text())					

	let $uk50data :=cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1'),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$firmID),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($uk50maxyear))
						)))[1]

	let $uk50dataPreviousYear :=cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1'),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$firmID),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($uk50maxyear - 1))
						)))[1]//UK_50:GROSS_REVENUE_DOLLAR/text()						

	let $global100data :=cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/','1'),
							cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$firmID),
							cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($uk50maxyear))
						)))[1]	

	let $nlj250Result := cts:search(/,
                            cts:and-query((
                              cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/')
                             ,cts:element-value-query(xs:QName('nlj250:ORGANIZATION_ID'),$firmID)
                             ,cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'), xs:string($uk50maxyear))
                             )))[1]
					

	let $global100dataPreviousYear :=cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/','1'),
							cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$firmID),
							cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($uk50maxyear - 1))
						)))[1]//Global_100:GROSS_REVENUE/text()					

	let $amlawdata :=cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1'),
							cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$firmID),
							cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($uk50maxyear))
						)))[1]

	let $amlawdataPreviousYear :=cts:search(/,
									cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1'),
										cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$firmID),
										cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($uk50maxyear - 1))
									)))//AMLAW_200:GROSS_REVENUE/text()			

	let $china40data :=cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/','1'),
							cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),$firmID),
							cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($uk50maxyear))
						)))[1]

	let $china40dataPreviousYear :=cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/','1'),
							cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),$firmID),
							cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($uk50maxyear - 1))
						)))[1]//CHINA_40:GROSS_REVENUE/text()																			

	let $IsNonAMLawfirm := if ($AMLAW200_RANK) then 'false' else 'true'
	let $totalRevenue := if($amlawdata//AMLAW_200:GROSS_REVENUE/text()) then $amlawdata//AMLAW_200:GROSS_REVENUE/text() 
						else if($global100data//Global_100:GROSS_REVENUE/text()) then $global100data//Global_100:GROSS_REVENUE/text()
						else if($uk50data//UK_50:GROSS_REVENUE_DOLLAR/text()) then $uk50data//UK_50:GROSS_REVENUE_DOLLAR/text()
						else $china40data//CHINA_40:GROSS_REVENUE/text()

	let $totalRevenuePreYear := if($amlawdataPreviousYear) then $amlawdataPreviousYear 
						else if($global100dataPreviousYear) then $global100dataPreviousYear
						else if($uk50dataPreviousYear) then $uk50dataPreviousYear
						else $china40dataPreviousYear

	let $revenueGrowth := if($totalRevenue) then fn:round-half-to-even((($totalRevenue - $totalRevenuePreYear ) div $totalRevenue) * 100 , 2) else 0

	let $ppp := if($amlawdata//AMLAW_200:PPP/text()) then $amlawdata//AMLAW_200:PPP/text() 
				else if($global100data//Global_100:PPP/text()) then $global100data//Global_100:PPP/text()
				else if($uk50data//UK_50:PPP_DOLLAR/text()) then $uk50data//UK_50:PPP_DOLLAR/text()
				else $china40data//CHINA_40:PROFITS_PER_PARTNER/text()

	let $rpl := if($amlawdata//AMLAW_200:RPL/text()) then $amlawdata//AMLAW_200:RPL/text() 
				else if($global100data//Global_100:REVENUE_PER_LAWYER/text()) then $global100data//Global_100:REVENUE_PER_LAWYER/text()
				else if($uk50data//UK_50:RPL_DOLLAR/text()) then $uk50data//UK_50:RPL_DOLLAR/text()
				else 0

	let $profitMargin := if($amlawdata//AMLAW_200:PROFIT_MARGIN_AVG/text()) then ($amlawdata//AMLAW_200:PROFIT_MARGIN_AVG/text() * 100)
				else if($global100data//Global_100:PROFIT_MARGIN/text()) then $global100data//Global_100:PROFIT_MARGIN/text()
				else if($uk50data//UK_50:PROFIT_MARGIN/text()) then $uk50data//UK_50:PROFIT_MARGIN/text()
				else $china40data//CHINA_40:PROFIT_MARGIN/text() * 100	

	let $totalPartners := if($amlawdata//AMLAW_200:TOTAL_PARTNERS/text()) then ($amlawdata//AMLAW_200:TOTAL_PARTNERS/text() )
				else if($global100data//Global_100:NUM_PARTNERS/text()) then $global100data//Global_100:NUM_PARTNERS/text()
				else if($uk50data//UK_50:TOTAL_PARTNERS/text()) then $uk50data//UK_50:TOTAL_PARTNERS/text()
				else 0

	let $ppl := if($amlawdata//AMLAW_200:PPL/text()) then ($amlawdata//AMLAW_200:PPL/text())
				else if($global100data//Global_100:NUM_LAWYERS/text() ne '') then (($global100data//Global_100:PPP/text() * $global100data//Global_100:NUM_EQUITY_PARTNERS/text()) div $global100data//Global_100:NUM_LAWYERS/text())
				else if($uk50data//UK_50:PPL_DOLLAR/text()) then $uk50data//UK_50:PPL_DOLLAR/text()
				else 0

	let $lawyerPercent := ($global100data//Global_100:PERCENTAGE_LAWYERS_IN_COUNTRY/text() * 100)


	let $totalHeadCount := if($amlawdata//AMLAW_200:NUM_OF_LAWYERS/text() ne '') then $amlawdata//AMLAW_200:NUM_OF_LAWYERS/text() else 
							if($global100data//Global_100:NUM_LAWYERS/text()) then $global100data//Global_100:NUM_LAWYERS/text() else
							if($uk50data//UK_50:NUMBER_OF_LAWYERS/text()) then $uk50data//UK_50:NUMBER_OF_LAWYERS/text() else
							if($china40data//CHINA_40:FIRMWIDE_LAWYERS/text()) then $china40data//CHINA_40:FIRMWIDE_LAWYERS/text() else
							if($NLJ_250/survey:NUM_ATTORNEYS/text() ne '') then $NLJ_250/survey:NUM_ATTORNEYS/text() else 0

	let $equityPartner := if($amlawdata//AMLAW_200:NUM_EQ_PARTNERS/text() ne '') then $amlawdata//AMLAW_200:NUM_EQ_PARTNERS/text() else 
							if($global100data//Global_100:NUM_EQUITY_PARTNERS/text()) then $global100data//Global_100:NUM_EQUITY_PARTNERS/text() else
							if($uk50data//UK_50:NUMBER_OF_EQ_PARTNERS/text()) then $uk50data//UK_50:NUMBER_OF_EQ_PARTNERS/text() else
							if($china40data//CHINA_40:NUMBER_OF_EQ_PARTNERS/text()) then $china40data//CHINA_40:NUMBER_OF_EQ_PARTNERS/text() else
							if($NLJ_250/survey:EQUITY_PARTNERS/text() ne '') then $NLJ_250/survey:EQUITY_PARTNERS/text() else 0

	let $nonEquityPartner := if($amlawdata//AMLAW_200:NUM_NON_EQ_PARTNERS/text() ne '') then $amlawdata//AMLAW_200:NUM_NON_EQ_PARTNERS/text() else 
								if($global100data//Global_100:NUM_EQUITY_PARTNERS/text()) then ($global100data//Global_100:NUM_PARTNERS/text() - $global100data//Global_100:NUM_EQUITY_PARTNERS/text()) else
								if($uk50data//UK_50:NUMBER_OF_NON_EQ_PARTNERS/text()) then $uk50data//UK_50:NUMBER_OF_NON_EQ_PARTNERS/text() else
								if($NLJ_250/survey:NUM_NE_PARTNERS/text() ne '') then $NLJ_250/survey:NUM_NE_PARTNERS/text() else 0

								

	let $LawfirmDetail-obj := json:object()
	let $_ := (
		map:put($LawfirmDetail-obj,'FirmName',if($org/rd-organization:ALM_NAME/text()) then $org/rd-organization:ALM_NAME/text() else $org/rd-organization:ORGANIZATION_NAME/text()),
		map:put($LawfirmDetail-obj,'FirmId',$org/rd-organization:ORGANIZATION_ID/text()),
		map:put($LawfirmDetail-obj,'Address',$add/org-address:ADDRESS1/text()),
		map:put($LawfirmDetail-obj,'Address2',$add/org-address:ADDRESS2/text()),
		map:put($LawfirmDetail-obj,'City',$add/org-address:CITY/text()),
		map:put($LawfirmDetail-obj,'Zip',$add/org-address:ZIP/text()),
		map:put($LawfirmDetail-obj,'State',$add/org-address:STATE/text()),
		map:put($LawfirmDetail-obj,'Phone',$add/org-address:MAIN_PHONE/text()),
		map:put($LawfirmDetail-obj,'Fax',$add/org-address:FAX/text()),
		map:put($LawfirmDetail-obj,'Email',$add/org-address:EMAIL/text()),
		map:put($LawfirmDetail-obj,'Website',if($org/rd-organization:WEBSITE/text()) then fn:normalize-space(fn:replace($org/rd-organization:WEBSITE/text(),'http://','')) else ()),
		map:put($LawfirmDetail-obj,'HeadQuaters' ,if($add/org-address:CITY/text() and $add/org-address:STATE/text()) then fn:concat($add/org-address:CITY/text(),', ',$add/org-address:STATE/text()) else ()),
		map:put($LawfirmDetail-obj,'Country',$add/org-address:COUNTRY/text()),
		map:put($LawfirmDetail-obj,'TotalHeadcount', $totalHeadCount),
		map:put($LawfirmDetail-obj,'TotalOffice', firm:GetRELawFirmLocationCount($firmID)),
		map:put($LawfirmDetail-obj,'EquityPartner', $equityPartner),
		map:put($LawfirmDetail-obj,'NonEquityPartner',if(xs:string($nonEquityPartner) ne '') then $nonEquityPartner else 0),
		map:put($LawfirmDetail-obj,'Associate', if($nlj250Result//nlj250:NUM_ASSOCIATES/text() ne '') then $nlj250Result//nlj250:NUM_ASSOCIATES/text() else 0),
		map:put($LawfirmDetail-obj,'GlobalRank', if($Global_100/survey:RANK_BY_GROSS_REVENUE/text() != '') then $Global_100[1]/survey:RANK_BY_GROSS_REVENUE/text() else 0),
		map:put($LawfirmDetail-obj,'TotalRevenue', if(xs:string($totalRevenue) ne '') then $totalRevenue else 0),
		map:put($LawfirmDetail-obj,'AdditionalInformation', $org/rd-organization:ADDITIONAL_INFORMATION/text()),
		map:put($LawfirmDetail-obj,'ProfitPerPartner', if(xs:string($ppp) ne '') then $ppp else 0),
		map:put($LawfirmDetail-obj,'RevenuePerLawyer',if(xs:string($rpl) ne '') then $rpl else 0),
		map:put($LawfirmDetail-obj,'DescriptionText', $org/rd-organization:ORGANIZATION_PROFILE/text()),
		map:put($LawfirmDetail-obj,'TotalRevenueYear', $TotalRevenueYear),
		map:put($LawfirmDetail-obj,'MansfieldruleStatus', $org//rd-organization:MANSFIELD_RULE_STATUS/text()),
		map:put($LawfirmDetail-obj,'MANSFIELD_RULE_STATUS', $org//rd-organization:MANSFIELD_RULE_STATUS/text()),
		map:put($LawfirmDetail-obj,'ProfitMargin', if($profitMargin) then $profitMargin else 0),
		map:put($LawfirmDetail-obj,'TotalPartners', if($totalPartners) then $totalPartners else 0),
		map:put($LawfirmDetail-obj,'ProfitPerLawyer', if($ppl) then $ppl else 0),
		map:put($LawfirmDetail-obj,'LawyerPercentage', if($lawyerPercent) then $lawyerPercent else 0),
		map:put($LawfirmDetail-obj,'RevenueGrowth', if($revenueGrowth) then $revenueGrowth else 0)
	)

	let $return-obj := json:object()
	let $_ := (
		map:put($return-obj,'AmLawYear',$TotalRevenueYear),
		map:put($return-obj,'IsNonAMLawfirm',$IsNonAMLawfirm),
		map:put($return-obj,'LawfirmDetail',$LawfirmDetail-obj)
	)

	return $return-obj
};

declare function firm:GetREIdByOrgId($firmID)
{
	cts:search(/FIRMS_ALI_XREF_RE,
		cts:and-query((
			cts:collection-query($config:RD-FIRMS_ALI_XREF_RE-COLLECTION),
			cts:directory-query($config:RD-FIRMS_ALI_XREF_RE-PATH),
			cts:element-value-query(xs:QName('xref:ALI_ID'),$firmID)
		)))[1]/xref:RE_ID/text()
};

declare function firm:GetREIdByOrgId1($firmID)
{
	cts:search(/FIRMS_ALI_XREF_RE,
		cts:and-query((
			cts:collection-query($config:RD-FIRMS_ALI_XREF_RE-COLLECTION),
			cts:directory-query($config:RD-FIRMS_ALI_XREF_RE-PATH),
			cts:element-value-query(xs:QName('xref:ALI_ID'),$firmID)
		)))/xref:RE_ID/text()
};

declare function firm:GetREIdByOrgId2($firmID)
{
	cts:search(/FIRMS_ALI_XREF_RE,
		cts:and-query((
			cts:collection-query($config:RD-FIRMS_ALI_XREF_RE-COLLECTION),
			cts:directory-query($config:RD-FIRMS_ALI_XREF_RE-PATH),
			cts:element-value-query(xs:QName('xref:ALI_ID'),$firmID)
		)))/xref:RE_ID/text()
};

declare function firm:GetREIdByOrgId3($firmID)
{
	let $firmID := fn:tokenize($firmID,',')
	let $reID := cts:search(/FIRMS_ALI_XREF_RE,
					cts:and-query((
						cts:collection-query($config:RD-FIRMS_ALI_XREF_RE-COLLECTION),
						cts:directory-query($config:RD-FIRMS_ALI_XREF_RE-PATH),
						cts:element-value-query(xs:QName('xref:ALI_ID'),$firmID)
					)))/xref:RE_ID/text()
	return json:to-array(fn:string-join($reID,','))
};

declare function firm:GetALIIdByREId($REId)
{
	cts:search(/FIRMS_ALI_XREF_RE,
		cts:and-query((
			 cts:collection-query($config:RD-FIRMS_ALI_XREF_RE-COLLECTION)
			,cts:directory-query($config:RD-FIRMS_ALI_XREF_RE-PATH)
			,cts:element-value-query(xs:QName('xref:RE_ID'),$REId)
		)))[1]/xref:ALI_ID/text()
};

declare function firm:d($pageNo, $pageSize, $firmIds)
{
	(:
	let $start := xs:integer(((xs:integer($pageNo)*xs:integer($pageSize))-xs:integer($pageSize))+1)

	let $context := map:map()
	let $_ := map:put($context, 'output-types','application/json')
	let $companies-arr := json:array()

	let $dir-query := cts:directory-query($config:COMPANY-PATH,'1')
	let $firm-id-query := if($firmIds) then
			cts:element-value-query(xs:QName('lcc:company_id'),fn:tokenize($firmIds,','))
		else ()

	let $extract-metadata := 
																	<search:extract-metadata> 
																		<search:qname elem-ns='http://alm.com/LegalCompass/company' elem-name='company_id'/>
																		<search:qname elem-ns='http://alm.com/LegalCompass/company' elem-name='company'/>
																	</search:extract-metadata>

	let $search-options :=
																	<options xmlns='http://marklogic.com/appservices/search'>
																		<additional-query>{ cts:and-query(($dir-query,$firm-id-query)) }</additional-query>
		  {$extract-metadata}
																	</options>

	let $search-result := search:search('',$search-options,$start,$pageSize)



	let $_ := for $entry in $search-result//search:metadata
		let $company-obj := json:object()
		let $company-data := firm:GetLawFirmStatics($entry//lcc:company_id/text())
		let $_ := (
			map:put($company-obj, 'firmID', $entry//lcc:company_id/text()),
			map:put($company-obj, 'firmName', $entry//lcc:company/text()),

			map:put($company-obj, 'result',$company-data),

			map:put($company-obj, 'totalCount', $search-result/@total)
		)
		let $_ := json:array-push($companies-arr, $company-obj)
		return ()

	return $companies-arr
	:)
	'HELLO WORLD'
};

declare function firm:GetLawFirmStatics($firmId)
{
	(: let $firm-id-query := cts:element-value-query(xs:QName('lcc:company_id'),$firmId)

	let $search-options :=
																	<options xmlns='http://marklogic.com/appservices/search'>
																		<additional-query>{ $firm-id-query }</additional-query>
																	</options> :)

	(:let $search-result := search:search('',$search-options,$start,$pageSize):)

	(: return $search-options :)

	'HELLO WORLD'
};

declare function firm:GetRevenueByYearPostMerger($OrganisationID,$IsDisplayGBP,$Interval)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $data := if($checkMergerData != '') then firm:GetRevenueByYearPM($OrganisationID,$IsDisplayGBP,$Interval) else firm:GetRevenueByYear($OrganisationID,$IsDisplayGBP,$Interval)
	return $data
};

declare function firm:GetRevenueByYear($OrganisationID,$IsDisplayGBP,$Interval)
{
	let $isDisplayGBP := if($IsDisplayGBP ne '') then $IsDisplayGBP else 'false'

	let $distinctYears := fn:distinct-values(cts:search(/,
			cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
        )//survey:YEAR/@PublishYear/string())

	let $distinctYears := for $year in $distinctYears
		order by xs:integer($year) descending
		return $year    (:fn:tokenize('2017,2016,2015,2014,2013',','):)

	let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$OrganisationID,'.xml'))
	let $organizationID := $organization//organization:ORGANIZATION_ID/text()
	let $organizationName := $organization//organization:ORGANIZATION_SHORT_NAME/text()
	let $response-arr := json:array()

	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
							)))//UK_50:ORGANIZATION_ID/text()

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])						

	let $data := for $year in $yearss
		let $response-obj := json:object()

		let $res := cts:search(/,
				cts:and-query((
					cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1'),
					cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),($year)),
					cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganisationID)
				)))//survey:YEAR[@PublishYear = $year]

		let $amlaw200CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]//AMLAW_200:GROSS_REVENUE/text() else()

        let $global100CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then  cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]//Global_100:GROSS_REVENUE/text() else ()


		let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]//CHINA_40:GROSS_REVENUE/text() else ()
		
		let $uk50IDCurrentYear :=if($uk50ID != '') then if(xs:string($isDisplayGBP) eq 'true') then (cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]//UK_50:GROSS_REVENUE_POUND_M/text()) * 1000000
													else cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]//UK_50:GROSS_REVENUE_DOLLAR/text() 
													else ()

		let $rev := if(xs:string($amlaw200CurrentYear) ne '') then $amlaw200CurrentYear else 
						if(xs:string($global100CurrentYear) ne '') then $global100CurrentYear else
						if(xs:string($uk50IDCurrentYear) ne '') then $uk50IDCurrentYear else 
						if($china40) then $china40 else ''

		let $_ := (
			map:put($response-obj,'ORGANIZATION_ID',xs:integer($OrganisationID)),
			map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
			map:put($response-obj,'REVENUE',$rev),
			map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)

		 let $_ := if(xs:integer($year)) then 
				    json:array-push($response-arr, $response-obj)
				   else()
		return  ()

	return $response-arr
};

declare function firm:GetRevenueByYearPM($OrganisationID,$IsDisplayGBP,$Interval)
{
	let $isDisplayGBP := if($IsDisplayGBP ne '') then $IsDisplayGBP else 'false'
	let $checkMergerData := firmnew:GetMergedFirmData($OrganisationID)
	
	let $distinctYears := fn:distinct-values(cts:search(/,
			cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
        )//survey:YEAR/@PublishYear/string())

	let $distinctYears := for $year in $distinctYears
		order by xs:integer($year) descending
		return $year

	
	let $response-arr := json:array()

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID						
	
	let $data := for $year in $yearss
		let $loopData1 := for $item1 in $checkMergerData//FirmData
							let $item := $item1//FirmID/text()
							let $organizationName := $item1//FirmName/text()

							(: let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$item,'.xml'))
							let $organizationID := $organization//organization:ORGANIZATION_ID/text()
							let $organizationName := $organization//organization:ORGANIZATION_NAME/text() :)
							let $uk50ID := cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($item))
													)))//UK_50:ORGANIZATION_ID/text()
							
							let $response-obj := json:object()

							let $res := cts:search(/,
									cts:and-query((
										cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1'),
										cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
										cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),xs:string($item))
									)))//survey:YEAR[@PublishYear = $year]

							let $amlaw200CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
																		cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
																		cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($item))
																		)))[1]//AMLAW_200:GROSS_REVENUE/text() else()

							let $global100CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then  cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																		cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
																		cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($item))
																		)))[1]//Global_100:GROSS_REVENUE/text() else ()
							
							let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($item))
													)))[1]//CHINA_40:GROSS_REVENUE/text() else ()


		
							let $uk50IDCurrentYear :=if($uk50ID != '') then if(xs:string($isDisplayGBP) eq 'true') then (cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																		cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																		cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($item))
																		)))[1]//UK_50:GROSS_REVENUE_POUND_M/text()) * 1000000
																		else cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																		cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																		cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($item))
																		)))[1]//UK_50:GROSS_REVENUE_DOLLAR/text() 
																		else ()

							let $rev := if(xs:string($amlaw200CurrentYear) ne '') then $amlaw200CurrentYear else 
											if(xs:string($global100CurrentYear) ne '') then $global100CurrentYear else
											if(xs:string($uk50IDCurrentYear) ne '') then $uk50IDCurrentYear else 
											if($china40) then $china40 else 0

							let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',xs:integer($item)),
								map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
								map:put($response-obj,'REVENUE',$rev),
								map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
							)

							let $_ := json:array-push($response-arr, $response-obj)		  
							(: let $_ := if((xs:string($amlaw200CurrentYear) ne '' or xs:string($global100CurrentYear) ne '' or xs:string($uk50IDCurrentYear) ne '')) then 
										json:array-push($response-arr, $response-obj)
									else() :)
							return ()
							return ()

						return $response-arr
};

declare function firm:GetRevenueByYearPostMergerCount($OrganisationID,$IsDisplayGBP,$Interval)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $data := if($checkMergerData != '') then firm:GetRevenueByYearPMCount1($OrganisationID,$IsDisplayGBP,$Interval) else firm:GetRevenueByYearCount1($OrganisationID,$IsDisplayGBP,$Interval)
	return $data
};

declare function firm:GetRevenueByYearCount1($OrganisationID,$IsDisplayGBP,$Interval)
{
	let $isDisplayGBP := if($IsDisplayGBP ne '') then $IsDisplayGBP else 'false'

	let $distinctYears := fn:distinct-values(cts:search(/,
			cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
        )//survey:YEAR/@PublishYear/string())

	let $distinctYears := for $year in $distinctYears
		order by xs:integer($year) descending
		return $year    (:fn:tokenize('2017,2016,2015,2014,2013',','):)

	let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$OrganisationID,'.xml'))
	let $organizationID := $organization//organization:ORGANIZATION_ID/text()
	let $organizationName := $organization//organization:ORGANIZATION_SHORT_NAME/text()
	let $response-arr := json:array()

	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
							)))//UK_50:ORGANIZATION_ID/text()

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])						

	let $data := for $year in $yearss
		let $response-obj := json:object()

		let $res := cts:search(/,
				cts:and-query((
					cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1'),
					cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),($year)),
					cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganisationID)
				)))//survey:YEAR[@PublishYear = $year]

		let $amlaw200CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]//AMLAW_200:GROSS_REVENUE/text() else()

        let $global100CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then  cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]//Global_100:GROSS_REVENUE/text() else ()


		let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]//CHINA_40:GROSS_REVENUE/text() else ()
		
		let $uk50IDCurrentYear :=if($uk50ID != '') then if(xs:string($isDisplayGBP) eq 'true') then (cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]//UK_50:GROSS_REVENUE_POUND_M/text()) * 1000000
													else cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganisationID))
													)))[1]//UK_50:GROSS_REVENUE_DOLLAR/text() 
													else ()

		let $rev := if(xs:string($amlaw200CurrentYear) ne '') then $amlaw200CurrentYear else 
						if(xs:string($global100CurrentYear) ne '') then $global100CurrentYear else
						if(xs:string($uk50IDCurrentYear) ne '') then $uk50IDCurrentYear else 
						if($china40) then $china40 else ''

		let $_ := (
			map:put($response-obj,'ORGANIZATION_ID',xs:integer($OrganisationID)),
			map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
			map:put($response-obj,'REVENUE',$rev),
			map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)

		 let $_ := if($rev) then
				    json:array-push($response-arr, $response-obj)
					else()
		return  ()

	return $response-arr
};

declare function firm:GetRevenueByYearPMCount1($OrganisationID,$IsDisplayGBP,$Interval)
{
	let $isDisplayGBP := if($IsDisplayGBP ne '') then $IsDisplayGBP else 'false'
	let $checkMergerData := firmnew:GetMergedFirmData($OrganisationID)
	
	let $distinctYears := fn:distinct-values(cts:search(/,
			cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
        )//survey:YEAR/@PublishYear/string())

	let $distinctYears := for $year in $distinctYears
		order by xs:integer($year) descending
		return $year

	
	let $response-arr := json:array()

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID						
	
	let $data := for $year in $yearss
		let $loopData1 := for $item1 in $checkMergerData//FirmData
							let $item := $item1//FirmID/text()
							let $organizationName := $item1//FirmName/text()

							(: let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$item,'.xml'))
							let $organizationID := $organization//organization:ORGANIZATION_ID/text()
							let $organizationName := $organization//organization:ORGANIZATION_NAME/text() :)
							let $uk50ID := cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($item))
													)))//UK_50:ORGANIZATION_ID/text()
							
							let $response-obj := json:object()

							let $res := cts:search(/,
									cts:and-query((
										cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1'),
										cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
										cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),xs:string($item))
									)))//survey:YEAR[@PublishYear = $year]

							let $amlaw200CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
																		cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
																		cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($item))
																		)))[1]//AMLAW_200:GROSS_REVENUE/text() else()

							let $global100CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then  cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																		cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
																		cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($item))
																		)))[1]//Global_100:GROSS_REVENUE/text() else ()
							
							let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($item))
													)))[1]//CHINA_40:GROSS_REVENUE/text() else ()


		
							let $uk50IDCurrentYear :=if($uk50ID != '') then if(xs:string($isDisplayGBP) eq 'true') then (cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																		cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																		cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($item))
																		)))[1]//UK_50:GROSS_REVENUE_POUND_M/text()) * 1000000
																		else cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																		cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																		cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($item))
																		)))[1]//UK_50:GROSS_REVENUE_DOLLAR/text() 
																		else ()

							let $rev := if(xs:string($amlaw200CurrentYear) ne '') then $amlaw200CurrentYear else 
											if(xs:string($global100CurrentYear) ne '') then $global100CurrentYear else
											if(xs:string($uk50IDCurrentYear) ne '') then $uk50IDCurrentYear else 
											if($china40) then $china40 else 0

							let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',xs:integer($item)),
								map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
								map:put($response-obj,'REVENUE',$rev),
								map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
							)

							let $_ :=if($rev) then json:array-push($response-arr, $response-obj) else ()
							(: let $_ := if((xs:string($amlaw200CurrentYear) ne '' or xs:string($global100CurrentYear) ne '' or xs:string($uk50IDCurrentYear) ne '')) then 
										json:array-push($response-arr, $response-obj)
									else() :)
							return ()
							return ()

						return $response-arr
};

declare function firm:GetRevenueByYearCount($OrganisationID,$IsDisplayGBP)
{
	let $isDisplayGBP := if($IsDisplayGBP ne '') then $IsDisplayGBP else 'false'
	let $checkMergerData := firmnew:GetMergedFirmData($OrganisationID)

	let $distinctYears := fn:distinct-values(cts:search(/,
			cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
        )//survey:YEAR/@PublishYear/string())

	let $distinctYears := for $year in $distinctYears
		order by xs:integer($year) descending
		return $year    (:fn:tokenize('2017,2016,2015,2014,2013',','):)

	
	let $response-arr := json:array()

	

	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID						
	
	let $data := for $year in fn:reverse($distinctYears[1 to 5])
		let $loopData1 := for $item1 in $checkMergerData//FirmData
							let $item := $item1//FirmID/text()
							let $organizationName := $item1//FirmName/text()

							(: let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$item,'.xml'))
							let $organizationID := $organization//organization:ORGANIZATION_ID/text()
							let $organizationName := $organization//organization:ORGANIZATION_NAME/text() :)
							let $uk50ID := cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($item))
													)))//UK_50:ORGANIZATION_ID/text()
							
							let $response-obj := json:object()

							let $res := cts:search(/,
									cts:and-query((
										cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1'),
										cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),($year)),
										cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),xs:string($item))
									)))//survey:YEAR[@PublishYear = $year]

							let $amlaw200CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
																		cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
																		cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($item))
																		)))[1]//AMLAW_200:GROSS_REVENUE/text() else()

							let $global100CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then  cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																		cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
																		cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($item))
																		)))[1]//Global_100:GROSS_REVENUE/text() else ()


		
							let $uk50IDCurrentYear :=if($uk50ID != '') then if(xs:string($isDisplayGBP) eq 'true') then (cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																		cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																		cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($item))
																		)))[1]//UK_50:GROSS_REVENUE_POUND_M/text()) * 1000000
																		else cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																		cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																		cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($item))
																		)))[1]//UK_50:GROSS_REVENUE_DOLLAR/text() 
																		else ()

							let $rev := if(xs:string($amlaw200CurrentYear) ne '') then $amlaw200CurrentYear else 
											if(xs:string($global100CurrentYear) ne '') then $global100CurrentYear else
											if(xs:string($uk50IDCurrentYear) ne '') then $uk50IDCurrentYear else 0

							let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',xs:integer($item)),
								map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
								map:put($response-obj,'REVENUE',$rev),
								map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
							)

							(: let $_ := json:array-push($response-arr, $response-obj)		   :)
							let $_ := if((xs:string($amlaw200CurrentYear) ne '' or xs:string($global100CurrentYear) ne '' or xs:string($uk50IDCurrentYear) ne '')) then 
										json:array-push($response-arr, $response-obj)
									else()
							return ()
							return ()
	
						return $response-arr
};

declare function firm:GetProfitMarginPostMerger($OrganizationID,$isDisplayGBP,$Interval)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganizationID)
	let $data := if($checkMergerData != '') then firm:GetProfitMarginPM($OrganizationID,$isDisplayGBP,$Interval) else firm:GetProfitMargin($OrganizationID,$isDisplayGBP,$Interval)
	return $data
};

declare function firm:GetProfitMargin($OrganizationID,$isDisplayGBP,$Interval)
{

	let $IsDisplayGBP := if($isDisplayGBP ne '') then $isDisplayGBP else 'false'
	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
		cts:and-query((
			cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
		))) (: fn:tokenize('2017,2016,2015,2014,2013',','):)

	let $organizationName := if((/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text())[1] ne '') then 
			/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text()[1]
		else 
			/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ORGANIZATION_NAME/text()[1]
    
	let $response-arr := json:array()

	let $amlaw200maxYearData := cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganizationID)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($distinctYears)))
			)))[1]

			
	let $uk50maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
				cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
			)))[1]		

	let $global100maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
				cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganizationID))
			)))[1]				

	let $china40maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/'),
				cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganizationID))
			)))[1]						

	let $maxYearData := if($uk50maxYearData ne '' or $amlaw200maxYearData ne '' or $global100maxYearData ne '' or $china40maxYearData ne '') then 'Y' else ()
			
	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $data := for $year in $yearss
		
		let $response-obj := json:object()
        let $res := if(xs:string($IsDisplayGBP) ne 'true') then cts:search(/,
            cts:and-query((
				cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1'),
				cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
				cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganizationID)
            )))//survey:YEAR[@PublishYear = $year] else()

		let $Margin := (xs:double(fn:format-number((xs:double($res//survey:NET_OPERATING_INCOME/text()) div xs:double($res//survey:GROSS_REVENUE/text())),'.00')) * 100)

		let $global100CurrentYear :=if(xs:string($IsDisplayGBP) ne 'true') then  cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1] else()

	

		let $global100Change := if($global100CurrentYear ne '') then (xs:double($global100CurrentYear//Global_100:PPP/text()) * xs:double($global100CurrentYear//Global_100:NUM_EQUITY_PARTNERS/text())) * 100
									div xs:double($global100CurrentYear//Global_100:GROSS_REVENUE/text()) else ()

		
		let $uk50IDCurrentYear := cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))//UK_50:PROFIT_MARGIN/text()

		let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1] else ()											

		
		let $china40ProfitMargin := (($china40//CHINA_40:PROFITS_PER_PARTNER/text() * $china40//CHINA_40:EQUITY_PARTNERS/text()) div $china40//CHINA_40:GROSS_REVENUE/text()) * 100
		let $Margin1 :=if(fn:not($res ne '') and fn:not($global100CurrentYear ne '') and fn:not($uk50IDCurrentYear ne '') and fn:not($china40 ne '')) then -1000
					   else if($Margin ne 0 and xs:string($Margin) ne 'NaN') then $Margin else
							if(xs:string($global100Change) ne '' and xs:string($global100Change) ne '0' and xs:string($global100Change) ne 'NaN') then $global100Change 
							else if($uk50IDCurrentYear ne '') then ($uk50IDCurrentYear * 100) 
							else if($china40ProfitMargin) then $china40ProfitMargin else 0 

		let $isAddMaxYear := if(xs:string($year) ne xs:string(max($distinctYears))) then 
								'y' else
							if($Margin1 ne 0 and $Margin1 ne -1000) then 'y' else 'n' 							
		
		let $_ := (
			map:put($response-obj,'ORGANIZATION_ID',xs:integer($OrganizationID)),
			map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
			map:put($response-obj,'MARGIN', fn:round-half-to-even($Margin1,2)),
			map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)

		let $_ :=if(xs:string($year) ne xs:string(max($distinctYears)) and $isAddMaxYear ne 'n') then json:array-push($response-arr,$response-obj) else
					if($maxYearData ne '' and $isAddMaxYear ne 'n') then json:array-push($response-arr,$response-obj) else()

		(: ----------------------Global100------------------------- :)
		let $res := cts:search(/,
			cts:and-query((	
				 cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
				,cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year))
		        ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))

			)))[1]

		let $profitMargin := fn:avg(cts:search(/,
			cts:and-query((	
				 cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
				,cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year))
		       ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))

			)))//Global_100:PROFIT_MARGIN/text())
		
		let $Margin :=if(fn:not($res ne '') or fn:not($Margin1 ne -1000)) then -1000
					  else $profitMargin
		
		let $response-obj := json:object()
        let $_ := (
			map:put($response-obj,'ORGANIZATION_ID',0),
            map:put($response-obj,'ORGANIZATION_NAME', 'Global 200'),
            map:put($response-obj,'MARGIN', fn:round-half-to-even($Margin,2)),
            map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		let $_ :=if(xs:string($Margin) ne 'NaN' and xs:string($IsDisplayGBP) ne 'true' and $isAddMaxYear ne 'n') then 
					json:array-push($response-arr, $response-obj) else ()
		(: -------------------------AM Law 100---------------------- :)
		
		let $res := fn:avg(cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
				,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
				,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
				,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
			)))//AMLAW_200:PROFIT_MARGIN_AVG/text())
    
		
		let $Margin := if(fn:not($Margin1 ne -1000)) then -1000
					   else	fn:round-half-to-even($res *100 ,2)
	
        let $response-obj := json:object()
        let $_ := (
			map:put($response-obj,'ORGANIZATION_ID',0),
            map:put($response-obj,'ORGANIZATION_NAME', 'AM Law 100'),
            map:put($response-obj,'MARGIN',fn:round-half-to-even($Margin,2)),
            map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		
		let $_ := if($isAddMaxYear ne 'n' and xs:string($IsDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj)  else()
		
		(: -------------------------Am Law 2nd Hundred---------------------- :)

        let $res := fn:avg(cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
				,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
				,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
				,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
			)))//AMLAW_200:PROFIT_MARGIN_AVG/text())
    
	
		let $Margin := if(fn:not($Margin1 ne -1000)) then -1000
					   else fn:round-half-to-even($res *100 ,2)
		
        let $response-obj := json:object()
        let $_ := (
			map:put($response-obj,'ORGANIZATION_ID',0),
            map:put($response-obj,'ORGANIZATION_NAME', 'Am Law 2nd Hundred'),
            map:put($response-obj,'MARGIN', fn:round-half-to-even($Margin,2)),
            map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		let $_ :=if($isAddMaxYear ne 'n' and xs:string($IsDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else()

		(:------------------------UK50------------------------:)
		
	let $response-obj := json:object()
	
	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")(:,
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)):),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
							)))[1]//UK_50:ORGANIZATION_ID/text()

	let $distinctid_gt_100 := fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
							)))//UK_50:ORGANIZATION_ID/text())

	
		let $res3 := if($distinctid_gt_100 != '' and $Margin1 ne -1000) then (avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
							)))//UK_50:PROFIT_MARGIN/text()) * 100) else -1000
		
		
	
		let $_ :=(
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'UK 100'),
		map:put($response-obj,'MARGIN', fn:round-half-to-even(($res3),2)),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		let $_ := if($uk50ID ne '' and max($distinctYears) ne xs:integer($year) and $isAddMaxYear ne 'n') then json:array-push($response-arr, $response-obj)
					else if($uk50ID ne '' and $isAddMaxYear ne 'n') then json:array-push($response-arr, $response-obj)
				 else()	

		return  ()

	return $response-arr
};

declare function firm:GetProfitMarginPM($OrganizationID,$isDisplayGBP,$Interval)
{

	let $IsDisplayGBP := if($isDisplayGBP ne '') then $isDisplayGBP else 'false'
	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
		cts:and-query((
			cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
		))) (: fn:tokenize('2017,2016,2015,2014,2013',','):)

	let $checkMergerData := firmnew:GetMergedFirmData($OrganizationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganizationID),',') else $OrganizationID
	
	
    
	let $response-arr := json:array()

	(: let $maxYearData := cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganizationID)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($distinctYears)))
			)))[1] :)

	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")(:,
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)):),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$checkMergerData//FirmData//FirmID)
							)))//UK_50:ORGANIZATION_ID/text()		

			
	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $data := for $year in $yearss
					let $loopData := for $item in $checkMergerData//FirmData
									let $OrganizationID := $item//FirmID/text()
									let $organizationName := $item//FirmName/text()
								let $response-obj := json:object()
								(: let $organizationName := if((/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text())[1] ne '') then 
									/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text()[1]
								else 
									/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ORGANIZATION_NAME/text()[1] :)
									
								let $res := if(xs:string($IsDisplayGBP) ne 'true') then cts:search(/,
									cts:and-query((
										cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1'),
										cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
										cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganizationID)
									)))//survey:YEAR[@PublishYear = $year] else()

								let $Margin := (xs:double(fn:format-number((xs:double($res//survey:NET_OPERATING_INCOME/text()) div xs:double($res//survey:GROSS_REVENUE/text())),'.00')) * 100)

								let $global100CurrentYear :=if(xs:string($IsDisplayGBP) ne 'true') then  cts:search(/,
																		cts:and-query((
																			cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																			cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
																			cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganizationID))
																			)))[1] else()

	

								let $global100Change := if($global100CurrentYear ne '') then (xs:double($global100CurrentYear//Global_100:PPP/text()) * xs:double($global100CurrentYear//Global_100:NUM_EQUITY_PARTNERS/text())) * 100
															div xs:double($global100CurrentYear//Global_100:GROSS_REVENUE/text()) else ()

								
								let $uk50IDCurrentYear := cts:search(/,
																		cts:and-query((
																			cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																			cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																			cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
																			)))//UK_50:PROFIT_MARGIN/text()

								let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1] else ()											

		
								let $china40ProfitMargin := (($china40//CHINA_40:PROFITS_PER_PARTNER/text() * $china40//CHINA_40:EQUITY_PARTNERS/text()) div $china40//CHINA_40:GROSS_REVENUE/text()) * 100
								
								let $Margin1 :=if(fn:not($res ne '') and fn:not($global100CurrentYear ne '') and fn:not($uk50IDCurrentYear ne '') and fn:not($china40 ne '')) then -1000
											else if($Margin ne 0 and xs:string($Margin) ne 'NaN') then $Margin else
													if(xs:string($global100Change) ne '' and xs:string($global100Change) ne '0' and xs:string($global100Change) ne 'NaN') then $global100Change 
													else if($uk50IDCurrentYear ne '') then ($uk50IDCurrentYear * 100) 
													else if($china40ProfitMargin) then $china40ProfitMargin else 0 

								let $isAddMaxYear := if(xs:string($year) ne xs:string(max($distinctYears))) then 
														'y' else
													if($Margin1 ne 0 and $Margin1 ne -1000) then 'y' else 'n'											

		
		
								(: let $Margin1 :=if(fn:not($res ne '') and fn:not($global100CurrentYear ne '') and fn:not($uk50IDCurrentYear ne '')) then -1000
											else if($Margin ne 0 and xs:string($Margin) ne 'NaN') then $Margin else
													if(xs:string($global100Change) ne '' and xs:string($global100Change) ne '0' and xs:string($global100Change) ne 'NaN') then $global100Change 
													else if($uk50IDCurrentYear ne '') then ($uk50IDCurrentYear * 100) else json:null()

								let $isAddMaxYear := if(xs:string($year) ne xs:string(max($distinctYears))) then 
														if($res ne '' or $global100CurrentYear ne '' or $uk50IDCurrentYear ne '') then 'y' else 'n' else
													if($Margin1 ne 0 and $Margin1 ne -1000) then 'y' else 'n' 							 :)
								
								let $_ := (
									map:put($response-obj,'ORGANIZATION_ID',xs:integer($OrganizationID)),
									map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
									map:put($response-obj,'MARGIN', fn:round-half-to-even($Margin1,2)),
									map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
								)

								let $_ := json:array-push($response-arr,$response-obj)

								return()			

		(: ----------------------Global100------------------------- :)
		let $res := cts:search(/,
			cts:and-query((	
				 cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
				,cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year))
			)))[1]

		let $profitMargin := fn:avg(cts:search(/,
			cts:and-query((	
				 cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
				,cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year))
			)))//Global_100:PROFIT_MARGIN/text())
		
		let $Margin :=if(fn:not($res ne '')) then -1000
					  else $profitMargin
		
		let $response-obj := json:object()
        let $_ := (
			map:put($response-obj,'ORGANIZATION_ID',0),
            map:put($response-obj,'ORGANIZATION_NAME', 'Global 200'),
            map:put($response-obj,'MARGIN', fn:round-half-to-even($Margin,2)),
            map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		let $_ :=if(xs:string($IsDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else ()
		(: -------------------------AM Law 100---------------------- :)
		
		let $res := fn:avg(cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
				,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
				,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
				,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
			)))//AMLAW_200:PROFIT_MARGIN_AVG/text())
    
		
		let $Margin := fn:round-half-to-even($res *100 ,2)
	
        let $response-obj := json:object()
        let $_ := (
			map:put($response-obj,'ORGANIZATION_ID',0),
            map:put($response-obj,'ORGANIZATION_NAME', 'AM Law 100'),
           map:put($response-obj,'MARGIN', fn:round-half-to-even($Margin,2)),
            map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		
		let $_ := if(xs:string($IsDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj)  else()
		
		(: -------------------------Am Law 2nd Hundred---------------------- :)

        let $res := fn:avg(cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
				,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
				,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
				,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
			)))//AMLAW_200:PROFIT_MARGIN_AVG/text())
    
	
		let $Margin := fn:round-half-to-even($res *100 ,2)
		
        let $response-obj := json:object()
        let $_ := (
			map:put($response-obj,'ORGANIZATION_ID',0),
            map:put($response-obj,'ORGANIZATION_NAME', 'Am Law 2nd Hundred'),
            map:put($response-obj,'MARGIN', fn:round-half-to-even($Margin,2)),
            map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		let $_ :=if(xs:string($IsDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else()

		(:------------------------UK50------------------------:)
		
	let $response-obj := json:object()

	let $distinctid_gt_100 := fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
							)))//UK_50:ORGANIZATION_ID/text())

	
		let $res3 := if($distinctid_gt_100 != '') then (avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
							)))//UK_50:PROFIT_MARGIN/text()) * 100) else -1000
		
		
	
		let $_ :=(
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'UK 100'),
		map:put($response-obj,'MARGIN', fn:round-half-to-even(($res3),2)),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		let $_ := if($uk50ID != '') then json:array-push($response-arr, $response-obj)
				 else()	

		return  ()

	return $response-arr
};

declare function firm:GetRevenuePerLawyerByYearPostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $data := if($checkMergerData != '') then firm:GetRevenuePerLawyerByYearPM($request) else firm:GetRevenuePerLawyerByYear($request)
	return $data
};

declare function firm:GetRevenuePerLawyerByYearPM($request)
{
	
	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetMergedFirmData($OrganisationID)
	let $Interval := $request//Interval/text()	
	let $IsDisplayGBP := $request/IsDisplayGBP/text()
	let $isDisplayGBP := if($IsDisplayGBP ne '') then $IsDisplayGBP else 'false'
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID						
	
	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
							cts:and-query((
								cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
							)))

	let $distinctYears := if($request/StartYear/text() ne '' and $request/EndYear/text() ne '') then
                      for $year in $distinctYears
                      where ($year ge xs:integer($request/StartYear/text()) and $year le xs:integer($request/EndYear/text()))
                      return $year
                      else $distinctYears

	
	let $response-arr := json:array()

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $data := for $year in $yearss
				let $loopData := for $item1 in $checkMergerData//FirmData
									let $item := $item1//FirmID/text()
									let $organizationName := $item1//FirmName/text()
										let $response-obj := json:object()

										(: let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$item,'.xml'))
	
										let $organizationName := $organization//organization:ORGANIZATION_NAME/text() :)

										let $amlaw200CurrentYear := if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
																		cts:and-query((
																			cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
																			cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
																			cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($item))
																			)))[1]//AMLAW_200:RPL/text()	else()	

										let $global100CurrentYear := if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
																				cts:and-query((
																					cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																					cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
																					cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($item))
																					)))[1]//Global_100:REVENUE_PER_LAWYER/text() else()

										let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($item))
													)))[1]//CHINA_40:REVENUE_PER_LAWYER/text() else ()

				
										let $uk50IDCurrentYear :=if(xs:string($isDisplayGBP) eq 'true') then (cts:search(/,
																				cts:and-query((
																					cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																					cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																					cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($item))
																					)))//UK_50:RPL_POUND_K/text() * 1000)
																else cts:search(/,
																				cts:and-query((
																					cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																					cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																					cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($item))
																					)))[1]//UK_50:RPL_DOLLAR/text()					

				let $rev := if(xs:string($amlaw200CurrentYear) ne '') then $amlaw200CurrentYear else 
						if(xs:string($global100CurrentYear) ne '') then $global100CurrentYear else
						if(xs:string($uk50IDCurrentYear) ne '') then $uk50IDCurrentYear else 
						if($china40) then $china40 else 0

				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',xs:integer($item)),
								map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
								map:put($response-obj,'REVENUE',$rev),
								map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
						  )
				let $_ := json:array-push($response-arr, $response-obj)
				return()
				return()
	return $response-arr
};

declare function firm:GetRevenuePerLawyerByYear($request)
{
	
	let $IsDisplayGBP := $request/IsDisplayGBP/text()
	let $isDisplayGBP := if($IsDisplayGBP ne '') then $IsDisplayGBP else 'false'
	let $Interval := $request//Interval/text()	
	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
							cts:and-query((
								cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
							)))

	let $distinctYears := if($request/StartYear/text() ne '' and $request/EndYear/text() ne '') then
                      for $year in $distinctYears
                      where ($year ge xs:integer($request/StartYear/text()) and $year le xs:integer($request/EndYear/text()))
                      return $year
                      else $distinctYears

	let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$request//OrganisationID,'.xml'))
	let $organizationID := $organization//organization:ORGANIZATION_ID/text()
	let $organizationName := $organization//organization:ORGANIZATION_SHORT_NAME/text()
	let $response-arr := json:array()

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $data := for $year in $yearss
				let $response-obj := json:object()
				

				let $amlaw200CurrentYear := if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($organizationID))
													)))[1]//AMLAW_200:RPL/text()	else()	

				let $global100CurrentYear := if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
														cts:and-query((
															cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
															cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
															cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($organizationID))
															)))[1]//Global_100:REVENUE_PER_LAWYER/text() else()


				let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($organizationID))
													)))[1]//CHINA_40:REVENUE_PER_LAWYER/text() else ()
				
				let $uk50IDCurrentYear :=if(xs:string($isDisplayGBP) eq 'true') then (cts:search(/,
														cts:and-query((
															cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
															cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
															cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($organizationID))
															)))//UK_50:RPL_POUND_K/text() * 1000)
										 else cts:search(/,
														cts:and-query((
															cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
															cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
															cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($organizationID))
															)))[1]//UK_50:RPL_DOLLAR/text()					

				let $rev := if(xs:string($amlaw200CurrentYear) ne '') then $amlaw200CurrentYear else 
						if(xs:string($global100CurrentYear) ne '') then $global100CurrentYear else
						if(xs:string($uk50IDCurrentYear) ne '') then $uk50IDCurrentYear else 
						if($china40) then $china40 else ''

				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',xs:integer($organizationID)),
								map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
								map:put($response-obj,'REVENUE',$rev),
								map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
						  )
				let $_ := if(xs:integer(max($distinctYears)) ne xs:integer($year)) then json:array-push($response-arr, $response-obj)
					else if(xs:string($rev) ne '') then json:array-push($response-arr, $response-obj)
					else()
				return  ()
	return $response-arr
};

declare function firm:GetProfitLawyerPostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $checkMergerData := firmnew:GetLawFirmMergerData($request//OrganisationID/text())
	let $data := if($checkMergerData != '') then firm:GetProfitLawyerPM($request) else firm:GetProfitLawyer($request)
	return $data
};

declare function firm:GetProfitLawyerPM($request)
{
	
	let $IsDisplayGBP := $request/IsDisplayGBP/text()
	let $isDisplayGBP := if(xs:string($IsDisplayGBP) ne '') then $IsDisplayGBP else 'false'
	let $Interval := $request//Interval/text()	

	let $checkMergerData := firmnew:GetMergedFirmData($request//OrganisationID/text())
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$request//OrganisationID/text()),',') else $request//OrganisationID/text()						
	
	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
							cts:and-query((
							cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
										)))

	let $distinctYears := if($request/StartYear/text() ne '' and $request/EndYear/text() ne '') then
						for $year in $distinctYears
						(:where $year >= xs:integer($request/StartYear/text()) and EndYear <= xs:integer($request/EndYear/text()):)
						return $year
						else $distinctYears

	
	let $response-arr := json:array()
	
	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $data := for $year in $yearss
				let $loopData := for $item1 in $checkMergerData//FirmData
									let $item := $item1//FirmID/text()
									let $organizationName := $item1//FirmName/text()
								(: let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$item,'.xml'))
								
								let $organizationName := if((/organization[organization:ORGANIZATION_ID = xs:string($item)]/organization:ALM_NAME/text())[1] ne '')then 
															/organization[organization:ORGANIZATION_ID = xs:string($item)]/organization:ALM_NAME/text()[1]
														else 
															/organization[organization:ORGANIZATION_ID = xs:string($item)]/organization:ORGANIZATION_NAME/text()[1] :)
								let $response-obj := json:object()
								

								let $amlaw200CurrentYear := if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
																cts:and-query((
																	cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
																	cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
																	cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($item))
																	)))[1] else()

								let $global100CurrentYear := if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
																cts:and-query((
																	cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																	cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
																	cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($item))
																	)))[1] else()											

								let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($item))
													)))[1] else ()
				
								let $uk50IDCurrentYear := cts:search(/,
																		cts:and-query((
																			cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																			cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																			cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($item))
																			)))[1]

								let $pplByUK50 := if(xs:string($isDisplayGBP) ne 'true') then fn:round-half-to-even(($uk50IDCurrentYear//UK_50:PPP_DOLLAR/text() * $uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()) div $uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text(),0) 
													else if($uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text()) then fn:round-half-to-even(($uk50IDCurrentYear//UK_50:PPP_POUND_K/text() * 1000 * $uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()) div $uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text(),0) 														
													else()

								let $ppl := if($amlaw200CurrentYear//AMLAW_200:NET_OPERATING_INCOME/text() ne '') then ($amlaw200CurrentYear//AMLAW_200:NET_OPERATING_INCOME/text() div $amlaw200CurrentYear//AMLAW_200:NUM_OF_LAWYERS/text()) else 
											if($global100CurrentYear//Global_100:NUM_LAWYERS/text() ne '') then (($global100CurrentYear//Global_100:PPP/text() * $global100CurrentYear//Global_100:NUM_EQUITY_PARTNERS/text()) div $global100CurrentYear//Global_100:NUM_LAWYERS/text()) else
											if($pplByUK50) then $pplByUK50 else 
											if($china40) then (($china40//CHINA_40:PROFITS_PER_PARTNER/text() * $china40//CHINA_40:EQUITY_PARTNERS/text()) div $china40//CHINA_40:FIRMWIDE_LAWYERS/text()) else 0

								let $_ := (
												map:put($response-obj,'ORGANIZATION_ID',xs:integer($item)),
												map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
												map:put($response-obj,'CHANGE',fn:round-half-to-even($ppl,0)),
												map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
										)
								let $_ := json:array-push($response-arr, $response-obj)
								return()
								return()
	return $response-arr
};

declare function firm:GetProfitLawyer($request)
{
	
	let $IsDisplayGBP := $request/IsDisplayGBP/text()
	let $isDisplayGBP := if(xs:string($IsDisplayGBP) ne '') then $IsDisplayGBP else 'false'

	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
							cts:and-query((
							cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
										)))

	let $distinctYears := if($request/StartYear/text() ne '' and $request/EndYear/text() ne '') then
						for $year in $distinctYears
						(:where $year >= xs:integer($request/StartYear/text()) and EndYear <= xs:integer($request/EndYear/text()):)
						return $year
						else $distinctYears

	let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$request//OrganisationID,'.xml'))
	let $organizationID := $organization//organization:ORGANIZATION_ID/text()
	let $organizationName := if((/organization[organization:ORGANIZATION_ID = xs:string($organizationID)]/organization:ALM_NAME/text())[1] ne '')then 
															/organization[organization:ORGANIZATION_ID = xs:string($organizationID)]/organization:ALM_NAME/text()[1]
														else 
														/organization[organization:ORGANIZATION_ID = xs:string($organizationID)]/organization:ORGANIZATION_NAME/text()[1]
	let $response-arr := json:array()

	let $Interval := $request//Interval/text()	
	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $data := for $year in $yearss
				let $response-obj := json:object()
				

				let $amlaw200CurrentYear := if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($organizationID))
													)))[1] else()

				let $global100CurrentYear := if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($organizationID))
													)))[1] else()											

				let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($organizationID))
													)))[1] else ()
				
				let $uk50IDCurrentYear :=cts:search(/,
														cts:and-query((
															cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
															cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
															cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($organizationID))
															)))[1]		

				let $pplByUK50 := if(xs:string($isDisplayGBP) ne 'true') then fn:round-half-to-even(($uk50IDCurrentYear//UK_50:PPP_DOLLAR/text() * $uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()) div $uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text(),0) 
									else if($uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text()) then fn:round-half-to-even(($uk50IDCurrentYear//UK_50:PPP_POUND_K/text() * 1000 * $uk50IDCurrentYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()) div $uk50IDCurrentYear//UK_50:NUMBER_OF_LAWYERS/text(),0) 																											
									else ()

				let $ppl := if($amlaw200CurrentYear//AMLAW_200:NET_OPERATING_INCOME/text() ne '') then ($amlaw200CurrentYear//AMLAW_200:NET_OPERATING_INCOME/text() div $amlaw200CurrentYear//AMLAW_200:NUM_OF_LAWYERS/text()) else 
					   		if($global100CurrentYear//Global_100:NUM_LAWYERS/text() ne '') then (($global100CurrentYear//Global_100:PPP/text() * $global100CurrentYear//Global_100:NUM_EQUITY_PARTNERS/text()) div $global100CurrentYear//Global_100:NUM_LAWYERS/text()) else
							if($pplByUK50) then $pplByUK50 else 
							if($china40) then (($china40//CHINA_40:PROFITS_PER_PARTNER/text() * $china40//CHINA_40:EQUITY_PARTNERS/text()) div $china40//CHINA_40:FIRMWIDE_LAWYERS/text()) else 0

				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',xs:integer($organizationID)),
								map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
								map:put($response-obj,'CHANGE',fn:round-half-to-even($ppl,2)),
								map:put($response-obj,'uk50IDCurrentYear',$uk50IDCurrentYear),
								map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
						  )
				let $_ := json:array-push($response-arr, $response-obj)
					
				return  ()
	return $response-arr
};

declare function firm:GetProfitPerEqityPartnerPostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $OrganizationID := $request//OrganisationID/text()

	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganizationID)
	let $data := if($checkMergerData != '') then firm:GetProfitPerEqityPartnerPM($request) else firm:GetProfitPerEqityPartner($request)
	return $data
};

declare function firm:GetProfitPerEqityPartner($request)
{
	let $isDisplayGBP := $request/IsDisplayGBP/text()
	let $IsDisplayGBP := if($isDisplayGBP ne '') then $isDisplayGBP else 'false'
	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
							cts:and-query((
							cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
							)))

	let $distinctYears := if($request/StartYear/text() ne '' and $request/EndYear/text() ne '') then
                      for $year in $distinctYears
                      where ($year ge xs:integer($request/StartYear/text()) and   $year le xs:integer($request/EndYear/text()))
                      return $year
                      else $distinctYears[1 to 5]

	

	let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$request//OrganisationID,'.xml'))
	let $organizationID := $organization//organization:ORGANIZATION_ID/text()
	let $organizationName := if((/organization[organization:ORGANIZATION_ID = xs:string($organizationID)]/organization:ALM_NAME/text())[1] ne '')then 
  /organization[organization:ORGANIZATION_ID = xs:string($organizationID)]/organization:ALM_NAME/text()[1]
	else 
  /organization[organization:ORGANIZATION_ID = xs:string($organizationID)]/organization:ORGANIZATION_NAME/text()[1]

	let $amlaw200maxYearData := cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$organizationID)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($distinctYears)))
			)))[1]

	let $uk50maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
				cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($organizationID))
			)))[1]		

	let $global100maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
				cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($organizationID))
			)))[1]

	let $china40maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/'),
				cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($organizationID))
			)))[1]						

	let $maxYearData := if($uk50maxYearData ne '' or $amlaw200maxYearData ne '' or $global100maxYearData ne '' or $china40maxYearData ne '') then 'Y' else ()	

	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")(:,
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)):),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($organizationID))
							)))[1]//UK_50:ORGANIZATION_ID/text()		

	let $response-arr := json:array()
	
	let $Interval := $request//Interval/text()
	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])
	

	let $data := for $year in $yearss
				let $response-obj := json:object()

				let $amlaw200CurrentYear := if(xs:string($IsDisplayGBP) ne 'true') then  cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($organizationID))
													)))[1] else()

				let $global100CurrentYear := if(xs:string($IsDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($organizationID))
													)))[1] else()									

				
				let $uk50IDCurrentYear :=if(xs:string($isDisplayGBP) eq 'true') then cts:search(/,
														cts:and-query((
															cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
															cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
															cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($organizationID))
															)))//UK_50:PPP_POUND_K/text()
										 else cts:search(/,
														cts:and-query((
															cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
															cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
															cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($organizationID))
															)))[1]//UK_50:PPP_DOLLAR/text()		

				let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($organizationID))
													)))[1] else ()											

				let $ppp := if(fn:not($amlaw200CurrentYear ne '') and fn:not($global100CurrentYear ne '') and fn:not($uk50IDCurrentYear ne '') and fn:not($china40 ne '') ) then -1000
							else if($amlaw200CurrentYear//AMLAW_200:PPP/text() ne '') then $amlaw200CurrentYear//AMLAW_200:PPP/text() else
								 if($global100CurrentYear//Global_100:PPP/text() ne '') then $global100CurrentYear//Global_100:PPP/text() else
								 if($uk50IDCurrentYear ne '') then $uk50IDCurrentYear 
								 else if($china40) then $china40//CHINA_40:PROFITS_PER_PARTNER/text() else 0

				let $isAddMaxYear := if(xs:string($year) ne xs:string(max($distinctYears))) then 
										'y'
									 else
											if($amlaw200CurrentYear ne '' or $global100CurrentYear ne '' or $uk50IDCurrentYear ne '') then 'y' else 'n'

				

				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',xs:integer($organizationID)),
								map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
								map:put($response-obj,'REVENUE',fn:round-half-to-even($ppp,0)),
								map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
						  )

				let $_ := if(xs:string($year) ne xs:string(max($distinctYears)) and $isAddMaxYear ne 'n') then json:array-push($response-arr, $response-obj) else
					if($maxYearData ne '' and ($amlaw200CurrentYear ne '' or $global100CurrentYear ne '' or $uk50IDCurrentYear ne '' or $china40 ne ''))
						 then json:array-push($response-arr,$response-obj) else()


				let $res :=    avg(cts:search(/,
											cts:and-query((
											cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1'),
											cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'')),
											cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100),
											cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
										)))//AMLAW_200:PPP/text())

				let $avg-ppp :=if($ppp ne -1000) then fn:format-number($res ,'.00') else -1000
				let $response-obj := json:object()
				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',0),
							map:put($response-obj,'ORGANIZATION_NAME', 'AM Law 100'),
							map:put($response-obj,'REVENUE', $avg-ppp),
							map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
								)

				
				let $_ := if(xs:string($avg-ppp) ne '' and $isAddMaxYear ne 'n' and xs:string($isDisplayGBP) ne 'true') 
							then  json:array-push($response-arr, $response-obj) else()				

				let $res :=  cts:search(//survey:YEAR,
											cts:and-query((
											cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1'),
											cts:not-query(cts:element-value-query(xs:QName('survey:AMLAW200_RANK'),'')),
											cts:element-range-query(xs:QName('survey:AMLAW200_RANK'), '>', xs:int('100'))
										)))[1]

				let $avg :=  fn:avg(cts:search(/,
											cts:and-query((
											cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1'),
											cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'')),
											cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>', xs:int('100')),
											cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
										)))//AMLAW_200:PPP/text())
																
				let $avg-ppp1 :=if(fn:not($res != '') or $ppp eq -1000) then -1000
								else fn:format-number(($avg) ,'.00')

				let $response-obj := json:object()
				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',0),
							map:put($response-obj,'ORGANIZATION_NAME', 'Am Law 2nd Hundred'),

							map:put($response-obj,'REVENUE', $avg-ppp1), 
							map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
								)
				let $_ := if($isAddMaxYear ne 'n' and xs:string($isDisplayGBP) ne 'true') then  json:array-push($response-arr, $response-obj) else()				

				let $global100AvgPPP := fn:avg(cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year))
													)))//Global_100:PPP/text())		

				let $global100AvgPPP := if($ppp eq -1000) then -1000 else $global100AvgPPP
				let $response-obj := json:object()
				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',0),
							map:put($response-obj,'ORGANIZATION_NAME', 'Global 200'),
							map:put($response-obj,'REVENUE', $global100AvgPPP), 
							map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
								)
				let $_ := if($isAddMaxYear ne 'n' and xs:string($isDisplayGBP) ne 'true') then  json:array-push($response-arr, $response-obj) else()				

				let $isUK50Exist := cts:search(/,
														cts:and-query((
															cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
															cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
															)))[1]
				
				let $uk50IDAvgPPP :=if(fn:not($isUK50Exist != '') or $ppp eq -1000) then -1000
									else if(xs:string($isDisplayGBP) eq 'true') then fn:avg(cts:search(/,
														cts:and-query((
															cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
															cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
															)))//UK_50:PPP_POUND_K/text())
										 else fn:avg(cts:search(/,
														cts:and-query((
															cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
															cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
															)))//UK_50:PPP_DOLLAR/text())		

				let $response-obj := json:object()
				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',0),
							map:put($response-obj,'ORGANIZATION_NAME', 'UK 100'),
							map:put($response-obj,'REVENUE', $uk50IDAvgPPP), 
							map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
								)
				let $_ := if($uk50ID ne '' and max($distinctYears) ne xs:integer($year) and $isAddMaxYear ne 'n') then json:array-push($response-arr, $response-obj)
					   	  else if($uk50ID ne '' and $isAddMaxYear ne 'n') then json:array-push($response-arr, $response-obj)
						  else()	
				return()

	return ($response-arr)
};

declare function firm:GetProfitPerEqityPartnerPM($request)
{
	let $isDisplayGBP := $request/IsDisplayGBP/text()
	let $IsDisplayGBP := if($isDisplayGBP ne '') then $isDisplayGBP else 'false'
	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
							cts:and-query((
							cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
							)))

	let $distinctYears := if($request/StartYear/text() ne '' and $request/EndYear/text() ne '') then
                      for $year in $distinctYears
                      where ($year ge xs:integer($request/StartYear/text()) and   $year le xs:integer($request/EndYear/text()))
                      return $year
                      else $distinctYears[1 to 5]

	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetMergedFirmData($OrganisationID)

	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID				  

	

	

	(: let $maxYearData := cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$organizationID)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($distinctYears)))
			)))[1] :)

	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")(:,
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)):),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$checkMergerData//FirmData//FirmID)
							)))[1]//UK_50:ORGANIZATION_ID/text()		

	let $response-arr := json:array()

	let $Interval := $request//Interval/text()
	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $data := for $year in $yearss
					let $loopData := for $item in $checkMergerData//FirmData
									let $organizationID := $item//FirmID/text()
									let $organizationName := $item//FirmName/text()
							(: let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$organizationID,'.xml'))
	
							let $organizationName := if((/organization[organization:ORGANIZATION_ID = xs:string($organizationID)]/organization:ALM_NAME/text())[1] ne '')then 
						/organization[organization:ORGANIZATION_ID = xs:string($organizationID)]/organization:ALM_NAME/text()[1]
							else 
						/organization[organization:ORGANIZATION_ID = xs:string($organizationID)]/organization:ORGANIZATION_NAME/text()[1]
						 :)
							let $response-obj := json:object()

							let $amlaw200CurrentYear := if(xs:string($IsDisplayGBP) ne 'true') then  cts:search(/,
															cts:and-query((
																cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
																cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
																cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($organizationID))
																)))[1] else()

							let $global100CurrentYear := if(xs:string($IsDisplayGBP) ne 'true') then cts:search(/,
															cts:and-query((
																cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
																cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($organizationID))
																)))[1] else()	

							let $china40 :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($organizationID))
													)))[1] else ()																	

				
							let $uk50IDCurrentYear :=if(xs:string($isDisplayGBP) eq 'true') then cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																		cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																		cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($organizationID))
																		)))//UK_50:PPP_POUND_K/text()
													else cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																		cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																		cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($organizationID))
																		)))[1]//UK_50:PPP_DOLLAR/text()		

							let $ppp := if(fn:not($amlaw200CurrentYear ne '') and fn:not($global100CurrentYear ne '') and fn:not($uk50IDCurrentYear ne '') and fn:not($china40 ne '')) then -1000
										else if($amlaw200CurrentYear//AMLAW_200:PPP/text() ne '') then $amlaw200CurrentYear//AMLAW_200:PPP/text() else
											if($global100CurrentYear//Global_100:PPP/text() ne '') then $global100CurrentYear//Global_100:PPP/text() else
											if($uk50IDCurrentYear ne '') then $uk50IDCurrentYear else
											if($china40) then $china40//CHINA_40:PROFITS_PER_PARTNER/text() else 0

							let $isAddMaxYear := if(xs:string($year) ne xs:string(max($distinctYears))) then 
													'y'
												else
														if($amlaw200CurrentYear ne '' or $global100CurrentYear ne '' or $uk50IDCurrentYear ne '' or $china40 ne '') then 'y' else 'n'

				

							let $_ := (
											map:put($response-obj,'ORGANIZATION_ID',xs:integer($organizationID)),
											map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
											map:put($response-obj,'REVENUE',fn:round-half-to-even($ppp,0)),
											map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
									)

							let $_ := json:array-push($response-arr,$response-obj)

							return()		


				let $res :=  avg(cts:search(/,
											cts:and-query((
											cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1'),
											cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'')),
											cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100),
											cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
										)))//AMLAW_200:PPP/text())

				let $avg-ppp :=fn:format-number($res ,'.00')
				let $response-obj := json:object()
				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',0),
							map:put($response-obj,'ORGANIZATION_NAME', 'AM Law 100'),
							map:put($response-obj,'REVENUE', $avg-ppp),
							map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
								)

				
				let $_ := if(xs:string($avg-ppp) ne '' and xs:string($isDisplayGBP) ne 'true') 
							then  json:array-push($response-arr, $response-obj) else()				

				let $res :=  cts:search(//survey:YEAR,
											cts:and-query((
											cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1'),
											cts:not-query(cts:element-value-query(xs:QName('survey:AMLAW200_RANK'),'')),
											cts:element-range-query(xs:QName('survey:AMLAW200_RANK'), '>', xs:int('100'))
										)))[1]

				let $avg :=  fn:avg(cts:search(/,
											cts:and-query((
											cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1'),
											cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'')),
											cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>', xs:int('100')),
											cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
										)))//AMLAW_200:PPP/text())
																
				let $avg-ppp1 :=fn:format-number(($avg) ,'.00')

				let $response-obj := json:object()
				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',0),
							map:put($response-obj,'ORGANIZATION_NAME', 'Am Law 2nd Hundred'),

							map:put($response-obj,'REVENUE', $avg-ppp1), 
							map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
								)
				let $_ := if(xs:string($avg-ppp1) ne '' and xs:string($isDisplayGBP) ne 'true') then  json:array-push($response-arr, $response-obj) else()				

				let $global100AvgPPP := fn:avg(cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year))
													)))//Global_100:PPP/text())		

				let $global100AvgPPP := $global100AvgPPP
				let $response-obj := json:object()
				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',0),
							map:put($response-obj,'ORGANIZATION_NAME', 'Global 200'),
							map:put($response-obj,'REVENUE', $global100AvgPPP), 
							map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
								)
				let $_ := if($global100AvgPPP ne 0 and xs:string($isDisplayGBP) ne 'true') then  json:array-push($response-arr, $response-obj) else()				

				let $isUK50Exist := cts:search(/,
														cts:and-query((
															cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
															cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
															)))[1]
				
				let $uk50IDAvgPPP :=if(fn:not($isUK50Exist != '')) then -1000
									else if(xs:string($isDisplayGBP) eq 'true') then fn:avg(cts:search(/,
														cts:and-query((
															cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
															cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
															)))//UK_50:PPP_POUND_K/text())
										 else fn:avg(cts:search(/,
														cts:and-query((
															cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
															cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
															)))[1]//UK_50:PPP_DOLLAR/text())		

				let $response-obj := json:object()
				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',0),
							map:put($response-obj,'ORGANIZATION_NAME', 'UK 100'),
							map:put($response-obj,'REVENUE', $uk50IDAvgPPP), 
							map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
								)
				let $_ := if($uk50ID != '') then json:array-push($response-arr, $response-obj)
						  else()	
				return()

	return ($response-arr)
};

declare function firm:GetTotalHeadCount()
{
	let $request := xdmp:get-request-body()/request

	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/','1')
	))
	)

	let $distinctYears := if($request/StartYear/text() ne '' and $request/EndYear/text() ne '') then
						for $year in $distinctYears
						(:where $year >= xs:integer($request/StartYear/text()) and EndYear <= xs:integer($request/EndYear/text()):)
						return $year
						else $distinctYears[1 to 5]

	let $OrganizationID := $request//OrganisationID/text()
	let $organizationName := if((/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text())[1] ne '')then 
		/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text()[1]
	else 
		/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ORGANIZATION_NAME/text()[1]
	let $response-arr := json:array()


	let $data := for $year in fn:reverse($distinctYears)
				let $response-obj := json:object()
				let $res := cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/','1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$request//OrganisationID/text())
									)))//survey:YEAR[@PublishYear = $year]
				
				let $global100Data := cts:search(/,
										cts:and-query((
											cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
											cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($year))),
											cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$request//OrganisationID/text())
											)))[1]//Global_100:NUM_LAWYERS/text()

		

				let $uk50Data := cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$request//OrganisationID/text())
													)))[1]//UK_50:NUMBER_OF_LAWYERS/text()
				
				let $numOfAttorney := if($res//survey:NUM_ATTORNEYS/text() ne '') then $res//survey:NUM_ATTORNEYS/text()
										else if($global100Data ne '') then $global100Data
										else $uk50Data
									
				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',xs:integer($OrganizationID)),
							map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
							map:put($response-obj,'COUNT',$numOfAttorney),
							map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
								)
				let $_ := if($res ne '' or $global100Data ne '' or $uk50Data ne '') then json:array-push($response-arr, $response-obj) else()
				(:return  ():)
				return  $res
	return $response-arr
	(:return $data:)
};

declare function firm:GetChangesinHeadcountByLocationPostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $OrganisationID := $request/OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)

	let $data := if($checkMergerData != '') then firm:GetChangesinHeadcountByLocationPM($request) else firm:GetChangesinHeadcountByLocation($request)
	return $data
};

declare function firm:GetChangesinHeadcountByLocation($request)
{
	
	let $StartYear := $request/StartYear/text()
	let $EndYear := $request/EndYear/text()
	let $OrganisationID := $request/OrganisationID/text()

	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query($config:DD-SURVEY-NLJ_250-PATH,'1')
	)))

	let $distinctYears := if($StartYear ne '' and $EndYear ne '') then
		for $year in $distinctYears
		where $year ge xs:integer($StartYear) and $year le xs:integer($EndYear)
		return $year
	else $distinctYears[1 to 5]
	
	let $PreviousYearValue := fn:min($distinctYears)
	let $CurrentYearValue := fn:max($distinctYears)

	let $max-data := for $x in cts:search(/organization-branch,
	cts:and-query((
		cts:directory-query($config:RD-ORGANIZATION_BRANCH-PATH,'1'),
		cts:element-value-query(xs:QName('organization-branch:FISCAL_YEAR'),xs:string(fn:max($distinctYears))),
		cts:element-value-query(xs:QName('organization-branch:ORGANIZATION_ID'),$OrganisationID)
	)))
	return element {'organization-branch'} {
		element {'ORGANIZATION_ID'} {$x/organization-branch:ORGANIZATION_ID/text()},
		element {'LOCATION'} {
		if(fn:not($x/organization-branch:STATE/text())) then
			fn:concat($x/organization-branch:CITY/text(),', ',$x/organization-branch:COUNTRY/text())
		else fn:concat($x/organization-branch:CITY/text(),', ',$x/organization-branch:STATE/text())
		},
		element {'NUM_ATTORNEYS'} {$x/organization-branch:NUM_ATTORNEYS/text()},
		element {'PUBLISHYEAR'} {$x/organization-branch:FISCAL_YEAR/text()}
	}

	let $all-data := for $x in cts:search(/organization-branch,
	cts:and-query((
		cts:directory-query($config:RD-ORGANIZATION_BRANCH-PATH,'1'),
		cts:element-value-query(xs:QName('organization-branch:FISCAL_YEAR'),xs:string(fn:max($distinctYears)-4)),
		cts:element-value-query(xs:QName('organization-branch:ORGANIZATION_ID'),$OrganisationID)
	)))
	return element {'organization-branch'} {
		element {'ORGANIZATION_ID'} {$x/organization-branch:ORGANIZATION_ID/text()},
		element {'LOCATION'} {
		if(fn:not($x/organization-branch:STATE/text())) then
			fn:concat($x/organization-branch:CITY/text(),', ',$x/organization-branch:COUNTRY/text())
		else fn:concat($x/organization-branch:CITY/text(),', ',$x/organization-branch:STATE/text())
		},
		element {'NUM_ATTORNEYS'} {$x/organization-branch:NUM_ATTORNEYS/text()},
		element {'PUBLISHYEAR'} {$x/organization-branch:FISCAL_YEAR/text()}
	}

	let $distinc-locations := fn:distinct-values(($max-data,$all-data)/LOCATION/text())

	let $response-arr := json:array()
	let $response := for $location in $distinc-locations

	let $data := if (($max-data/LOCATION[. = $location]) and ($all-data/LOCATION[. = $location])) then
		let $response-obj := json:object()

		let $CUR_NUM_ATTORNEYS := $max-data[LOCATION = $location]/NUM_ATTORNEYS/text()
		let $PRE_NUM_ATTORNEYS := $all-data[LOCATION = $location]/NUM_ATTORNEYS/text()
		let $NetChange := ($CUR_NUM_ATTORNEYS[1] - $PRE_NUM_ATTORNEYS[1]) 
		let $NetChangePos := if(($CUR_NUM_ATTORNEYS[1] - $PRE_NUM_ATTORNEYS[1]) lt 0 )
							then ($CUR_NUM_ATTORNEYS[1] - $PRE_NUM_ATTORNEYS[1]) * -1
							else ($CUR_NUM_ATTORNEYS[1] - $PRE_NUM_ATTORNEYS[1])
		
		
		let $_ := (
        map:put($response-obj,'Organization_Id',xs:integer($OrganisationID)),
		map:put($response-obj,'Organization_Name',$max-data[LOCATION = $location][1]/LOCATION/text()),
        map:put($response-obj,'LOCATION',$max-data[LOCATION = $location][1]/LOCATION/text()),
        map:put($response-obj,'CUR_NUM_ATTORNEYS',$max-data[LOCATION = $location][1]/NUM_ATTORNEYS/text()),
        map:put($response-obj,'PRE_NUM_ATTORNEYS',$all-data[LOCATION = $location][1]/NUM_ATTORNEYS/text()),
        map:put($response-obj,'NETCHANGE',$NetChange),
        map:put($response-obj,'NETCHANGEPOS',$NetChangePos),
		map:put($response-obj,'PreviousYearValue',$PreviousYearValue),
		map:put($response-obj,'CurrentYearValue',$CurrentYearValue)
		)
		let $_ := json:array-push($response-arr,$response-obj)
		return ()
	else ()
	return ()

	return $response-arr
};

declare function firm:GetChangesinHeadcountByLocationPM($request)
{
	
	let $StartYear := $request/StartYear/text()
	let $EndYear := $request/EndYear/text()
	let $Org := $request//OrganisationID/text()

	let $checkMergerData := firmnew:GetMergedFirmData($Org)

	let $OrganisationID := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$Org),',') else $Org				  

	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query($config:DD-SURVEY-NLJ_250-PATH,'1')
	)))

	let $distinctYears := if($StartYear ne '' and $EndYear ne '') then
		for $year in $distinctYears
		where $year ge xs:integer($StartYear) and $year le xs:integer($EndYear)
		return $year
	else $distinctYears[1 to 5]
	
	let $PreviousYearValue := fn:min($distinctYears)
	let $CurrentYearValue := fn:max($distinctYears)

	let $max-data := for $x in cts:search(/organization-branch,
	cts:and-query((
		cts:directory-query($config:RD-ORGANIZATION_BRANCH-PATH,'1'),
		cts:element-value-query(xs:QName('organization-branch:FISCAL_YEAR'),xs:string(fn:max($distinctYears))),
		cts:element-value-query(xs:QName('organization-branch:ORGANIZATION_ID'),$OrganisationID)
	)))
	return element {'organization-branch'} {
		element {'ORGANIZATION_ID'} {$x/organization-branch:ORGANIZATION_ID/text()},
		element {'LOCATION'} {
		if(fn:not($x/organization-branch:STATE/text())) then
			fn:concat($x/organization-branch:CITY/text(),', ',$x/organization-branch:COUNTRY/text())
		else fn:concat($x/organization-branch:CITY/text(),', ',$x/organization-branch:STATE/text())
		},
		element {'NUM_ATTORNEYS'} {$x/organization-branch:NUM_ATTORNEYS/text()},
		element {'PUBLISHYEAR'} {$x/organization-branch:FISCAL_YEAR/text()}
	}

	let $all-data := for $x in cts:search(/organization-branch,
	cts:and-query((
		cts:directory-query($config:RD-ORGANIZATION_BRANCH-PATH,'1'),
		cts:element-value-query(xs:QName('organization-branch:FISCAL_YEAR'),xs:string(fn:max($distinctYears)-4)),
		cts:element-value-query(xs:QName('organization-branch:ORGANIZATION_ID'),$OrganisationID)
	)))
	return element {'organization-branch'} {
		element {'ORGANIZATION_ID'} {$x/organization-branch:ORGANIZATION_ID/text()},
		element {'LOCATION'} {
		if(fn:not($x/organization-branch:STATE/text())) then
			fn:concat($x/organization-branch:CITY/text(),', ',$x/organization-branch:COUNTRY/text())
		else fn:concat($x/organization-branch:CITY/text(),', ',$x/organization-branch:STATE/text())
		},
		element {'NUM_ATTORNEYS'} {$x/organization-branch:NUM_ATTORNEYS/text()},
		element {'PUBLISHYEAR'} {$x/organization-branch:FISCAL_YEAR/text()}
	}

	let $distinc-locations := fn:distinct-values(($max-data,$all-data)/LOCATION/text())

	let $response-arr := json:array()
	let $response := for $location in $distinc-locations

	let $data := if (($max-data/LOCATION[. = $location]) and ($all-data/LOCATION[. = $location])) then
		let $response-obj := json:object()

		let $CUR_NUM_ATTORNEYS := $max-data[LOCATION = $location]/NUM_ATTORNEYS/text()
		let $PRE_NUM_ATTORNEYS := $all-data[LOCATION = $location]/NUM_ATTORNEYS/text()
		let $NetChange := ($CUR_NUM_ATTORNEYS[1] - $PRE_NUM_ATTORNEYS[1]) 
		let $NetChangePos := if(($CUR_NUM_ATTORNEYS[1] - $PRE_NUM_ATTORNEYS[1]) lt 0 )
							then ($CUR_NUM_ATTORNEYS[1] - $PRE_NUM_ATTORNEYS[1]) * -1
							else ($CUR_NUM_ATTORNEYS[1] - $PRE_NUM_ATTORNEYS[1])
		
		
		let $_ := (
        map:put($response-obj,'Organization_Id',0),
		map:put($response-obj,'Organization_Name',$max-data[LOCATION = $location][1]/LOCATION/text()),
        map:put($response-obj,'LOCATION',$max-data[LOCATION = $location][1]/LOCATION/text()),
        map:put($response-obj,'CUR_NUM_ATTORNEYS',$max-data[LOCATION = $location][1]/NUM_ATTORNEYS/text()),
        map:put($response-obj,'PRE_NUM_ATTORNEYS',$all-data[LOCATION = $location][1]/NUM_ATTORNEYS/text()),
        map:put($response-obj,'NETCHANGE',$NetChange),
        map:put($response-obj,'NETCHANGEPOS',$NetChangePos),
		map:put($response-obj,'PreviousYearValue',$PreviousYearValue),
		map:put($response-obj,'CurrentYearValue',$CurrentYearValue)
		)
		let $_ := json:array-push($response-arr,$response-obj)
		return ()
	else ()
	return ()

	return $response-arr
};

declare function firm:GetHeadCountPercentagePostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $organizationID := $request/OrganisationID/text()

	let $checkMergerData := firmnew:GetLawFirmMergerData($organizationID)
	let $data := if($checkMergerData != '') then firm:GetHeadCountPercentagePM($request) else firm:GetHeadCountPercentage($request)
	return $data
};

declare function firm:GetHeadCountPercentage($request)
{
	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query($config:DD-SURVEY-NLJ_250-PATH,'1')
	)))

	let $distinctYears:=  if( fn:not($request//StartYear/text()))
						then fn:max($distinctYears)
						else $distinctYears

	let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$request//OrganisationID,'.xml'))
	let $organizationID := $organization//organization:ORGANIZATION_ID/text()
	let $organizationName := $organization//organization:ORGANIZATION_SHORT_NAME/text()
	let $response-arr := json:array()

	let $data := for $year in ($distinctYears)
				let $response-obj := json:object()
				let $res := cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/','1'),
									cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string($year)),
									cts:element-value-query(xs:QName('nlj250:ORGANIZATION_ID'),$request//OrganisationID/text())
									)))

				(: let $res := cts:search(/,
									cts:and-query((
									cts:directory-query($config:DD-SURVEY-NLJ_250-PATH,'1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$request//OrganisationID/text())
									)))//survey:YEAR[@PublishYear = $year] :)

				let $num_attorneys := if($res//nlj250:NUM_ATTORNEYS/text() ne '') then $res//nlj250:NUM_ATTORNEYS/text() else json:null()
				let $associates := $res//nlj250:NUM_ASSOCIATES/text()
				let $Associate_Per := if($num_attorneys ne 0) then fn:format-number(($associates div $num_attorneys)*100 ,'.00') else json:null()
				let $EquityPartner := if($res//nlj250:EQUITY_PARTNERS/text() ne '') then $res//nlj250:EQUITY_PARTNERS/text() else json:null()
				let $EquityPartner_Per := if($num_attorneys ne 0) then fn:format-number(($EquityPartner div $num_attorneys)*100 ,'.00') else json:null()
				let $NonEquityPartner := if($res//nlj250:NUM_NE_PARTNERS/text() ne '') then $res//nlj250:NUM_NE_PARTNERS/text() else json:null()
				let $NonEquityPartner_Per := if($num_attorneys ne 0) then fn:format-number(($NonEquityPartner div $num_attorneys)*100 ,'.00') else json:null()
				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',xs:integer($organizationID)),
							map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
							map:put($response-obj,'Associates', if(xs:string($associates) ne '') then $associates else json:null()),
							map:put($response-obj,'Associate_Per', $Associate_Per),
							map:put($response-obj,'EquityPartner_Per', $EquityPartner_Per),
							map:put($response-obj,'EquityPartner', $EquityPartner),
							map:put($response-obj,'NonEquityPartner', $NonEquityPartner),
							map:put($response-obj,'NonEquityPartner_Per', $NonEquityPartner_Per),
							map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
							)
				let $_ := json:array-push($response-arr, $response-obj)
				return $num_attorneys

	return $response-arr
};

declare function firm:GetHeadCountPercentagePM($request)
{

	let $OrganisationID := $request/OrganisationID/text()

	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID

	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query($config:DD-SURVEY-NLJ_250-PATH,'1')
	)))

	let $distinctYears:=  if( fn:not($request//StartYear/text()))
						then fn:max($distinctYears)
						else $distinctYears

	(: let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$request//OrganisationID,'.xml'))
	let $organizationID := $organization//organization:ORGANIZATION_ID/text()
	let $organizationName := $organization//organization:ORGANIZATION_SHORT_NAME/text() :)

	let $response-arr := json:array()

	let $data := for $year in ($distinctYears)
				let $response-obj := json:object()
				let $res := cts:search(/,
									cts:and-query((
									cts:directory-query($config:DD-SURVEY-NLJ_250-PATH,'1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$orgIDs)
									)))//survey:YEAR[@PublishYear = $year]

				let $num_attorneys := if($res//survey:NUM_ATTORNEYS/text() != '') then sum($res//survey:NUM_ATTORNEYS/text()) else json:null()
				let $associates := sum($res//survey:NUM_ASSOCIATES/text()) + sum($res//survey:NUM_OTHER_ATTORNEYS/text())
				let $Associate_Per := if($num_attorneys ne 0) then fn:format-number(($associates div $num_attorneys)*100 ,'.00') else json:null()
				let $EquityPartner := if($res//survey:EQUITY_PARTNERS/text() != '') then sum($res//survey:EQUITY_PARTNERS/text()) else json:null()
				let $EquityPartner_Per := if($num_attorneys ne 0) then fn:format-number(($EquityPartner div $num_attorneys)*100 ,'.00') else json:null()
				let $NonEquityPartner := if($res//survey:NUM_NE_PARTNERS/text() != '') then sum($res//survey:NUM_NE_PARTNERS/text()) else json:null()
				let $NonEquityPartner_Per := if($num_attorneys ne 0) then fn:format-number(($NonEquityPartner div $num_attorneys)*100 ,'.00') else json:null()
				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',xs:integer($orgIDs[1])),
							map:put($response-obj,'ORGANIZATION_NAME',''),
							map:put($response-obj,'Associates', if(xs:string($associates) ne '') then $associates else json:null()),
							map:put($response-obj,'Associate_Per', $Associate_Per),
							map:put($response-obj,'EquityPartner_Per', $EquityPartner_Per),
							map:put($response-obj,'EquityPartner', $EquityPartner),
							map:put($response-obj,'NonEquityPartner', $NonEquityPartner),
							map:put($response-obj,'NonEquityPartner_Per', $NonEquityPartner_Per),
							map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
							)
				let $_ := json:array-push($response-arr, $response-obj)
				return $num_attorneys

	return $response-arr
};

(: declare function firm:GetFirmStaffingDiversityMetrics()
{
	let $request := xdmp:get-request-body()/request

	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH,'1')
	)))[1 to 5]

	let $response-arr := json:array()
	let $data := for $year in fn:reverse($distinctYears)
				let $response-obj := json:object()
				let $a := cts:search(//survey:YEAR,
									cts:and-query((
									cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH,'1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$request//OrganisationID/text())
									)))
				let $b := cts:search(//survey:YEAR,
									cts:and-query((
									cts:directory-query($config:DD-SURVEY-DIVERSITY_SCORECARD-PATH,'1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$request//OrganisationID/text())
									)))
				let $c := cts:search(//survey:YEAR,
									cts:and-query((
									cts:directory-query($config:DD-SURVEY-FEMALE_SCORECARD-PATH,'1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$request//OrganisationID/text())
									)))
				let $d := cts:search(//survey:YEAR,
									cts:and-query((
									cts:directory-query($config:DD-SURVEY-NLJ_LGBT-PATH,'1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$request//OrganisationID/text())
									)))    
				(:let $PercentageOfLgbtPartners :=   fn:format-number(((($d/survey:TOTAL_LGBT_ATTORNEYS/text()) - ($d/survey:LGBT_PARTNERS/text())) div $d/survey:TOTAL_LGBT_ATTORNEYS/string()) * 100 , '00'):)
				(:let $PercentageOfLgbtPartners :=  (((($d/survey:TOTAL_LGBT_ATTORNEYS/text()) - ($d/survey:LGBT_PARTNERS/text())) div ($d/survey:TOTAL_LGBT_ATTORNEYS/text())) * 100)
				let $PercentageOfLgbtPartners := if($PercentageOfLgbtPartners > 0)
												then xs:decimal(fn:format-number(((($d/survey:TOTAL_LGBT_ATTORNEYS/text()) - ($d/survey:LGBT_PARTNERS/text())) div ($d/survey:TOTAL_LGBT_ATTORNEYS/text())) * 100 , '.00'))
												else ()
				:)
				let $LGBT_PARTNERS := $d/survey:LGBT_PARTNERS/text()
				let $PercentageOfLgbtPartners := if($LGBT_PARTNERS != 0 and $LGBT_PARTNERS ne "")
					then xs:decimal(fn:format-number(((($d/survey:TOTAL_LGBT_ATTORNEYS/text()) - ($d/survey:LGBT_PARTNERS/text())) div ($d/survey:TOTAL_LGBT_ATTORNEYS/text())) * 100 , '.00'))
					else 0
				let $AfricanAmericanAttorneys := $b/survey:AFRICAN_AMERICAN_PARTNERS + $b/survey:AFRICAN_AMERICAN_ASSOCIATES
				let $AsianAmericanAttorneys := $b/survey:ASIAN_AMERICAN_PARTNERS + $b/survey:ASIAN_AMERICAN_ASSOCIATES
				let $HispanicLatinoAttorneys := $b/survey:HISPANIC_ASSOCIATES + $b/survey:HISPANIC_PARTNERS
				let $_ := (
								map:put($response-obj,'ORGANIZATIONID', xs:integer($a/@OrganizationID/string())),
							map:put($response-obj,'ORGANIZATIONNAME', $a/@OrganizationName/string()),
							map:put($response-obj,'PUBLISHYEAR',  xs:integer($a/@PublishYear/string())),
							map:put($response-obj,'FirmDiversityRank',  xs:integer($b/survey:DIVERSITY_RANK/string())),
							map:put($response-obj,'FirmGenderRank',  xs:integer($c/survey:WOMEN_IN_LAW_RANK/string())),
							map:put($response-obj,'FirmLgbtRank',  xs:integer($d/survey:NLJ_LGBT_RANK/string())),
							map:put($response-obj,'USATTORNEYS',  xs:integer($b/survey:US_ATTORNEYS/string())),
							map:put($response-obj,'PercentageOfMinorityAttorneys',  xs:decimal($b/survey:MINORITY_PERCENTAGE/string()) * 100),
							map:put($response-obj,'PercentageOfFemaleAttorneys',  xs:decimal($c/survey:PCT_FEMALE_ATTORNEYS/string()) * 100),
							map:put($response-obj,'PercentageOfLgbtAttorneys',  xs:decimal($d/survey:PERCENT_LGBT_ATTORNEYS/string()) * 100),
							map:put($response-obj,'PercentageOfMinorityPartners',  xs:decimal($b/survey:MINORITY_PERC_PARTNERS/string()) * 100),
							map:put($response-obj,'PercentageOfFemalePartners',  xs:decimal($c/survey:PCT_FEMALE_PARTNERS/string()) * 100),
							map:put($response-obj,'PercentageOfLgbtPartners',  ($PercentageOfLgbtPartners)),
							map:put($response-obj,'AfricanAmericanAttorneys',  xs:decimal($AfricanAmericanAttorneys)),
							map:put($response-obj,'AsianAmericanAttorneys',  xs:decimal($AsianAmericanAttorneys)),
							map:put($response-obj,'HispanicLatinoAttorneys',  xs:decimal($HispanicLatinoAttorneys)),
							map:put($response-obj,'MultiracialOtherMinorityAtt',  xs:decimal($b/survey:TOTAL_MINORITY_ATTORNEYS/text()))
								)
				let $_ := json:array-push($response-arr, $response-obj)              
				return  ()
	return ($response-arr)
}; :)

declare function firm:GetFirmStaffingDiversityMetricsPostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)

	let $data := if($checkMergerData != '') then mergertool:GetFirmStaffingDiversityMetricsPostMerger($request) else firm:GetFirmStaffingDiversityMetrics($request)
	return $data
};

declare function firm:GetFirmStaffingDiversityMetrics($request)
{
	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query($config:DD-SURVEY-DIVERSITY_SCORECARD-PATH,'1')
	)))[1 to 5]

	let $response-arr := json:array()
	let $data := for $year in fn:reverse($distinctYears)
				let $response-obj := json:object()
				let $a := cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1'),
									cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
									cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$request//OrganisationID/text())
									)))

				let $b := cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/Diversity_Scorecard/','1'),
									cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($year)),
									cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$request//OrganisationID/text())
									)))
				let $c := cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/','1'),
									cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($year)),
									cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$request//OrganisationID/text())
									)))[1]
				let $d := cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_LGBT/','1'),
									cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($year)),
									cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$request//OrganisationID/text())
									)))

				let $nlj250 := cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/','1'),
									cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string($year)),
									cts:element-value-query(xs:QName('nlj250:ORGANIZATION_ID'),$request//OrganisationID/text())
									)))					    
				
				let $LGBT_PARTNERS := $d//nljlgbt:LGBT_PARTNERS/text()
			

				let $PercentageOfLgbtPartners := if($LGBT_PARTNERS != 0 and $LGBT_PARTNERS ne "")
					then xs:decimal(fn:format-number(((($d//nljlgbt:LGBT_PARTNERS/text())) div ($nlj250//nlj250:NUM_PARTNERS/text())) * 100 , '.00'))
					else 0	
				let $AfricanAmericanAttorneys := $b//Diversity_Scorecard:AFRICAN_AMERICAN_PARTNERS + $b//Diversity_Scorecard:AFRICAN_AMERICAN_ASSOCIATES
				let $AsianAmericanAttorneys := $b//Diversity_Scorecard:ASIAN_AMERICAN_PARTNERS + $b//Diversity_Scorecard:ASIAN_AMERICAN_ASSOCIATES
				let $HispanicLatinoAttorneys := $b//Diversity_Scorecard:HISPANIC_ASSOCIATES + $b//Diversity_Scorecard:HISPANIC_PARTNERS
				let $firmDiversityRank :=if($b//Diversity_Scorecard:DIVERSITY_RANK/text() ne '') then xs:integer($b//Diversity_Scorecard:DIVERSITY_RANK/text()) else 0
				let $firmGenderRank := if($c//FEMALE_SCORECARD:WOMEN_IN_LAW_RANK/text() ne '') then  xs:integer($c//FEMALE_SCORECARD:WOMEN_IN_LAW_RANK/text()) else 0
				let $firmLgbtRank := if($d//nljlgbt:NLJ_LGBT_RANK/text() ne '') then xs:integer($d//nljlgbt:NLJ_LGBT_RANK/text()) else 0
				let $usAttorneys := if($b//Diversity_Scorecard:US_ATTORNEYS/text() ne '') then xs:integer($b//Diversity_Scorecard:US_ATTORNEYS/text()) else 0
				let $perOfMinorityAtt := if($b//Diversity_Scorecard:MINORITY_PERCENTAGE/text() ne '') then  xs:decimal($b//Diversity_Scorecard:MINORITY_PERCENTAGE/text()) * 100 else 0
				let $perOfFemaleAtt := if($c//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text() ne '') then xs:decimal($c//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text()) * 100 else 0
				let $perOfLGBTAtt := if($d//nljlgbt:PERCENT_LGBT_ATTORNEYS/text() ne '') then  xs:decimal($d//nljlgbt:PERCENT_LGBT_ATTORNEYS/text()) * 100 else 0
				let $perOfMinorityAttPartner := if($b//Diversity_Scorecard:MINORITY_PERC_PARTNERS/text() ne '') then xs:decimal($b//Diversity_Scorecard:MINORITY_PERC_PARTNERS/text()) * 100 else 0
				let $perOfFemalePartner := if($c//FEMALE_SCORECARD:PCT_FEMALE_PARTNERS/text() ne '') then xs:decimal($c//FEMALE_SCORECARD:PCT_FEMALE_PARTNERS/text()) * 100  else 0
				
				let $africanAmericanAtt := if(xs:string($AfricanAmericanAttorneys) ne '') then xs:decimal($AfricanAmericanAttorneys) else 0
				let $asianAmericanAtt := if(xs:string($AsianAmericanAttorneys) ne '') then xs:decimal($AsianAmericanAttorneys) else 0
				let $hisAtt := if(xs:string($HispanicLatinoAttorneys) ne '') then xs:decimal($HispanicLatinoAttorneys)  else 0
				let $multiracialAtt := if($b//Diversity_Scorecard:TOTAL_MINORITY_ATTORNEYS/text() ne '') then 
										xs:decimal($b//Diversity_Scorecard:OTHER_PARTNERS/text())  + xs:decimal($b//Diversity_Scorecard:OTHER_NONPARTNERS/text()) 
									  else 0

				let $_ := (
								map:put($response-obj,'ORGANIZATIONID', xs:integer($request//OrganisationID/text())),
							map:put($response-obj,'ORGANIZATIONNAME', $b//Diversity_Scorecard:ORGANIZATION_NAME/text()),
							map:put($response-obj,'PUBLISHYEAR',  xs:integer($year)),
							map:put($response-obj,'FirmDiversityRank',  $firmDiversityRank),
							map:put($response-obj,'FirmGenderRank', $firmGenderRank),
							map:put($response-obj,'FirmLgbtRank', $firmLgbtRank ),
							map:put($response-obj,'UsAttorneys', $usAttorneys),
							map:put($response-obj,'PercentageOfMinorityAttorneys',  $perOfMinorityAtt),
							map:put($response-obj,'PercentageOfFemaleAttorneys',   $perOfFemaleAtt),
							map:put($response-obj,'PercentageOfLgbtAttorneys', $perOfLGBTAtt),
							map:put($response-obj,'PercentageOfMinorityPartners', $perOfMinorityAttPartner),
							map:put($response-obj,'PercentageOfFemalePartners', $perOfFemalePartner),
							map:put($response-obj,'PercentageOfLgbtPartners',  ($PercentageOfLgbtPartners)),
							map:put($response-obj,'AfricanAmericanAttorneys',$africanAmericanAtt),
							map:put($response-obj,'AsianAmericanAttorneys',  $asianAmericanAtt),
							map:put($response-obj,'HispanicLatinoAttorneys',  $hisAtt),
							map:put($response-obj,'MultiracialOtherMinorityAtt', $multiracialAtt)
								)
				let $_ :=if($a or $b or $c or $d or $nlj250 or $LGBT_PARTNERS) then json:array-push($response-arr, $response-obj) else()
				return  ()
	return ($response-arr)
};

declare function firm:GetDiversityPartnerPieChartPostMerger()
{
	let $request := xdmp:get-request-body()/request

	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $data := if($checkMergerData != '') then firm:GetDiversityPartnerPieChartPM($request) else firm:GetDiversityPartnerPieChart($request)
	return $data
};

declare function firm:GetDiversityPartnerPieChart($request)
{

	let $distinctYears := max(cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query($config:DD-SURVEY-DIVERSITY_SCORECARD-PATH,'1')
	))))

	let $response-arr := json:array()
	let $data := for $year in fn:reverse($distinctYears)
				let $response-obj := json:object()
				let $res := cts:search(//survey:YEAR,
									cts:and-query((
									cts:directory-query($config:DD-SURVEY-DIVERSITY_SCORECARD-PATH,'1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$request//OrganisationID/text())
									)))  

				let $AFRICAN_AMERICAN_PARTNERS := if($res/survey:AFRICAN_AMERICAN_PARTNERS/string() ne '') then xs:integer($res/survey:AFRICAN_AMERICAN_PARTNERS/string()) else 0
				let $HISPANIC_PARTNERS := if($res/survey:HISPANIC_PARTNERS/string() ne '') then xs:integer($res/survey:HISPANIC_PARTNERS/string()) else 0
				let $ASIAN_AMERICAN_PARTNERS := if($res/survey:ASIAN_AMERICAN_PARTNERS/string() ne '') then xs:integer($res/survey:ASIAN_AMERICAN_PARTNERS/string()) else 0
				let $OTHER_PARTNERS := if($res/survey:OTHER_PARTNERS/string() ne '') then xs:integer($res/survey:OTHER_PARTNERS/string()) else 0
				let $MINORITY_PERC_PARTNERS := if($res/survey:MINORITY_PERC_PARTNERS/string() ne '') then xs:decimal($res/survey:MINORITY_PERC_PARTNERS/string()) else 0
				
				let $CAUCASIANPARTNERS := if($MINORITY_PERC_PARTNERS ne 0) then (($ASIAN_AMERICAN_PARTNERS+$AFRICAN_AMERICAN_PARTNERS+$HISPANIC_PARTNERS+$OTHER_PARTNERS) div $MINORITY_PERC_PARTNERS)-($ASIAN_AMERICAN_PARTNERS+$AFRICAN_AMERICAN_PARTNERS+$HISPANIC_PARTNERS+$OTHER_PARTNERS) else 0

				let $_ := (
								map:put($response-obj,'ORGANIZATIONID', xs:integer($request//OrganisationID/text())),
							map:put($response-obj,'ORGANIZATIONNAME', $res/@OrganizationName/string()),
							map:put($response-obj,'PUBLISHYEAR',  if($res/@PublishYear/string() ne '') then xs:integer($res/@PublishYear/string()) else 0),
							map:put($response-obj,'AFRICANAMERICANPARTNERS', $AFRICAN_AMERICAN_PARTNERS),
							map:put($response-obj,'HISPANICPARTNERS', $HISPANIC_PARTNERS),
							map:put($response-obj,'ASIANAMERICANPARTNERS',  $ASIAN_AMERICAN_PARTNERS),
							map:put($response-obj,'OTHERPARTNERS', $OTHER_PARTNERS),
							map:put($response-obj,'CAUCASIANPARTNERS', $CAUCASIANPARTNERS)
							)
				let $_ := json:array-push($response-arr, $response-obj)              
				return ()

	return ($response-arr)
};

declare function firm:GetDiversityPartnerPieChartPM($request)
{
	
	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID	

	let $distinctYears := max(cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query($config:DD-SURVEY-DIVERSITY_SCORECARD-PATH,'1')
	))))

	let $response-arr := json:array()
	let $data := for $year in fn:reverse($distinctYears)
				let $response-obj := json:object()
				let $res := cts:search(//survey:YEAR,
									cts:and-query((
									cts:directory-query($config:DD-SURVEY-DIVERSITY_SCORECARD-PATH,'1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$orgIDs)
									)))  

				let $AFRICAN_AMERICAN_PARTNERS := if($res/survey:AFRICAN_AMERICAN_PARTNERS/text() != '') then xs:integer(sum($res/survey:AFRICAN_AMERICAN_PARTNERS/text())) else 0
				let $HISPANIC_PARTNERS := if($res/survey:HISPANIC_PARTNERS/text() != '') then xs:integer(sum($res/survey:HISPANIC_PARTNERS/text())) else 0
				let $ASIAN_AMERICAN_PARTNERS := if($res/survey:ASIAN_AMERICAN_PARTNERS/text() != '') then xs:integer(sum($res/survey:ASIAN_AMERICAN_PARTNERS/text())) else 0
				let $OTHER_PARTNERS := if($res/survey:OTHER_PARTNERS/text() != '') then xs:integer(sum($res/survey:OTHER_PARTNERS/text())) else 0
				let $MINORITY_PERC_PARTNERS := if($res/survey:MINORITY_PERC_PARTNERS/text() != '') then xs:decimal(sum($res/survey:MINORITY_PERC_PARTNERS/text())) else 0
				
				let $CAUCASIANPARTNERS := if($MINORITY_PERC_PARTNERS ne 0) then (($ASIAN_AMERICAN_PARTNERS+$AFRICAN_AMERICAN_PARTNERS+$HISPANIC_PARTNERS+$OTHER_PARTNERS) div $MINORITY_PERC_PARTNERS)-($ASIAN_AMERICAN_PARTNERS+$AFRICAN_AMERICAN_PARTNERS+$HISPANIC_PARTNERS+$OTHER_PARTNERS) else 0

				let $_ := (
								map:put($response-obj,'ORGANIZATIONID', xs:integer($request//OrganisationID/text())),
							map:put($response-obj,'ORGANIZATIONNAME', $res/@OrganizationName/string()),
							map:put($response-obj,'PUBLISHYEAR',  if($res/@PublishYear/string() ne '') then xs:integer($res/@PublishYear/string()) else 0),
							map:put($response-obj,'AFRICANAMERICANPARTNERS', $AFRICAN_AMERICAN_PARTNERS),
							map:put($response-obj,'HISPANICPARTNERS', $HISPANIC_PARTNERS),
							map:put($response-obj,'ASIANAMERICANPARTNERS',  $ASIAN_AMERICAN_PARTNERS),
							map:put($response-obj,'OTHERPARTNERS', $OTHER_PARTNERS),
							map:put($response-obj,'CAUCASIANPARTNERS', $CAUCASIANPARTNERS)
							)
				let $_ := json:array-push($response-arr, $response-obj)              
				return ()

	return ($response-arr)
};

declare function firm:GetDiversityGrowthPostMerger($OrganisationID,$Interval)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $data := if($checkMergerData != '') then firm:GetDiversityGrowthPM($OrganisationID,$Interval) else firm:GetDiversityGrowth($OrganisationID,$Interval)
	return $data
};

declare function firm:GetDiversityGrowth($OrganisationID,$Interval)
{
	let $distinctYears := (cts:element-values(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),(),('descending'),
		cts:and-query((
			cts:directory-query('/LegalCompass/relational-data/surveys/Diversity_Scorecard/','1')
		))))

	let $response-arr := json:array()
	
	

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $data := for $year in $yearss
		let $response-obj := json:object()
		let $res := cts:search(/Diversity_Scorecard:DiversityScorecard,
			cts:and-query((
				 cts:directory-query('/LegalCompass/relational-data/surveys/Diversity_Scorecard/','1')
				,cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($year))
				,cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$OrganisationID)
			)))  
		
		let $total_attorneys := $res/Diversity_Scorecard:TOTAL_ATTORNEYS/text()
		(: let $PerOfMinorityAttorneys := fn:round-half-to-even(($res/Diversity_Scorecard:TOTAL_MINORITY_ATTORNEYS/text() div $total_attorneys) * 100 , 2) :)
		let $PerOfMinorityAttorneys := fn:round-half-to-even(($res//Diversity_Scorecard:MINORITY_PERCENTAGE) * 100 , 2)
		let $PerOfAfricanAmericanAttorneys := fn:round-half-to-even((($res/Diversity_Scorecard:AFRICAN_AMERICAN_ASSOCIATES/text() + $res/Diversity_Scorecard:AFRICAN_AMERICAN_PARTNERS/text()) div $total_attorneys) * 100 , 2)
		let $PerOfAsianAmericanAttorneys := fn:round-half-to-even((($res/Diversity_Scorecard:ASIAN_AMERICAN_ASSOCIATES/text() + $res/Diversity_Scorecard:ASIAN_AMERICAN_PARTNERS/text()) div $total_attorneys) * 100 , 2)
		let $PerOfHispanicLatinoAttorneys := fn:round-half-to-even((($res/Diversity_Scorecard:HISPANIC_ASSOCIATES/text() + $res/Diversity_Scorecard:HISPANIC_PARTNERS/text()) div $total_attorneys) * 100 , 2)
		let $PerOfMultiracialOtherAttorneys := if(($res/Diversity_Scorecard:OTHER_ATTORNEYS/text() ne '' ))then
				fn:round-half-to-even((($res/Diversity_Scorecard:OTHER_ATTORNEYS/text()) div $total_attorneys) * 100 , 2)
			else ()
			
		(: fn:round-half-to-even(( ( ( $res - map:get($Lag1-obj,'GROSSREVENUE') ) div map:get($Lag1-obj,'GROSSREVENUE') ) * 100 ), 2) :)
		
		
		let $_ := (
			map:put($response-obj,'ORGANIZATIONID', xs:integer($OrganisationID)),
			map:put($response-obj,'ORGANIZATIONNAME', ($res//Diversity_Scorecard:ORGANIZATION_NAME/text())),
			map:put($response-obj,'PUBLISHYEAR', xs:integer($res//Diversity_Scorecard:PUBLISHYEAR/text())),
			map:put($response-obj,'PerOfMinorityAttorneys', xs:decimal($PerOfMinorityAttorneys)),
			map:put($response-obj,'PerOfAfricanAmericanAttorneys', xs:decimal($PerOfAfricanAmericanAttorneys)),
			map:put($response-obj,'PerOfAsianAmericanAttorneys', xs:decimal($PerOfAsianAmericanAttorneys)),
			map:put($response-obj,'PerOfHispanicLatinoAttorneys', xs:decimal($PerOfHispanicLatinoAttorneys)),
			map:put($response-obj,'PerOfMultiracialOtherAttorneys',($PerOfMultiracialOtherAttorneys))
		) 
		
		let $_ := if($res ne '') then json:array-push($response-arr, $response-obj) else()
		return ()

	return ($response-arr)
	(: return ($data) :)
};


declare function firm:GetDiversityGrowthPM($OrganisationID,$Interval)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID

	let $distinctYears := (cts:element-values(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),(),('descending'),
		cts:and-query((
			cts:directory-query('/LegalCompass/relational-data/surveys/Diversity_Scorecard/','1')
		))))

	let $response-arr := json:array()

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $data := for $year in $yearss
		let $response-obj := json:object()
		let $res := cts:search(/Diversity_Scorecard:DiversityScorecard,
			cts:and-query((
				 cts:directory-query('/LegalCompass/relational-data/surveys/Diversity_Scorecard/','1')
				,cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($year))
				,cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$orgIDs)
			)))  
		
		let $total_attorneys := sum($res/Diversity_Scorecard:TOTAL_ATTORNEYS/text())
		
		let $PerOfMinorityAttorneys := fn:round-half-to-even((sum($res//Diversity_Scorecard:MINORITY_PERCENTAGE)) * 100 , 2)
		let $PerOfAfricanAmericanAttorneys := if($total_attorneys) then fn:round-half-to-even(((sum($res/Diversity_Scorecard:AFRICAN_AMERICAN_ASSOCIATES/text()) + sum($res/Diversity_Scorecard:AFRICAN_AMERICAN_PARTNERS/text())) div $total_attorneys) * 100 , 2) else 0
		let $PerOfAsianAmericanAttorneys := if($total_attorneys) then fn:round-half-to-even(((sum($res/Diversity_Scorecard:ASIAN_AMERICAN_ASSOCIATES/text()) + sum($res/Diversity_Scorecard:ASIAN_AMERICAN_PARTNERS/text())) div $total_attorneys) * 100 , 2) else 0
		let $PerOfHispanicLatinoAttorneys := if($total_attorneys) then fn:round-half-to-even(((sum($res/Diversity_Scorecard:HISPANIC_ASSOCIATES/text()) + sum($res/Diversity_Scorecard:HISPANIC_PARTNERS/text())) div $total_attorneys) * 100 , 2) else 0
		let $PerOfMultiracialOtherAttorneys := if(($res/Diversity_Scorecard:OTHER_ATTORNEYS/text() ne '' ))then
				fn:round-half-to-even(((sum($res/Diversity_Scorecard:OTHER_ATTORNEYS/text())) div $total_attorneys) * 100 , 2)
			else ()
			
		(: fn:round-half-to-even(( ( ( $res - map:get($Lag1-obj,'GROSSREVENUE') ) div map:get($Lag1-obj,'GROSSREVENUE') ) * 100 ), 2) :)
		
		
		let $_ := (
			map:put($response-obj,'ORGANIZATIONID', xs:integer($OrganisationID)),
			map:put($response-obj,'ORGANIZATIONNAME', ($res[1]//Diversity_Scorecard:ORGANIZATION_NAME/text())),
			map:put($response-obj,'PUBLISHYEAR', xs:integer($res[1]//Diversity_Scorecard:PUBLISHYEAR/text())),
			map:put($response-obj,'PerOfMinorityAttorneys', xs:decimal($PerOfMinorityAttorneys)),
			map:put($response-obj,'PerOfAfricanAmericanAttorneys', xs:decimal($PerOfAfricanAmericanAttorneys)),
			map:put($response-obj,'PerOfAsianAmericanAttorneys', xs:decimal($PerOfAsianAmericanAttorneys)),
			map:put($response-obj,'PerOfHispanicLatinoAttorneys', xs:decimal($PerOfHispanicLatinoAttorneys)),
			map:put($response-obj,'PerOfMultiracialOtherAttorneys',($PerOfMultiracialOtherAttorneys))
		) 
		
		let $_ := if($res != '') then json:array-push($response-arr, $response-obj) else()
		return ()

	return ($response-arr)
	(: return ($data) :)
};

declare function firm:GetRevenueChangesPostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $OrganizationID := $request//OrganisationID/text()

	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganizationID)
	let $data := if($checkMergerData != '') then firm:GetRevenueChangesPM($request) else firm:GetRevenueChanges($request)
	return $data

};

declare function firm:GetRevenueChanges($request)
{
	
	let $isGBP := $request/IsDisplayGBP/text()
	let $isDisplayGBP := if($isGBP ne '') then $isGBP else 'false'
	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
	)))
	

	let $distinctYears := if($request/StartYear/text() ne "" and $request/EndYear/text() ne "") then
                      for $year in $distinctYears
                      where $year >= xs:integer($request/StartYear/text()) and   $year le xs:integer($request/EndYear/text())
                      return $year
                      else $distinctYears[1 to 5]   (: fn:tokenize('2017,2016,2015,2014,2013',','):)
                      
	let $OrganizationID := $request//OrganisationID/text()
	let $organizationName := if((/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text())[1] ne '')then 
	/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text()[1]
	else 
	/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ORGANIZATION_NAME/text()[1]
		
	let $response-arr := json:array()
	let $Lag1-obj := json:object()

	

	let $amlaw200maxYearData := cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganizationID)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($distinctYears)))
			)))[1]	

	let $uk50maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
				cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
			)))[1]

	let $global100maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
				cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganizationID))
			)))[1]

	let $china40maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/'),
				cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganizationID))
			)))[1]						

	let $maxYearData := if($uk50maxYearData ne '' or $amlaw200maxYearData ne '' or $global100maxYearData ne '' or $china40maxYearData ne '') then 'Y' else ()

	let $Interval := $request//Interval/text()
	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])
	
	let $data := for $year in $yearss
	
	let $response-obj := json:object()

	
	    let $amlaw200CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1] else()

		let $amlaw00IDPreYear := if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
					cts:and-query((
						cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
						cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
						cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($OrganizationID))
						)))[1] else()


	let $amlaw200Change := if($amlaw00IDPreYear//AMLAW_200:GROSS_REVENUE/text() ne '') then (($amlaw200CurrentYear//AMLAW_200:GROSS_REVENUE/text() - $amlaw00IDPreYear//AMLAW_200:GROSS_REVENUE/text()) div $amlaw00IDPreYear//AMLAW_200:GROSS_REVENUE/text()) * 100 else 0
	
	let $global100CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1] else ()

		let $global100IDPreYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
					cts:and-query((
						cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
						cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
						cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganizationID))
						)))[1] else ()

		let $global100Change := if($global100IDPreYear//Global_100:GROSS_REVENUE/text() ne '') then (($global100CurrentYear//Global_100:GROSS_REVENUE/text() - $global100IDPreYear//Global_100:GROSS_REVENUE/text()) div $global100IDPreYear//Global_100:GROSS_REVENUE/text()) * 100 else 0

		let $china40CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1] else ()

		let $china40IDPreYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
					cts:and-query((
						cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
						cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
						cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganizationID))
						)))[1] else ()

		(: let $china40Change := if($china40IDPreYear//CHINA_40:GROSS_REVENUE/text() ne '') then (($china40CurrentYear//CHINA_40:GROSS_REVENUE/text() - $china40IDPreYear//CHINA_40:GROSS_REVENUE/text()) div $china40IDPreYear//CHINA_40:GROSS_REVENUE/text()) * 100 else 0 :)

		let $uk50IDCurrentYear := if(xs:string($isDisplayGBP) eq 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1]//UK_50:GROSS_REVENUE_POUND_M/text()

								  else cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1]//UK_50:GROSS_REVENUE_DOLLAR/text()				

	
		let $uk50IDPreYear := if(xs:string($isDisplayGBP) eq 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year - 1)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1]//UK_50:GROSS_REVENUE_POUND_M/text()

								  else cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year - 1)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1]//UK_50:GROSS_REVENUE_DOLLAR/text()
		
		let $uk50Change := if($uk50IDPreYear ne '') then ($uk50IDCurrentYear - $uk50IDPreYear) div $uk50IDPreYear else 0	
		
		let $grossRev := if($amlaw200CurrentYear//AMLAW_200:GROSS_REVENUE/text() ne '') then $amlaw200CurrentYear//AMLAW_200:GROSS_REVENUE/text() else
						  if($global100CurrentYear//Global_100:GROSS_REVENUE/text() ne '') then $global100CurrentYear//Global_100:GROSS_REVENUE/text()
						  else if($uk50IDCurrentYear) then $uk50IDCurrentYear
						  else $china40CurrentYear//CHINA_40:GROSS_REVENUE/text()
		
		let $grossRevPreviousYear := if($amlaw00IDPreYear//AMLAW_200:GROSS_REVENUE/text() ne '') then $amlaw00IDPreYear//AMLAW_200:GROSS_REVENUE/text() else
						  if($global100IDPreYear//Global_100:GROSS_REVENUE/text() ne '') then $global100IDPreYear//Global_100:GROSS_REVENUE/text()
						  else if($uk50IDPreYear) then $uk50IDPreYear
						  else $china40IDPreYear//CHINA_40:GROSS_REVENUE/text()
		
	let $resGrossRevenue :=  if(fn:not($amlaw200CurrentYear ne '') and fn:not($global100CurrentYear ne '') and fn:not($uk50IDCurrentYear ne '') and fn:not($china40CurrentYear)) then -1000
			  				 else if($grossRevPreviousYear ne 0 and $grossRev ne 0) then (($grossRev - $grossRevPreviousYear) div $grossRevPreviousYear) * 100 else 0

	let $isAddMaxYear := if(xs:string($year) ne xs:string(max($distinctYears))) then 'y' else
						 if($amlaw200CurrentYear ne '' or $global100CurrentYear ne '' or $uk50IDCurrentYear ne '' or $china40CurrentYear ne '') then 'y' else 'n' 							
								
		
	let $_ := (
		map:put($response-obj,'ORGANIZATION_ID',xs:integer($OrganizationID)),
		map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
		map:put($response-obj,'CHANGE', fn:round-half-to-even($resGrossRevenue,2)),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
	
	let $_ := if(xs:string($year) ne xs:string(max($distinctYears)) and $isAddMaxYear ne 'n') then json:array-push($response-arr, $response-obj) else
			  if($maxYearData ne '' and $isAddMaxYear ne 'n' and ($amlaw200CurrentYear//AMLAW_200:GROSS_REVENUE/text() ne '' or $global100CurrentYear//Global_100:GROSS_REVENUE/text() ne '' or $uk50IDCurrentYear ne 0))
						 then json:array-push($response-arr,$response-obj) else()

	(:------------Global 200 part------------------:)
    let $response-obj := json:object()
  
	(: let $distinctid_global_100_Current  := cts:element-values(xs:QName("Global_100:ORGANIZATION_ID"),(),(),
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/")      
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"),xs:string($year))
      ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
    ))) :)
  
   let $res4 := xs:integer(avg(cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/") 
      
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"), xs:string($year))
	  ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
	  ,cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",100)
    )))//Global_100:GROSS_REVENUE/text()))
    
   (: let $distinctid_global_100  := cts:element-values(xs:QName("Global_100:ORGANIZATION_ID"),(),(),
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/")      
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"),xs:string(xs:integer($year) - 1))
      ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
    ))) :)
  
   let $lag4 := xs:integer(avg(cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/") 
      
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"), xs:string(xs:integer($year) - 1))
	  ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
	  ,cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",100)
    )))//Global_100:GROSS_REVENUE/text()))
    
   let $CHANGE := if(fn:not($resGrossRevenue ne -1000)) then -1000
   				  else if($res4 ne  0 and $lag4 ne 0) then fn:round-half-to-even((xs:double($res4 - $lag4) div  $lag4 ) * 100 , 2) else 0
    
   let $_ := (
	    map:put($response-obj,'ORGANIZATION_ID', 0),
      map:put($response-obj,'ORGANIZATION_NAME', 'Global 100'),
      map:put($response-obj,'CHANGE', $CHANGE),
      map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
	  )
    let $_ := if($isAddMaxYear ne 'n' and xs:string($isDisplayGBP) ne 'true') then  json:array-push($response-arr, $response-obj) else()

	(:----------------------------------------------------------------------------------:)
	
	let $distinctid_lt_100_current  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '<=',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		)))
	let $response-obj := json:object()
	
	(: let $res2 := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/','1')
		,cts:element-value-query(xs:QName('firm-org:OrganizationID'),($distinctid_lt_100_current ! xs:string(.)))
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'), xs:string($year))
		)))//firm-org:AMLAW_200_GROSS_REVENUE/text())) :)

	let $res2 := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
		)))//AMLAW_200:GROSS_REVENUE/text()))	

	let $res2-LAG := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string(xs:integer($year) - 1))
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
		)))//AMLAW_200:GROSS_REVENUE/text()))	
		
	(: let $distinctid_lt_100  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '<=',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string(xs:integer($year) - 1))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		)))
		
	let $res2-LAG := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/','1')
		,cts:element-value-query(xs:QName('firm-org:OrganizationID'),($distinctid_lt_100 ! xs:string(.)))
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'), xs:string(xs:integer($year) - 1))
		)))//firm-org:AMLAW_200_GROSS_REVENUE/text())) :)
		
	let $CHANGE := if(fn:not($resGrossRevenue ne -1000)) then -1000
				   else fn:round-half-to-even((xs:double($res2 - $res2-LAG) div  $res2-LAG ) * 100 , 2)
	
	let $_ := (
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'Am Law 100'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
	let $_ := if($isAddMaxYear ne 'n'  and xs:string($isDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else()
		
	(:----------------------------------------------------------------:)
	
	let $response-obj := json:object()
	
	(: let $distinctid_gt_100_Current  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		)))
	
	let $res3 := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/','1')
		,cts:element-value-query(xs:QName('firm-org:OrganizationID'),($distinctid_gt_100_Current ! xs:string(.)))
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'), xs:string($year))
		)))//firm-org:AMLAW_200_GROSS_REVENUE/text()))
		
		let $distinctid_gt_100  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string(xs:integer($year) - 1 ))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		)))
		
		let $res3-LAG := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/','1')
		,cts:element-value-query(xs:QName('firm-org:OrganizationID'),($distinctid_gt_100 ! xs:string(.)))
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'), xs:string(xs:integer($year) - 1))
		)))//firm-org:AMLAW_200_GROSS_REVENUE/text())) :)

		let $res3 := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
		)))//AMLAW_200:GROSS_REVENUE/text()))	

		let $res3-LAG := xs:integer(avg(cts:search(/,
			cts:and-query((
			cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
			,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
			,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string(xs:integer($year) - 1))
			,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
			)))//AMLAW_200:GROSS_REVENUE/text()))
		
		let $CHANGE := if(fn:not($resGrossRevenue ne -1000)) then -1000
					   else if($res3 ne 0 and $res3-LAG ne 0) then fn:round-half-to-even((xs:double($res3 - $res3-LAG) div  $res3-LAG ) * 100 , 2) else 0
		
		let $_ := (
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'Am Law 2nd Hundred'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		let $_ :=if($isAddMaxYear ne 'n'  and xs:string($isDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else ()

		(:------------------------UK50------------------------:)

	let $response-obj := json:object()
					
					let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")(:,
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)):),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
							)))[1]//UK_50:ORGANIZATION_ID/text()

					(: let $distinctid_gt_100_Cur := fn:distinct-values(cts:search(/,
										cts:and-query((
											cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
											cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
											)))//UK_50:ORGANIZATION_ID/text()) :)

		
					let $res3 := if(xs:string($isDisplayGBP) ne 'true') then xs:integer(avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
										,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
										,cts:element-range-query(xs:QName('UK_50:UK_50_RANK'),'<=',xs:integer(50))
										)))//UK_50:GROSS_REVENUE_DOLLAR/text()))
								 else xs:integer(avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
										,cts:element-range-query(xs:QName('UK_50:UK_50_RANK'),'<=' , xs:integer(50))
										,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
										)))//UK_50:GROSS_REVENUE_POUND_M/text()))		
					
					(: let $distinctid_gt_100  :=fn:distinct-values(cts:search(/,
									cts:and-query((
										cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
										cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($year) - 1))
										)))//UK_50:ORGANIZATION_ID/text()) :)
		
					let $res3-LAG := if(xs:string($isDisplayGBP) ne 'true') then xs:integer(avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
										,cts:element-range-query(xs:QName('UK_50:UK_50_RANK'),'<=' , xs:integer(50))
										,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($year) -1))
										)))//UK_50:GROSS_REVENUE_DOLLAR/text()))

									 else xs:integer(avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
										,cts:element-range-query(xs:QName('UK_50:UK_50_RANK'),'<=' , xs:integer(50))
										,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($year) -1))
										)))//UK_50:GROSS_REVENUE_POUND_M/text()))	
					
					let $difference := $res3 - $res3-LAG

					let $CHANGE := if($res3 ne 0 and $res3-LAG ne 0  and xs:string($resGrossRevenue) ne '-1000') then fn:round-half-to-even((xs:double($difference) div  $res3-LAG ) * 100 , 2) else -1000
					
					let $_ :=(
						map:put($response-obj,'ORGANIZATION_ID', 0),
						map:put($response-obj,'ORGANIZATION_NAME', 'UK 50'),
						map:put($response-obj,'CHANGE', $CHANGE),
						map:put($response-obj,'res', $isAddMaxYear),
						map:put($response-obj,'res3-LAG', $res3-LAG),
						map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
					)
					let $_ := if($uk50ID != '') then json:array-push($response-arr, $response-obj)
							else()	
				
				return ()
	return ($response-arr)	
	
};

declare function firm:GetRevenueChangesPM($request)
{
	let $OrganizationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetMergedFirmData($OrganizationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganizationID),',') else $OrganizationID						
	let $isGBP := $request/IsDisplayGBP/text()
	let $isDisplayGBP := if($isGBP ne '') then $isGBP else 'false'
	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
	)))
	

	let $distinctYears := if($request/StartYear/text() ne "" and $request/EndYear/text() ne "") then
                      for $year in $distinctYears
                      where $year >= xs:integer($request/StartYear/text()) and   $year le xs:integer($request/EndYear/text())
                      return $year
                      else $distinctYears[1 to 5]   (: fn:tokenize('2017,2016,2015,2014,2013',','):)
                      
	
	

		
	let $response-arr := json:array()
	let $Lag1-obj := json:object()

	(: let $maxYearData := cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganizationID)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($distinctYears)))
			)))[1] :)
	let $orggIDD :=  $checkMergerData//FirmData
	let $Interval := $request//Interval/text()
	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])		
	
	let $uk50ID := cts:search(/,
										cts:and-query((
											cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
											cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$orggIDD//FirmID)
											)))//UK_50:ORGANIZATION_ID/text()

	let $data := for $year in $yearss
					let $loopData := for $item in $checkMergerData//FirmData
									let $OrganizationID := $item//FirmID/text()
									let $organizationName := $item//FirmName/text()
																
									let $response-obj := json:object()

	
									let $amlaw200CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
																			cts:and-query((
																				cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
																				cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
																				cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($OrganizationID))
																				)))[1] else()

									let $amlaw00IDPreYear := if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
													cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1] else()


									let $amlaw200Change := if($amlaw00IDPreYear//AMLAW_200:GROSS_REVENUE/text() ne '') then (($amlaw200CurrentYear//AMLAW_200:GROSS_REVENUE/text() - $amlaw00IDPreYear//AMLAW_200:GROSS_REVENUE/text()) div $amlaw00IDPreYear//AMLAW_200:GROSS_REVENUE/text()) * 100 else 0
									
									let $global100CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
																				cts:and-query((
																					cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																					cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
																					cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganizationID))
																					)))[1] else ()

										let $global100IDPreYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
													cts:and-query((
														cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
														cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
														cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganizationID))
														)))[1] else ()

										let $global100Change := if($global100IDPreYear//Global_100:GROSS_REVENUE/text() ne '') then (($global100CurrentYear//Global_100:GROSS_REVENUE/text() - $global100IDPreYear//Global_100:GROSS_REVENUE/text()) div $global100IDPreYear//Global_100:GROSS_REVENUE/text()) * 100 else 0

										let $china40CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1] else ()

										let $china40IDPreYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
													cts:and-query((
														cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
														cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
														cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganizationID))
														)))[1] else ()

										let $uk50IDCurrentYear := if(xs:string($isDisplayGBP) eq 'true') then cts:search(/,
																				cts:and-query((
																					cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																					cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																					cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
																					)))[1]//UK_50:GROSS_REVENUE_POUND_M/text()

																else cts:search(/,
																				cts:and-query((
																					cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																					cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																					cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
																					)))[1]//UK_50:GROSS_REVENUE_DOLLAR/text()				

	
										let $uk50IDPreYear := if(xs:string($isDisplayGBP) eq 'true') then cts:search(/,
																				cts:and-query((
																					cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																					cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year - 1)),
																					cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
																					)))[1]//UK_50:GROSS_REVENUE_POUND_M/text()

																else cts:search(/,
																				cts:and-query((
																					cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																					cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year - 1)),
																					cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
																					)))[1]//UK_50:GROSS_REVENUE_DOLLAR/text()
		
										let $uk50Change := if($uk50IDPreYear ne '') then ($uk50IDCurrentYear - $uk50IDPreYear) div $uk50IDPreYear else 0	
										
										let $grossRev := if($amlaw200CurrentYear//AMLAW_200:GROSS_REVENUE/text() ne '') then $amlaw200CurrentYear//AMLAW_200:GROSS_REVENUE/text() else
														if($global100CurrentYear//Global_100:GROSS_REVENUE/text() ne '') then $global100CurrentYear//Global_100:GROSS_REVENUE/text()
														else if($uk50IDCurrentYear) then $uk50IDCurrentYear
														else $china40CurrentYear//CHINA_40:GROSS_REVENUE/text()
										
										let $grossRevPreviousYear := if($amlaw00IDPreYear//AMLAW_200:GROSS_REVENUE/text() ne '') then $amlaw00IDPreYear//AMLAW_200:GROSS_REVENUE/text() else
														if($global100IDPreYear//Global_100:GROSS_REVENUE/text() ne '') then $global100IDPreYear//Global_100:GROSS_REVENUE/text()
														else if($uk50IDPreYear) then $uk50IDPreYear	
														else  $china40IDPreYear//CHINA_40:GROSS_REVENUE/text()
										
									let $resGrossRevenue :=  if(fn:not($amlaw200CurrentYear ne '') and fn:not($global100CurrentYear ne '') and fn:not($uk50IDCurrentYear ne '') and fn:not($china40CurrentYear ne '')) then -1000
															else if($grossRevPreviousYear ne 0 and $grossRev ne 0) then (($grossRev - $grossRevPreviousYear) div $grossRevPreviousYear) * 100 else json:null()

									let $isAddMaxYear := if(xs:string($year) ne xs:string(max($distinctYears))) then 'y'
														else if($amlaw200CurrentYear ne '' or $global100CurrentYear ne '' or $uk50IDCurrentYear ne '' or $china40CurrentYear ne '') then 'y' else 'n' 							
								
		
									let $_ := (
										map:put($response-obj,'ORGANIZATION_ID',xs:integer($OrganizationID)),
										map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
										map:put($response-obj,'CHANGE', fn:round-half-to-even($resGrossRevenue,2)),
										map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
										)
	
									let $_ := json:array-push($response-arr, $response-obj)
									
									return()

				(:------------Global 200 part------------------:)
				let $response-obj := json:object()
			
				(: let $distinctid_global_100_Current  := cts:element-values(xs:QName("Global_100:ORGANIZATION_ID"),(),(),
				cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/")      
				,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"),xs:string($year))
				,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
				))) :)
			
			let $res4 := xs:integer(avg(cts:search(/,
				cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/") 
				
				,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"), xs:string($year))
				,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
	  			,cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",100)
				)))//Global_100:GROSS_REVENUE/text()))
				
			(: let $distinctid_global_100  := cts:element-values(xs:QName("Global_100:ORGANIZATION_ID"),(),(),
				cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/")      
				,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"),xs:string(xs:integer($year) - 1))
				,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
				)))
			 :)
			let $lag4 := xs:integer(avg(cts:search(/,
				cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/") 
				,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"), xs:string(xs:integer($year) - 1))
				,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
	  			,cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",100)
				)))//Global_100:GROSS_REVENUE/text()))
    
			let $CHANGE := if($res4 ne  0 and $lag4 ne 0) then fn:round-half-to-even((xs:double($res4 - $lag4) div  $lag4 ) * 100 , 2) else -1000
				
			let $_ := (
					map:put($response-obj,'ORGANIZATION_ID', 0),
				map:put($response-obj,'ORGANIZATION_NAME', 'Global 200'),
				map:put($response-obj,'CHANGE', $CHANGE),
				map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
				)
				let $_ := if(xs:string($isDisplayGBP) ne 'true') then  json:array-push($response-arr, $response-obj) else()

				(:----------------------------------------------------------------------------------:)
	
	
	let $response-obj := json:object()
	
	(: let $res2 := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/','1')
		,cts:element-value-query(xs:QName('firm-org:OrganizationID'),($distinctid_lt_100_current ! xs:string(.)))
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'), xs:string($year))
		)))//firm-org:AMLAW_200_GROSS_REVENUE/text())) :)

	let $res2 := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
		)))//AMLAW_200:GROSS_REVENUE/text()))	

	let $res2-LAG := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string(xs:integer($year) - 1))
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
		)))//AMLAW_200:GROSS_REVENUE/text()))	
		
	(: let $distinctid_lt_100  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '<=',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string(xs:integer($year) - 1))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		)))
		
	let $res2-LAG := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/','1')
		,cts:element-value-query(xs:QName('firm-org:OrganizationID'),($distinctid_lt_100 ! xs:string(.)))
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'), xs:string(xs:integer($year) - 1))
		)))//firm-org:AMLAW_200_GROSS_REVENUE/text())) :)
		
	let $CHANGE := fn:round-half-to-even((xs:double($res2 - $res2-LAG) div  $res2-LAG ) * 100 , 2)
	
	let $_ := (
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'Am Law 100'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
	let $_ := if(xs:string($isDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else()
		
	(:----------------------------------------------------------------:)
	
	let $response-obj := json:object()
	
	(: let $distinctid_gt_100_Current  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		)))
	
	let $res3 := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/','1')
		,cts:element-value-query(xs:QName('firm-org:OrganizationID'),($distinctid_gt_100_Current ! xs:string(.)))
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'), xs:string($year))
		)))//firm-org:AMLAW_200_GROSS_REVENUE/text()))
		
		let $distinctid_gt_100  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string(xs:integer($year) - 1 ))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		)))
		
		let $res3-LAG := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/','1')
		,cts:element-value-query(xs:QName('firm-org:OrganizationID'),($distinctid_gt_100 ! xs:string(.)))
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'), xs:string(xs:integer($year) - 1))
		)))//firm-org:AMLAW_200_GROSS_REVENUE/text())) :)

		let $res3 := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
		)))//AMLAW_200:GROSS_REVENUE/text()))	

		let $res3-LAG := xs:integer(avg(cts:search(/,
			cts:and-query((
			cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
			,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
			,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string(xs:integer($year) - 1))
			,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
			)))//AMLAW_200:GROSS_REVENUE/text()))
		
		let $CHANGE := if($res3 ne 0 and $res3-LAG ne 0) then fn:round-half-to-even((xs:double($res3 - $res3-LAG) div  $res3-LAG ) * 100 , 2) else 0
		
		let $_ := (
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'Am Law 2nd Hundred'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		let $_ :=if(xs:string($isDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else ()

					(:------------------------UK50------------------------:)
					
					let $response-obj := json:object()
					
					
					(: let $distinctid_gt_100_Cur := fn:distinct-values(cts:search(/,
										cts:and-query((
											cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
											cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
											)))//UK_50:ORGANIZATION_ID/text()) :)

		
					let $res3 := if(xs:string($isDisplayGBP) ne 'true') then xs:integer(avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
										,cts:element-range-query(xs:QName('UK_50:UK_50_RANK'),'<=' ,xs:integer(50))
										,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
										)))//UK_50:GROSS_REVENUE_DOLLAR/text()))
								 else xs:integer(avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
										,cts:element-range-query(xs:QName('UK_50:UK_50_RANK'),'<=' ,xs:integer(50))
										,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
										)))//UK_50:GROSS_REVENUE_POUND_M/text()))		
					
					(: let $distinctid_gt_100  :=fn:distinct-values(cts:search(/,
									cts:and-query((
										cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
										cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($year) - 1))
										)))//UK_50:ORGANIZATION_ID/text()) :)
		
					let $res3-LAG := if(xs:string($isDisplayGBP) ne 'true') then xs:integer(avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
										,cts:element-range-query(xs:QName('UK_50:UK_50_RANK'),'<=' ,xs:integer(50))
										,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($year) -1))
										)))//UK_50:GROSS_REVENUE_DOLLAR/text()))

									 else xs:integer(avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
										,cts:element-range-query(xs:QName('UK_50:UK_50_RANK'),'<=' ,xs:integer(50))
										,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($year) -1))
										)))//UK_50:GROSS_REVENUE_POUND_M/text()))	
					
					let $difference := $res3 - $res3-LAG

					let $CHANGE :=if($res3 ne 0 and $res3-LAG ne 0) then fn:round-half-to-even((xs:double($difference) div  $res3-LAG ) * 100 , 2) else -1000
					
					let $_ :=(
						map:put($response-obj,'ORGANIZATION_ID', 0),
						map:put($response-obj,'ORGANIZATION_NAME', 'UK 50'),
						map:put($response-obj,'CHANGE', $CHANGE),
						map:put($response-obj,'res', $res3),
						map:put($response-obj,'res3-LAG', $res3-LAG),
						map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
					)
					let $_ := if($uk50ID != '') then json:array-push($response-arr, $response-obj)
							else()	
				
				return ()
	return ($response-arr)
};

declare function firm:GetRevenuePerLawyerChangesPostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $OrganizationID := $request//OrganisationID/text()

	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganizationID)
	let $data := if($checkMergerData != '') then firm:GetRevenuePerLawyerChangesPM($request) else firm:GetRevenuePerLawyerChanges($request)
	return $data
};


declare function firm:GetRevenuePerLawyerChanges($request)
{
	
	let $isGBP := $request/IsDisplayGBP/text()
	let $isDisplayGBP := if($isGBP ne '') then $isGBP else 'false'


	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
	)))
	let $distinctYears := if($request/StartYear/text() ne "" and $request/EndYear/text() ne "") then
                      for $year in $distinctYears
                      where $year >= xs:integer($request/StartYear/text()) and   $year le xs:integer($request/EndYear/text())
                      return $year
                      else $distinctYears[1 to 5]	 (:fn:tokenize('2017,2016,2015,2014,2013',','):)
  
	let $OrganizationID := $request//OrganisationID/text()
	let $organizationName := if((/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text())[1] ne '')then 
	/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text()[1]
	else 
		/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ORGANIZATION_NAME/text()[1]
			
	let $response-arr := json:array()
	let $Lag1-obj := json:object()

	let $amlaw200maxYearData := cts:search(//survey:YEAR,
				cts:and-query((
					cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
					,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganizationID)
					,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($distinctYears)))
				)))[1]

	let $uk50maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
				cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(max($distinctYears))),
				cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
			)))[1]	

	let $global100maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
				cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganizationID))
			)))[1]				

	let $china40maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/'),
				cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganizationID))
			)))[1]						

	let $maxYearData := if($uk50maxYearData ne '' or $amlaw200maxYearData ne '' or $global100maxYearData ne '' or $china40maxYearData ne '') then 'Y' else ()

	

	let $Interval := $request//Interval/text()
	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])


	let $data := for $year in $yearss
	let $response-obj := json:object()
	
	
		let $amlaw200CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1]//AMLAW_200:RPL/text() else()

		let $amlaw00IDPreYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
					cts:and-query((
						cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
						cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
						cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($OrganizationID))
						)))[1]//AMLAW_200:RPL/text() else()


	

		let $global100CurrentYear := if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1]//Global_100:REVENUE_PER_LAWYER/text() else()

		let $global100IDPreYear := if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
					cts:and-query((
						cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
						cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
						cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganizationID))
						)))[1]//Global_100:REVENUE_PER_LAWYER/text() else()

		let $china40CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1]//CHINA_40:REVENUE_PER_LAWYER/text() else ()

		let $china40IDPreYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
					cts:and-query((
						cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
						cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
						cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganizationID))
						)))[1]//CHINA_40:REVENUE_PER_LAWYER/text() else ()			

		

		let $uk50IDCurrentYear := if(xs:string($isDisplayGBP) eq 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1]//UK_50:RPL_POUND_K/text()

								  else cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1]//UK_50:RPL_DOLLAR/text()				

		let $uk50IDPreYear := if(xs:string($isDisplayGBP) eq 'true') then cts:search(/,
										cts:and-query((
											cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
											cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
											cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
											)))[1]//UK_50:RPL_POUND_K/text()
							  else cts:search(/,
										cts:and-query((
											cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
											cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
											cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
											)))[1]//UK_50:RPL_DOLLAR/text()

		let $isAddMaxYear := if(xs:string($year) ne xs:string(max($distinctYears))) then 
								'y'
							 else 
							 	if($amlaw200CurrentYear ne '' or $global100CurrentYear ne '' or $uk50IDCurrentYear ne '' or xs:string($china40CurrentYear) ne '') then 'y' else 'n' 							
		
		let $grossRev := if($amlaw200CurrentYear ne '') then $amlaw200CurrentYear else
						  if($global100CurrentYear ne '') then $global100CurrentYear
						  else if($uk50IDCurrentYear) then $uk50IDCurrentYear
						  else $china40CurrentYear
		
		let $grossRevPreviousYear := if($amlaw00IDPreYear ne 0) then $amlaw00IDPreYear else
						  if($global100IDPreYear ne 0) then $global100IDPreYear
						  else if($uk50IDPreYear) then $uk50IDPreYear	
						  else $china40IDPreYear
		
	let $resGrossRevenue := if(fn:not($amlaw200CurrentYear ne '') and fn:not($global100CurrentYear ne '') and fn:not($uk50IDCurrentYear ne '') and fn:not(xs:string($china40CurrentYear) ne '')) then -1000
							else if($grossRevPreviousYear ne 0 and $grossRev ne 0) then (($grossRev - $grossRevPreviousYear) div $grossRevPreviousYear) * 100 
								 else 0
	
	let $rpl1 := $resGrossRevenue
		
		let $_ := (
			map:put($response-obj,'ORGANIZATION_ID',xs:integer($OrganizationID)),
		map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
		map:put($response-obj,'CHANGE', fn:round-half-to-even($rpl1,2)),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
	let $_ :=if(xs:string($year) ne xs:string(max($distinctYears)) and $isAddMaxYear ne 'n') then json:array-push($response-arr,$response-obj) else
					if($maxYearData ne '' and $isAddMaxYear ne 'n') then json:array-push($response-arr,$response-obj) else()

	(:------------Global 200 part------------------:)
  let $response-obj := json:object()
  
  (: let $distinctid_global_100_Current  := cts:element-values(xs:QName("Global_100:ORGANIZATION_ID"),(),(),
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/")      
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"),xs:string($year))
      ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
    ))) :)
  
  let $res4 := xs:integer(avg(cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/") 
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"), xs:string($year))
	  ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
	  ,cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",100)
	  
    )))//Global_100:REVENUE_PER_LAWYER/text()))
    
   (: let $distinctid_global_100  := cts:element-values(xs:QName("Global_100:ORGANIZATION_ID"),(),(),
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/")      
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"),xs:string(xs:integer($year) - 1))
      ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
    ))) :)
  
   let $lag4 := xs:integer(avg(cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/") 
      ,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"), xs:string(xs:integer($year) - 1))
	  ,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
	  ,cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",100)
	  
    )))//Global_100:REVENUE_PER_LAWYER/text()))
    
   let $CHANGE :=if(fn:not($resGrossRevenue ne -1000)) then -1000
   				 else if($res4 ne 0 and $lag4 ne 0) then fn:round-half-to-even((xs:double($res4 - $lag4) div  $lag4 ) * 100 , 2) else 0    
    
   let $_ := (
	    map:put($response-obj,'ORGANIZATION_ID', 0),
      map:put($response-obj,'ORGANIZATION_NAME', 'Global 100'),
      map:put($response-obj,'CHANGE', $CHANGE),
      map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
	  )
    let $_ :=if($isAddMaxYear ne 'n' and xs:string($isDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else ()
	
	(:----------------------------------------------------------------------------------:)
	
	let $response-obj := json:object()
	(: let $distinctid_lt_100_Current  := cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '<=',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		))) :)
		
	let $res2 := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
		)))//AMLAW_200:RPL/text()))

		
	let $res2-LAG := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($year - 1))
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
		)))//AMLAW_200:RPL/text()))    
	
	let $CHANGE :=  if(fn:not($resGrossRevenue ne -1000)) then -1000
					else if($res2 ne 0 and $res2-LAG ne 0) then fn:round-half-to-even((xs:double(($res2 - $res2-LAG) div $res2-LAG)) * 100 ,2) else 0
	
	let $_ := (
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'Am Law 100'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
	let $_ :=if($isAddMaxYear ne 'n' and xs:string($isDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else ()
	
	(:----------------------------------------------------------------:)
	
	let $response-obj := json:object()
	
	(: let $distinctid_gt_100_Current  := cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		))) :)
					
	let $res3 := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
		)))//AMLAW_200:RPL/text()))
		
		(: let $distinctid_gt_100  := cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string(xs:integer($year) - 1))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		))) :)
					
	let $res3-LAG := xs:integer(avg(cts:search(/,
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
		,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($year - 1))
		,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
		)))//AMLAW_200:RPL/text()))
		
		let $CHANGE := if(fn:not($resGrossRevenue ne -1000)) then -1000
						else fn:round-half-to-even((xs:double(($res3 - $res3-LAG) div $res3-LAG)) * 100 ,2)
		
		let $_ := (
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'Am Law 2nd Hundred'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
	let $_ :=if($isAddMaxYear ne 'n' and xs:string($isDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else () 

	(:------------------------UK50------------------------:)
		
	let $response-obj := json:object()
	
	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")(:,
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)):),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
							)))[1]//UK_50:ORGANIZATION_ID/text()

	let $distinctid_gt_100_Cur := fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
							)))//UK_50:ORGANIZATION_ID/text())

	
		let $res3 := if(xs:string($isDisplayGBP) ne 'true') then xs:integer(avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100_Cur ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
							)))//UK_50:RPL_DOLLAR/text()))

					 else xs:integer(avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100_Cur ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
							)))//UK_50:RPL_POUND_K/text()))		
		
		let $distinctid_gt_100  :=fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($year) - 1))
							)))//UK_50:ORGANIZATION_ID/text())
		
		let $res3-LAG := if(xs:string($isDisplayGBP) ne 'true') then xs:integer(avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($year) -1))
							)))//UK_50:RPL_DOLLAR/text()))
						 else xs:integer(avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
								,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.)))
								,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($year) -1))
								)))//UK_50:RPL_POUND_K/text()))	
		
		let $difference := $res3 - $res3-LAG

		let $CHANGE := if($res3 ne 0 and $res3-LAG ne 0   and xs:string($resGrossRevenue) ne '-1000') then fn:round-half-to-even((xs:double($difference) div  $res3-LAG ) * 100 , 2) else -1000
		
		let $_ :=(
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'UK 100'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		let $_ := if($uk50ID ne '') then json:array-push($response-arr, $response-obj)
				 else()	

	return () 
	return $response-arr
};

declare function firm:GetRevenuePerLawyerChangesPM($request)
{
	let $OrganizationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetMergedFirmData($OrganizationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganizationID),',') else $OrganizationID						
	
	let $isGBP := $request/IsDisplayGBP/text()
	let $isDisplayGBP := if($isGBP ne '') then $isGBP else 'false'


	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1')
	)))
	let $distinctYears := if($request/StartYear/text() ne "" and $request/EndYear/text() ne "") then
                      for $year in $distinctYears
                      where $year >= xs:integer($request/StartYear/text()) and   $year le xs:integer($request/EndYear/text())
                      return $year
                      else $distinctYears[1 to 5]	 (:fn:tokenize('2017,2016,2015,2014,2013',','):)
  
	
			
	let $response-arr := json:array()
	let $Lag1-obj := json:object()

	(: let $maxYearData := cts:search(//survey:YEAR,
				cts:and-query((
					cts:directory-query($config:DD-SURVEY-AMLAW_200-PATH)
					,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganizationID)
					,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($distinctYears)))
				)))[1] :)

	let $Interval := $request//Interval/text()
	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])			
	let $orggIDD :=  $checkMergerData//FirmData//FirmID	
	let $data := for $year in $yearss
					let $loopData := for $item in $checkMergerData//FirmData
									let $OrganizationID := $item//FirmID/text()
									let $organizationName := $item//FirmName/text()
									let $response-obj := json:object()
	
									

									(: let $organizationName := if((/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text())[1] ne '')then 
										/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text()[1]
										else 
											/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ORGANIZATION_NAME/text()[1] :)

									let $amlaw200CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
																			cts:and-query((
																				cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
																				cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
																				cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($OrganizationID))
																				)))[1]//AMLAW_200:RPL/text() else()

									let $amlaw00IDPreYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
													cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1]//AMLAW_200:RPL/text() else()

									let $global100CurrentYear := if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
																			cts:and-query((
																				cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																				cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
																				cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganizationID))
																				)))[1]//Global_100:REVENUE_PER_LAWYER/text() else()

									let $global100IDPreYear := if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1]//Global_100:REVENUE_PER_LAWYER/text() else()

									let $china40CurrentYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1]//CHINA_40:REVENUE_PER_LAWYER/text() else ()

									let $china40IDPreYear :=if(xs:string($isDisplayGBP) ne 'true') then cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganizationID))
													)))[1]//CHINA_40:REVENUE_PER_LAWYER/text() else ()				

		

									let $uk50IDCurrentYear := if(xs:string($isDisplayGBP) eq 'true') then cts:search(/,
																			cts:and-query((
																				cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																				cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																				cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
																				)))[1]//UK_50:RPL_POUND_K/text()

															else cts:search(/,
																			cts:and-query((
																				cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																				cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																				cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
																				)))[1]//UK_50:RPL_DOLLAR/text()				

									let $uk50IDPreYear := if(xs:string($isDisplayGBP) eq 'true') then cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																		cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
																		cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
																		)))[1]//UK_50:RPL_POUND_K/text()
														else cts:search(/,
																	cts:and-query((
																		cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																		cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
																		cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
																		)))[1]//UK_50:RPL_DOLLAR/text()

									let $isAddMaxYear := if(xs:string($year) ne xs:string(max($distinctYears))) then 
															'y'
														else 
															if($amlaw200CurrentYear ne '' or $global100CurrentYear ne '' or $uk50IDCurrentYear ne '' or xs:string($china40CurrentYear) ne '') then 'y' else 'n' 							
		
									let $grossRev := if($amlaw200CurrentYear ne '') then $amlaw200CurrentYear else
													if($global100CurrentYear ne '') then $global100CurrentYear
													else if($uk50IDCurrentYear) then $uk50IDCurrentYear 
													else $china40CurrentYear
									
									let $grossRevPreviousYear := if($amlaw00IDPreYear ne 0) then $amlaw00IDPreYear else
													if($global100IDPreYear ne 0) then $global100IDPreYear
													else if($uk50IDPreYear) then $uk50IDPreYear	
													else $china40IDPreYear
		
									let $resGrossRevenue := if(fn:not($amlaw200CurrentYear ne '') and fn:not($global100CurrentYear ne '') and fn:not($uk50IDCurrentYear ne '') and fn:not($china40CurrentYear ne '')) then -1000
															else if($grossRevPreviousYear ne 0 and $grossRev ne 0) then (($grossRev - $grossRevPreviousYear) div $grossRevPreviousYear) * 100 
																else 0
									
									let $rpl1 := $resGrossRevenue
										
										let $_ := (
											map:put($response-obj,'ORGANIZATION_ID',xs:integer($OrganizationID)),
										map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
										map:put($response-obj,'CHANGE', fn:round-half-to-even($rpl1,2)),
										map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
										)

									let $_ := json:array-push($response-arr,$response-obj)

									return()				
	(:------------Global 200 part------------------:)
			let $response-obj := json:object()
			
			(: let $distinctid_global_100_Current  := cts:element-values(xs:QName("Global_100:ORGANIZATION_ID"),(),(),
				cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/")      
				,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"),xs:string($year))
				,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
				))) :)
			
			let $res4 := xs:integer(avg(cts:search(/,
				cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/") 
				
				,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"), xs:string($year))
				,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
				,cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",100)
				)))//Global_100:REVENUE_PER_LAWYER/text()))
				
			(: let $distinctid_global_100  := cts:element-values(xs:QName("Global_100:ORGANIZATION_ID"),(),(),
				cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/")      
				,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"),xs:string(xs:integer($year) - 1))
				,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
				))) :)
			
			let $lag4 := xs:integer(avg(cts:search(/,
				cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/") 
				
				,cts:element-value-query(xs:QName("Global_100:PUBLISHYEAR"), xs:string(xs:integer($year) - 1))
				,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
				,cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",100)
				)))//Global_100:REVENUE_PER_LAWYER/text()))
				
			let $CHANGE := if($res4 ne 0 and $lag4 ne 0) then fn:round-half-to-even((xs:double($res4 - $lag4) div  $lag4 ) * 100 , 2) else -1000    
				
			let $_ := (
					map:put($response-obj,'ORGANIZATION_ID', 0),
				map:put($response-obj,'ORGANIZATION_NAME', 'Global 100'),
				map:put($response-obj,'CHANGE', $CHANGE),
				map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
				)
				let $_ :=if(xs:string($isDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else ()

				(:----------------------------------------------------------------------------------:)
				
				let $response-obj := json:object()
				(: let $distinctid_lt_100_Current  := cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
					cts:and-query((
					cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
					,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '<=',100)
					,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($year))
					,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
					)))
		 :)
				let $res2 := xs:integer(avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
								,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
								,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string($year))
								,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
								)))//AMLAW_200:RPL/text()))
					
				(: let $distinctid_lt_100  :=cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
					cts:and-query((
					cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
					,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '<=',100)
					,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string(xs:integer($year) - 1))
					,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
					))) :)
		
				let $res2-LAG := xs:integer(avg(cts:search(/,
			cts:and-query((
			cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
			,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
			,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string(xs:integer($year) - 1))
			,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
			)))//AMLAW_200:RPL/text()))
				
				let $CHANGE :=  if($res2 ne 0 and $res2-LAG ne 0) then fn:round-half-to-even((xs:double(($res2 - $res2-LAG) div $res2-LAG)) * 100 ,2) else 0
				
				let $_ := (
						map:put($response-obj,'ORGANIZATION_ID', 0),
						map:put($response-obj,'ORGANIZATION_NAME', 'Am Law 100'),
						map:put($response-obj,'CHANGE', $CHANGE),
						map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
					)
				let $_ := if(xs:string($isDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else ()
	
	(:----------------------------------------------------------------:)
	
	let $response-obj := json:object()
	
	(: let $distinctid_gt_100_Current  := cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string($year))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		))) :)
					
	let $res3 :=xs:integer(avg(cts:search(/,
			cts:and-query((
			cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
			,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
			,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string(xs:integer($year)))
			,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
			)))//AMLAW_200:RPL/text()))
		
		(: let $distinctid_gt_100  := cts:element-values(xs:QName('firm-org:OrganizationID'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/law-firm/survey/')
		,cts:element-range-query(xs:QName('firm-org:AMLAW200_RANK'), '>',100)
		,cts:element-value-query(xs:QName('firm-org:PUBLISHYEAR'),xs:string(xs:integer($year) - 1))
		,cts:not-query(cts:element-value-query(xs:QName('firm-org:AMLAW200_RANK'),''))
		))) :)
					
	let $res3-LAG :=xs:integer(avg(cts:search(/,
			cts:and-query((
			cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/','1')
			,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
			,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'), xs:string(xs:integer($year) - 1))
			,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
			)))//AMLAW_200:RPL/text()))
		
		let $CHANGE := fn:round-half-to-even((xs:double(($res3 - $res3-LAG) div $res3-LAG)) * 100 ,2)
		
		let $_ := (
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'Am Law 2nd Hundred'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
	let $_ :=if(xs:string($isDisplayGBP) ne 'true') then json:array-push($response-arr, $response-obj) else () 

	(:------------------------UK50------------------------:)
		
	let $response-obj := json:object()
	
	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")(:,
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)):),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$checkMergerData//FirmData//FirmID)
							)))//UK_50:ORGANIZATION_ID/text()

	let $distinctid_gt_100_Cur := fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
							)))//UK_50:ORGANIZATION_ID/text())

	
		let $res3 := if(xs:string($isDisplayGBP) ne 'true') then xs:integer(avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100_Cur ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
							)))//UK_50:RPL_DOLLAR/text()))

					 else xs:integer(avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100_Cur ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
							)))//UK_50:RPL_POUND_K/text()))		
		
		let $distinctid_gt_100  :=fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($year) - 1))
							)))//UK_50:ORGANIZATION_ID/text())
		
		let $res3-LAG := if(xs:string($isDisplayGBP) ne 'true') then xs:integer(avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($year) -1))
							)))//UK_50:RPL_DOLLAR/text()))
						 else xs:integer(avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
								,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.)))
								,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($year) -1))
								)))//UK_50:RPL_POUND_K/text()))	
		
		let $difference := $res3 - $res3-LAG

		let $CHANGE := if($res3 ne 0 and $res3-LAG ne 0) then fn:round-half-to-even((xs:double($difference) div  $res3-LAG ) * 100 , 2) else -1000
		
		let $_ :=(
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'UK 100'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		let $_ := if($uk50ID != '' ) then json:array-push($response-arr, $response-obj)
				 else()	

	return () 
	return $response-arr
};

declare function firm:GetGrowthTotalHeadCountPostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $OrganizationID := $request/OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganizationID)
	
	let $data := if($checkMergerData != '') then firm:GetGrowthTotalHeadCountPM($request) else firm:GetGrowthTotalHeadCount($request)	
	return $data
};

declare function firm:GetGrowthTotalHeadCount($request)
{

	let $distinctYears := cts:element-attribute-values(xs:QName("survey:YEAR"),xs:QName("PublishYear"),(),("descending"),
								cts:and-query((
									cts:directory-query("/LegalCompass/denormalized-data/surveys/NLJ_250/","1")
									))
									)
 
	let $distinctid_lt_100  := cts:element-values(xs:QName("firm-org:OrganizationID"),(),(),
		cts:and-query((
		cts:directory-query("/LegalCompass/denormalized-data/law-firm/survey/")
		,cts:element-range-query(xs:QName("firm-org:AMLAW200_RANK"), "<=",100)
		,cts:element-value-query(xs:QName("firm-org:PUBLISHYEAR"),xs:string(max($distinctYears)))
		,cts:not-query(cts:element-value-query(xs:QName("firm-org:AMLAW200_RANK"),""))
		)))
		
	let $distinctid_gt_100  := cts:element-values(xs:QName("firm-org:OrganizationID"),(),(),
		cts:and-query((
      cts:directory-query("/LegalCompass/denormalized-data/law-firm/survey/")
      ,cts:element-range-query(xs:QName("firm-org:AMLAW200_RANK"), ">",100)
      ,cts:element-value-query(xs:QName("firm-org:PUBLISHYEAR"),xs:string(max($distinctYears)))
      ,cts:not-query(cts:element-value-query(xs:QName("firm-org:AMLAW200_RANK"),""))
    )))             

	let $distinctYears := if($request/StartYear/text() ne "" and $request/EndYear/text() ne "") then
						for $year in $distinctYears
						where $year ge xs:integer($request/StartYear/text()) and $year le xs:integer($request/EndYear/text())
						return $year
						else $distinctYears[1 to 5]
						
	let $OrganizationID := $request//OrganisationID/text()
	let $organizationName := if((/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text())[1] ne '')then 
	/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text()[1]
	else 
	/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ORGANIZATION_NAME/text()[1]

	let $amlaw200maxYearData := cts:search(//survey:YEAR,
				cts:and-query((
					cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/')
					,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganizationID)
					,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($distinctYears)))
				)))[1]

	let $uk50maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
				cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
			)))[1]		

	let $global100maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
				cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($OrganizationID))
			)))[1]			

	let $china40maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/'),
				cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),xs:string($OrganizationID))
			)))[1]						

	let $maxYearData := if($uk50maxYearData ne '' or $amlaw200maxYearData ne '' or $global100maxYearData ne '' or $china40maxYearData ne '') then 'Y' else ()

	let $response-arr := json:array()

	let $Interval := if($request//Interval/text() ne '') then if(xs:integer($request//Interval/text()) gt 5) then $request//Interval/text() else 5 else ''

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $data := for $year in $yearss
	let $response-obj := json:object()  

  let $res := cts:search(//survey:YEAR,
    cts:and-query((
      cts:directory-query("/LegalCompass/denormalized-data/surveys/NLJ_250/","1"),
      cts:element-attribute-value-query(xs:QName("survey:YEAR"),xs:QName("PublishYear"),xs:string($year)),
      cts:element-attribute-value-query(xs:QName("survey:YEAR"),xs:QName("OrganizationID"),$request//OrganisationID/text())
    )))
    
  let $lag-1  := cts:search(//survey:YEAR,
    cts:and-query((
      cts:directory-query("/LegalCompass/denormalized-data/surveys/NLJ_250/","1"),
      cts:element-attribute-value-query(xs:QName("survey:YEAR"),xs:QName("PublishYear"), xs:string( $year - 1)),
      cts:element-attribute-value-query(xs:QName("survey:YEAR"),xs:QName("OrganizationID"),$request//OrganisationID/text())
    )))
	
	let $global100Data :=cts:search(/,
										cts:and-query((
											cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
											cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
											cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$request//OrganisationID/text())
											)))[1]

		

				let $uk50Data := cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$request//OrganisationID/text())
													)))[1]
													
				let $global100DataLag := cts:search(/,
										cts:and-query((
											cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
											cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
											cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$request//OrganisationID/text())
											)))[1]

		

				let $uk50DataLag := cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year -1 )),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$request//OrganisationID/text())
													)))[1]

				let $china40CurrentYear :=cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),$request//OrganisationID/text())
													)))[1]

				let $china40IDPreYear :=cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
							cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
							cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),$request//OrganisationID/text())
							)))[1]

	let $num_attorneys := if($res//survey:NUM_ATTORNEYS/text() ne '') then $res//survey:NUM_ATTORNEYS/text() 
						else if($global100Data//Global_100:NUM_LAWYERS/text() ne '') then $global100Data//Global_100:NUM_LAWYERS/text()
						else if($uk50Data//UK_50:NUMBER_OF_LAWYERS/text() ne '') then $uk50Data//UK_50:NUMBER_OF_LAWYERS/text() 
						else if($china40CurrentYear//CHINA_40:FIRMWIDE_LAWYERS/text() ne '') then $china40CurrentYear//CHINA_40:FIRMWIDE_LAWYERS/text()		
						else -1000
							
  let $lag_num_attorneys := if($lag-1//survey:NUM_ATTORNEYS/text() ne '') then $lag-1//survey:NUM_ATTORNEYS/text() 
						else if($global100DataLag//Global_100:NUM_LAWYERS/text() ne '') then $global100DataLag//Global_100:NUM_LAWYERS/text()
						else if($uk50DataLag//UK_50:NUMBER_OF_LAWYERS/text() ne '') then $uk50DataLag//UK_50:NUMBER_OF_LAWYERS/text() 
						else if($china40IDPreYear//CHINA_40:FIRMWIDE_LAWYERS/text() ne '') then $china40IDPreYear//CHINA_40:FIRMWIDE_LAWYERS/text()
						else -1000
						
  let $change :=if($num_attorneys ne -1000 and $lag_num_attorneys ne -1000) then fn:format-number((($num_attorneys - $lag_num_attorneys) div $lag_num_attorneys ) * 100, ".00") else -1000
  
  
  let $isAddMaxYear := if($res ne '' or $global100Data ne '' or $uk50Data ne '' or $china40IDPreYear ne '') then 'y' else 'n' 

  let $_ := (
	  map:put($response-obj,'ORGANIZATION_ID',xs:integer($OrganizationID)),
    map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
    map:put($response-obj,'CHANGE', $change),
	 map:put($response-obj,'num_attorneys', $num_attorneys),
	  map:put($response-obj,'lag_num_attorneys', $lag_num_attorneys),
    map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
	)
  let $_ := if(xs:string($year) ne xs:string(max($distinctYears))) then json:array-push($response-arr, $response-obj) else
			  if($maxYearData ne '' and ($res ne '' or $global100Data ne '' or $uk50Data ne '' or $china40CurrentYear ne '') and xs:string($change) ne '-1000')
						 then json:array-push($response-arr,$response-obj) else()             
      
  (:=============================================================:)

  (:---------- NLJ500---------:)

  let $amlaw200CurrentYear  := fn:avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/')
								,cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string($year))
								)))//nlj250:NUM_ATTORNEYS/text())	

  let $amlaw200PreYear  := fn:avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/')
								,cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string(xs:integer($year)-1))
								)))//nlj250:NUM_ATTORNEYS/text())								
           
  let $result := fn:round-half-to-even((($amlaw200CurrentYear - $amlaw200PreYear ) div $amlaw200PreYear) * 100 ,2)

  let $response-obj := json:object()
  
  let $_ := (
	  map:put($response-obj,'ORGANIZATION_ID',0),
    map:put($response-obj,'ORGANIZATION_NAME','NLJ 500'),
    map:put($response-obj,'CHANGE',$result),
    map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
	)
  
  let $_ := if($isAddMaxYear ne 'n' and xs:string($change) ne '-1000') then json:array-push($response-arr, $response-obj) else()  

  let $amlaw200CurrentYear  := fn:avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
								,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
								,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
								,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
								)))//AMLAW_200:NUM_OF_LAWYERS/text())	

  let $amlaw200PreYear  := fn:avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
								,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
								,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($year)-1))
								,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
								)))//AMLAW_200:NUM_OF_LAWYERS/text())								
           
  let $result := fn:round-half-to-even((($amlaw200CurrentYear - $amlaw200PreYear ) div $amlaw200PreYear) * 100 ,2)

  let $response-obj := json:object()
  
  let $_ := (
	  map:put($response-obj,'ORGANIZATION_ID',0),
    map:put($response-obj,'ORGANIZATION_NAME','Am Law 100'),
    map:put($response-obj,'CHANGE',$result),
    map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
	)
  
  let $_ := if($isAddMaxYear ne 'n' and xs:string($change) ne '-1000') then json:array-push($response-arr, $response-obj) else()     

  (:----------------:)
  
   let $amlaw200CurrentYear  := fn:avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
								,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
								,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
								,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
								)))//AMLAW_200:NUM_OF_LAWYERS/text())	

  let $amlaw200PreYear  := fn:avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
								,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
								,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($year)-1))
								,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
								)))//AMLAW_200:NUM_OF_LAWYERS/text())								
           
  let $result := fn:round-half-to-even((($amlaw200CurrentYear - $amlaw200PreYear ) div $amlaw200PreYear) * 100 ,2)

  let $response-obj := json:object()
  let $_ := (
	  map:put($response-obj,'ORGANIZATION_ID',0),
    map:put($response-obj,'ORGANIZATION_NAME','Am Law 2nd Hundred'),
    map:put($response-obj,'CHANGE', $result),
    map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
	)
  let $_ := if($isAddMaxYear ne 'n' and xs:string($change) ne '-1000') then json:array-push($response-arr, $response-obj) else()
  
	(:-------------------UK50------------------------:)
  let $response-obj := json:object()
	
	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
							)))[1]//UK_50:ORGANIZATION_ID/text()

	let $distinctid_gt_100_Current := fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
							)))//UK_50:ORGANIZATION_ID/text())

	
		let $res3 := xs:integer(avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100_Current ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
							)))//UK_50:NUMBER_OF_LAWYERS/text()))
		
		let $distinctid_gt_100  :=fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($year) - 1))
							)))//UK_50:ORGANIZATION_ID/text())
		
		let $res3-LAG := xs:integer(avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($year) -1))
							)))//UK_50:NUMBER_OF_LAWYERS/text()))
		
		let $difference := $res3 - $res3-LAG

		let $CHANGE := if(fn:not($distinctid_gt_100_Current != '') or fn:not($distinctid_gt_100 != '') and xs:string($change) ne '-1000') then -1000
					   else if($res3 ne 0 and $res3-LAG ne 0) then fn:round-half-to-even((xs:double($difference) div  $res3-LAG ) * 100 , 2) else 0
		
		let $_ :=(
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'UK 100'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		let $_ := if($uk50ID ne '' and $isAddMaxYear ne 'n') then json:array-push($response-arr, $response-obj) else()
  
  return ($response-obj)
	return ($response-arr)
};

declare function firm:GetGrowthTotalHeadCountPM($request)
{
	let $OrganizationID := $request/OrganisationID/text()
	let $checkMergerData := firmnew:GetMergedFirmData($OrganizationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganizationID),',') else $OrganizationID

	let $distinctYears := cts:element-attribute-values(xs:QName("survey:YEAR"),xs:QName("PublishYear"),(),("descending"),
								cts:and-query((
									cts:directory-query("/LegalCompass/denormalized-data/surveys/NLJ_250/","1")
									))
									)
 
	let $distinctid_lt_100  := cts:element-values(xs:QName("firm-org:OrganizationID"),(),(),
		cts:and-query((
		cts:directory-query("/LegalCompass/denormalized-data/law-firm/survey/")
		,cts:element-range-query(xs:QName("firm-org:AMLAW200_RANK"), "<=",100)
		,cts:element-value-query(xs:QName("firm-org:PUBLISHYEAR"),xs:string(max($distinctYears)))
		,cts:not-query(cts:element-value-query(xs:QName("firm-org:AMLAW200_RANK"),""))
		)))
		
	let $distinctid_gt_100  := cts:element-values(xs:QName("firm-org:OrganizationID"),(),(),
		cts:and-query((
		cts:directory-query("/LegalCompass/denormalized-data/law-firm/survey/")
		,cts:element-range-query(xs:QName("firm-org:AMLAW200_RANK"), ">",100)
		,cts:element-value-query(xs:QName("firm-org:PUBLISHYEAR"),xs:string(max($distinctYears)))
		,cts:not-query(cts:element-value-query(xs:QName("firm-org:AMLAW200_RANK"),""))
		)))             

	let $distinctYears := if($request/StartYear/text() ne "" and $request/EndYear/text() ne "") then
						for $year in $distinctYears
                      where $year ge xs:integer($request/StartYear/text()) and $year le xs:integer($request/EndYear/text())
                      return $year
                      else $distinctYears[1 to 5]
                      
	
	

	(: let $maxYearData := cts:search(//survey:YEAR,
			cts:and-query((
				cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/')
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$OrganizationID)
				,cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($distinctYears)))
			)))[1] :)

	let $response-arr := json:array()

	let $Interval := if($request//Interval/text() ne '') then if(xs:integer($request//Interval/text()) gt 5) then $request//Interval/text() else 5 else ''

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $data := for $year in $yearss
					let $loopData := for $item in $checkMergerData//FirmData
									let $OrganizationID := $item//FirmID/text()
									let $organizationName := $item//FirmName/text()
										(: let $organizationName := if((/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text())[1] ne '') then 
												/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text()[1]
												else 
												/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ORGANIZATION_NAME/text()[1] :)
										let $response-obj := json:object()  

										let $res := cts:search(//survey:YEAR,
											cts:and-query((
											cts:directory-query("/LegalCompass/denormalized-data/surveys/NLJ_250/","1"),
											cts:element-attribute-value-query(xs:QName("survey:YEAR"),xs:QName("PublishYear"),xs:string($year)),
											cts:element-attribute-value-query(xs:QName("survey:YEAR"),xs:QName("OrganizationID"),$OrganizationID)
											)))
											
										let $lag-1  := cts:search(//survey:YEAR,
											cts:and-query((
											cts:directory-query("/LegalCompass/denormalized-data/surveys/NLJ_250/","1"),
											cts:element-attribute-value-query(xs:QName("survey:YEAR"),xs:QName("PublishYear"), xs:string( $year - 1)),
											cts:element-attribute-value-query(xs:QName("survey:YEAR"),xs:QName("OrganizationID"),$OrganizationID)
											)))
	
										let $global100Data :=cts:search(/,
																			cts:and-query((
																				cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																				cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
																				cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$OrganizationID)
																				)))[1]

		

										let $uk50Data := cts:search(/,
																		cts:and-query((
																			cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																			cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)),
																			cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$OrganizationID)
																			)))[1]
													
										let $global100DataLag := cts:search(/,
																cts:and-query((
																	cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
																	cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
																	cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$OrganizationID)
																	)))[1]

		

										let $uk50DataLag := cts:search(/,
																		cts:and-query((
																			cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
																			cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year -1 )),
																			cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$OrganizationID)
																			)))[1]	

										let $china40CurrentYear :=cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),$OrganizationID)
													)))[1]

										let $china40IDPreYear :=cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
													cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(xs:integer($year) - 1)),
													cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),$OrganizationID)
													)))[1]								

										let $num_attorneys := if($res//survey:NUM_ATTORNEYS/text() ne '') then $res//survey:NUM_ATTORNEYS/text() 
												else if($global100Data//Global_100:NUM_LAWYERS/text() ne '') then $global100Data//Global_100:NUM_LAWYERS/text()
												else if($uk50Data//UK_50:NUMBER_OF_LAWYERS/text() ne '') then $uk50Data//UK_50:NUMBER_OF_LAWYERS/text() 
												else if($china40CurrentYear//CHINA_40:FIRMWIDE_LAWYERS/text() ne '') then $china40CurrentYear//CHINA_40:FIRMWIDE_LAWYERS/text()		
												else 0
							
										let $lag_num_attorneys := if($lag-1//survey:NUM_ATTORNEYS/text() ne '') then $lag-1//survey:NUM_ATTORNEYS/text() 
																else if($global100DataLag//Global_100:NUM_LAWYERS/text() ne '') then $global100DataLag//Global_100:NUM_LAWYERS/text()
																else if($uk50DataLag//UK_50:NUMBER_OF_LAWYERS/text() ne '') then $uk50DataLag//UK_50:NUMBER_OF_LAWYERS/text() 
																else if($china40IDPreYear//CHINA_40:FIRMWIDE_LAWYERS/text() ne '') then $china40IDPreYear//CHINA_40:FIRMWIDE_LAWYERS/text()		
																else 0
																
										let $change :=if(fn:not($res != '') and fn:not($global100Data != '') and fn:not($uk50Data != '')) then -1000
														else if($num_attorneys ne 0 and $lag_num_attorneys ne 0) then fn:format-number((($num_attorneys - $lag_num_attorneys) div $lag_num_attorneys ) * 100, ".00") else 0
										
										
										let $isAddMaxYear := if(xs:string($year) ne xs:string(max($distinctYears))) then 'y' else
																	if($res ne '' or $global100Data ne '' or $uk50Data ne '') then 'y' else 'n' 

										let $_ := (
											map:put($response-obj,'ORGANIZATION_ID',xs:integer($OrganizationID)),
											map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
											map:put($response-obj,'CHANGE', $change),
											map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
											)
										let $_ := if(xs:string($year) ne xs:string(max($distinctYears))) then json:array-push($response-arr, $response-obj) else
													if(($res ne '' or $global100Data ne '' or $uk50Data ne 0))
																then json:array-push($response-arr,$response-obj) else() 
										return ()						            
      
  (:=============================================================:)

  (:---------- NLJ500---------:)

  let $amlaw200CurrentYear  := fn:avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/')
								,cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string($year))
								)))//nlj250:NUM_ATTORNEYS/text())	

  let $amlaw200PreYear  := fn:avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/')
								,cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string(xs:integer($year)-1))
								)))//nlj250:NUM_ATTORNEYS/text())								
           
  let $result := fn:round-half-to-even((($amlaw200CurrentYear - $amlaw200PreYear ) div $amlaw200PreYear) * 100 ,2)

  let $response-obj := json:object()
  
  let $_ := (
	  map:put($response-obj,'ORGANIZATION_ID',0),
    map:put($response-obj,'ORGANIZATION_NAME','NLJ 500'),
    map:put($response-obj,'CHANGE',$result),
    map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
	)
  
  let $_ :=json:array-push($response-arr, $response-obj) 

  let $amlaw200CurrentYear  := fn:avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
								,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
								,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
								,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
								)))//AMLAW_200:NUM_OF_LAWYERS/text())	

  let $amlaw200PreYear  := fn:avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
								,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
								,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($year)-1))
								,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
								)))//AMLAW_200:NUM_OF_LAWYERS/text())								
           
  let $result := fn:round-half-to-even((($amlaw200CurrentYear - $amlaw200PreYear ) div $amlaw200PreYear) * 100 ,2)

  let $response-obj := json:object()
  
  let $_ := (
	  map:put($response-obj,'ORGANIZATION_ID',0),
    map:put($response-obj,'ORGANIZATION_NAME','Am Law 100'),
    map:put($response-obj,'CHANGE',$result),
    map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
	)
  
  let $_ := json:array-push($response-arr, $response-obj) 

  (:----------------:)
  
   let $amlaw200CurrentYear  := fn:avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
								,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
								,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
								,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
								)))//AMLAW_200:NUM_OF_LAWYERS/text())	

  let $amlaw200PreYear  := fn:avg(cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
								,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
								,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($year)-1))
								,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
								)))//AMLAW_200:NUM_OF_LAWYERS/text())								
           
  let $result := fn:round-half-to-even((($amlaw200CurrentYear - $amlaw200PreYear ) div $amlaw200PreYear) * 100 ,2)

  let $response-obj := json:object()
  let $_ := (
	  map:put($response-obj,'ORGANIZATION_ID',0),
    map:put($response-obj,'ORGANIZATION_NAME','Am Law 2nd Hundred'),
    map:put($response-obj,'CHANGE', $result),
    map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
	)
  let $_ := json:array-push($response-arr, $response-obj)
  
	(:-------------------UK50------------------------:)
  let $response-obj := json:object()
	
	let $uk50ID := cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$checkMergerData//FirmData//FirmID)
							)))//UK_50:ORGANIZATION_ID/text()

	let $distinctid_gt_100_Current := fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
							)))//UK_50:ORGANIZATION_ID/text())

	
		let $res3 := xs:integer(avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100_Current ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
							)))//UK_50:NUMBER_OF_LAWYERS/text()))
		
		let $distinctid_gt_100  :=fn:distinct-values(cts:search(/,
						cts:and-query((
							cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($year) - 1))
							)))//UK_50:ORGANIZATION_ID/text())
		
		let $res3-LAG := xs:integer(avg(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
							,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.)))
							,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($year) -1))
							)))//UK_50:NUMBER_OF_LAWYERS/text()))
		
		let $difference := $res3 - $res3-LAG

		let $CHANGE := if(fn:not($distinctid_gt_100_Current != '') or fn:not($distinctid_gt_100 != '')) then -1000
					   else if($res3 ne 0 and $res3-LAG ne 0) then fn:round-half-to-even((xs:double($difference) div  $res3-LAG ) * 100 , 2) else 0
		
		let $_ :=(
			map:put($response-obj,'ORGANIZATION_ID', 0),
		map:put($response-obj,'ORGANIZATION_NAME', 'UK 100'),
		map:put($response-obj,'CHANGE', $CHANGE),
		map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
		)
		let $_ := if($uk50ID != '') then json:array-push($response-arr, $response-obj) else()
  
  return ($response-obj)
	return ($response-arr)
};

declare function firm:GetGrowthinAssociateandPartnersPostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)

	let $data := if($checkMergerData != '') then firm:GetGrowthinAssociateandPartnersPM($request) else firm:GetGrowthinAssociateandPartners($request)
	return $data
};

declare function firm:GetGrowthinAssociateandPartners($request)
{
	

	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/','1')
	))
	)
	
	let $distinctYears := if($request/StartYear/text() ne '' and $request/EndYear/text() ne '') then
						for $year in $distinctYears
						where $year ge xs:integer($request/StartYear/text()) and $year le xs:integer($request/EndYear/text())
						return $year
						else $distinctYears[1 to 5]

	let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$request//OrganisationID,'.xml'))
	let $organizationID := $organization//organization:ORGANIZATION_ID/text()
	let $organizationName := $organization//organization:ORGANIZATION_SHORT_NAME/text()
	let $response-arr := json:array()
	
	let $Interval := if($request//Interval/text() ne '') then if(xs:integer($request//Interval/text()) gt 5) then $request//Interval/text() else 5 else ''

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])	

	let $data := for $year in (reverse($distinctYears))
				let $response-obj := json:object()
				let $res := cts:search(/,
                                cts:and-query((
                                cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_250/","1"),
                                cts:element-value-query(xs:QName("nlj250:PUBLISHYEAR"),xs:string($year)),
                                cts:element-value-query(xs:QName("nlj250:ORGANIZATION_ID"),$request//OrganisationID/text())
                                )))
                                
				let $lag  := cts:search(/,
                                cts:and-query((
                                cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_250/","1"),
                                cts:element-value-query(xs:QName("nlj250:PUBLISHYEAR"),xs:string($year - 1)),
                                cts:element-value-query(xs:QName("nlj250:ORGANIZATION_ID"),$request//OrganisationID/text())
                                )))
								
								
								
								
             let $num_associates := $res//nlj250:NUM_ASSOCIATES/text() 
             let $lag_num_associates := $lag//nlj250:NUM_ASSOCIATES/text() 
             let $AssociateChange := fn:format-number((($num_associates -  $lag_num_associates) div $lag_num_associates)*100, ".00")
             
             let $num_partners := $res//nlj250:NUM_PARTNERS/text()             
             let $lag_num_partners := $lag//nlj250:NUM_PARTNERS/text()
             let $PartnerChange := fn:format-number((($num_partners -  $lag_num_partners) div $lag_num_partners)*100, ".00")

				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',xs:integer($organizationID)),
							map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
							map:put($response-obj,'AssociateChange', $AssociateChange),
							map:put($response-obj,'PartnerChange', $PartnerChange),
							map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
								)
				let $_ := if($res ne '' and $lag ne '') then json:array-push($response-arr, $response-obj) else()

				return ($res)
	return ($response-arr)
};

declare function firm:GetGrowthinAssociateandPartnersPM($request)
{
	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)

	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID

	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/','1')
	))
	)
	
	let $distinctYears := if($request/StartYear/text() ne '' and $request/EndYear/text() ne '') then
						for $year in $distinctYears
						where $year ge xs:integer($request/StartYear/text()) and $year le xs:integer($request/EndYear/text())
						return $year
						else $distinctYears[1 to 5]

	let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$request//OrganisationID,'.xml'))
	let $organizationID := $organization//organization:ORGANIZATION_ID/text()
	let $organizationName := $organization//organization:ORGANIZATION_SHORT_NAME/text()
	let $response-arr := json:array()

	let $data := for $year in (reverse($distinctYears))
				let $response-obj := json:object()
				let $res := cts:search(/,
                                cts:and-query((
                                cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_250/","1"),
                                cts:element-value-query(xs:QName("nlj250:PUBLISHYEAR"),xs:string($year)),
                                cts:element-value-query(xs:QName("nlj250:ORGANIZATION_ID"),$orgIDs)
                                )))
                                
				let $lag  := cts:search(/,
                                cts:and-query((
                                cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_250/","1"),
                                cts:element-value-query(xs:QName("nlj250:PUBLISHYEAR"),xs:string($year - 1)),
                                cts:element-value-query(xs:QName("nlj250:ORGANIZATION_ID"),$orgIDs)
                                )))
								
								
								
								
             let $num_associates := sum($res//nlj250:NUM_ASSOCIATES/text())
             let $lag_num_associates := sum($lag//nlj250:NUM_ASSOCIATES/text())
             let $AssociateChange := if($lag_num_associates ne 0) then fn:format-number((($num_associates -  $lag_num_associates) div $lag_num_associates)*100, ".00") else 0
             
             let $num_partners := sum($res//nlj250:NUM_PARTNERS/text())
             let $lag_num_partners := sum($lag//nlj250:NUM_PARTNERS/text())
             let $PartnerChange := if($lag_num_partners ne 0) then fn:format-number((($num_partners -  $lag_num_partners) div $lag_num_partners)*100, ".00") else 0

				let $_ := (
								map:put($response-obj,'ORGANIZATION_ID',xs:integer($orgIDs[1])),
							map:put($response-obj,'ORGANIZATION_NAME',''),
							map:put($response-obj,'AssociateChange', $AssociateChange),
							map:put($response-obj,'PartnerChange', $PartnerChange),
							map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
								)
				let $_ := if($res != '' and $lag != '') then json:array-push($response-arr, $response-obj) else()

				return ()
	return ($response-arr)
};

declare function firm:GetGenderBreakdownPostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)

	let $data := if($checkMergerData != '') then firm:GetGenderBreakdownPM($request) else firm:GetGenderBreakdown($request)
	return $data
};

declare function firm:GetGenderBreakdown($request)
{
	let $distinctYears := (cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query($config:DD-SURVEY-FEMALE_SCORECARD-PATH,'1')
	))))
	
	let $response-arr := json:array()

	let $Interval := if($request//Interval/text() ne '') then if(xs:integer($request//Interval/text()) gt 5) then $request//Interval/text() else 5 else ''

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $data := for $year in $yearss
				let $response-obj := json:object()
				let $res := cts:search(//survey:YEAR,
									cts:and-query((
									cts:directory-query($config:DD-SURVEY-FEMALE_SCORECARD-PATH,'1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$request//OrganisationID/text())
									)))
				let $FEMALEATTORNEYS := $res/survey:FEMALE_ATTORNEYS/text()
				let $MALEATTORNEYS := $res/survey:TOTAL_ATTORNEYS/text() - $FEMALEATTORNEYS
				let $_ := (
								map:put($response-obj,'ORGANIZATIONID', xs:integer($res/@OrganizationID/string())),
							map:put($response-obj,'ORGANIZATIONNAME', ($res/@OrganizationName/string())),
							map:put($response-obj,'PUBLISHYEAR', xs:integer($res/@PublishYear/string())),
							map:put($response-obj,'FEMALEATTORNEYS', xs:integer($FEMALEATTORNEYS)),
							map:put($response-obj,'MALEATTORNEYS', xs:integer($MALEATTORNEYS))
							)
				let $_ := if ($res) then json:array-push($response-arr, $response-obj) else ()
				return ()
				
	return ($response-arr)
};

declare function firm:GetGenderBreakdownPM($request)
{
	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID	

	let $distinctYears := (cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query($config:DD-SURVEY-FEMALE_SCORECARD-PATH,'1')
	))))
	
	let $response-arr := json:array()

	let $Interval := if($request//Interval/text() ne '') then if(xs:integer($request//Interval/text()) gt 5) then $request//Interval/text() else 5 else ''

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $data := for $year in $yearss
				let $response-obj := json:object()
				let $res := cts:search(//survey:YEAR,
									cts:and-query((
									cts:directory-query($config:DD-SURVEY-FEMALE_SCORECARD-PATH,'1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($year)),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$orgIDs)
									)))
				let $FEMALEATTORNEYS := sum($res/survey:FEMALE_ATTORNEYS/text())
				let $MALEATTORNEYS := sum($res/survey:TOTAL_ATTORNEYS/text()) - $FEMALEATTORNEYS
				let $_ := (
								map:put($response-obj,'ORGANIZATIONID', xs:integer($res[1]/@OrganizationID/string())),
								map:put($response-obj,'ORGANIZATIONNAME', ($res[1]/@OrganizationName/string())),
								map:put($response-obj,'PUBLISHYEAR', xs:integer($year)),
								map:put($response-obj,'FEMALEATTORNEYS', xs:integer($FEMALEATTORNEYS)),
								map:put($response-obj,'MALEATTORNEYS', xs:integer($MALEATTORNEYS))
							)
				let $_ := if ($res) then json:array-push($response-arr, $response-obj) else ()
				return $res
				
	return ($response-arr)
};

declare function firm:GetGrowthInGenderDiversityPostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)

	let $data := if($checkMergerData != '') then firm:GetGrowthInGenderDiversityPM($request) else firm:GetGrowthInGenderDiversity($request)
	return $data
};

declare function firm:GetGrowthInGenderDiversity($request)
{
	
	let $distinctYears := (cts:element-values(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),(),('descending'),
		cts:and-query((
			cts:directory-query('/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/','1')
		))))
		
	let $response-arr := json:array()
	
	let $Interval := if($request//Interval/text() ne '') then if(xs:integer($request//Interval/text()) gt 5) then $request//Interval/text() else 5 else ''

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])
	
	let $data := for $year in $yearss
		
		let $response-obj := json:object()
		let $res := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/','1')
				,cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($year))
				,cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$request//OrganisationID/text())
			)))
		
		let $FEMALEATTORNEYS := $res//FEMALE_SCORECARD:FEMALE_ATTORNEYS/text()
		
		let $FEMALEPARTNERS := fn:format-number($res//FEMALE_SCORECARD:FEMALE_PARTNERS/text() , '00')
		
		let $FEMALEEQUITYPARTNERS := if( $res//FEMALE_SCORECARD:FEMALE_EQUITY_PARTNERS/text() ne '')
				then xs:decimal(fn:format-number($res//FEMALE_SCORECARD:FEMALE_EQUITY_PARTNERS/text() , '00'))
			else 0
		
		let $FEMALENONEQUITYPARTNERS := if( $res//FEMALE_SCORECARD:FEMALE_NONEQUITY_PARTNERS/text() ne '')
				then xs:decimal(fn:format-number($res//FEMALE_SCORECARD:FEMALE_NONEQUITY_PARTNERS/text() , '00'))
			else 0

		let $FEMALEASSOCIATES := try { 
				xs:decimal(fn:format-number($res//FEMALE_SCORECARD:FEMALE_ASSOCIATES/text() , '00'))
			}
			catch($x) { 0 }
				
		let $FEMALEOTHERATTORNEYS := if($res//FEMALE_SCORECARD:FEMALE_OTHER_ATTORNEYS/text() ne '')
				then (fn:format-number($res//FEMALE_SCORECARD:FEMALE_OTHER_ATTORNEYS/text() , '00'))
			else 0
				
		let $_ := (
			map:put($response-obj,'ORGANIZATIONID', xs:integer($res//FEMALE_SCORECARD:ORGANIZATION_ID/text())),
			map:put($response-obj,'ORGANIZATIONNAME', $res//FEMALE_SCORECARD:ORGANIZATION_NAME/text()),
			map:put($response-obj,'PUBLISHYEAR', xs:integer($year)),
			map:put($response-obj,'FEMALEATTORNEYS', xs:integer($FEMALEATTORNEYS)),
			map:put($response-obj,'FEMALEEQUITYPARTNERS', ($FEMALEEQUITYPARTNERS)),
			map:put($response-obj,'FEMALENONEQUITYPARTNERS', ($FEMALENONEQUITYPARTNERS)),
			map:put($response-obj,'FEMALEASSOCIATES', ($FEMALEASSOCIATES)),
			map:put($response-obj,'FEMALEOTHERATTORNEYS', ($FEMALEOTHERATTORNEYS))
		)
		
		let $_ := if ($res) then json:array-push($response-arr, $response-obj) else ()
		
		return $res
				
	return ($response-arr) 
};

declare function firm:GetGrowthInGenderDiversityPM($request)
{
	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID	

	let $distinctYears := (cts:element-values(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),(),('descending'),
		cts:and-query((
			cts:directory-query('/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/','1')
		))))
		
	let $response-arr := json:array()

	let $Interval := if($request//Interval/text() ne '') then if(xs:integer($request//Interval/text()) gt 5) then $request//Interval/text() else 5 else ''

	let $interval := if(xs:string($Interval) ne '') then $Interval else ()
	let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])

	let $data := for $year in $yearss
		
		let $response-obj := json:object()
		let $res := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/','1')
				,cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($year))
				,cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$orgIDs)
			)))
		
		let $FEMALEATTORNEYS := sum($res//FEMALE_SCORECARD:FEMALE_ATTORNEYS/text())
		
		let $FEMALEPARTNERS := fn:format-number(sum($res//FEMALE_SCORECARD:FEMALE_PARTNERS/text()) , '00')
		
		let $FEMALEEQUITYPARTNERS := if( $res//FEMALE_SCORECARD:FEMALE_EQUITY_PARTNERS/text() != '')
				then xs:decimal(fn:format-number(sum($res//FEMALE_SCORECARD:FEMALE_EQUITY_PARTNERS/text()) , '00'))
			else 0
		
		let $FEMALENONEQUITYPARTNERS := if( $res//FEMALE_SCORECARD:FEMALE_NONEQUITY_PARTNERS/text() != '')
				then xs:decimal(fn:format-number(sum($res//FEMALE_SCORECARD:FEMALE_NONEQUITY_PARTNERS/text()) , '00'))
			else 0

		let $FEMALEASSOCIATES := try { 
				xs:decimal(fn:format-number(sum($res//FEMALE_SCORECARD:FEMALE_ASSOCIATES/text()) , '00'))
			}
			catch($x) { 0 }
				
		let $FEMALEOTHERATTORNEYS := if($res//FEMALE_SCORECARD:FEMALE_OTHER_ATTORNEYS/text() != '')
				then (fn:format-number(sum($res//FEMALE_SCORECARD:FEMALE_OTHER_ATTORNEYS/text()) , '00'))
			else 0
				
		let $_ := (
			map:put($response-obj,'ORGANIZATIONID', xs:integer($res[1]//FEMALE_SCORECARD:ORGANIZATION_ID/text())),
			map:put($response-obj,'ORGANIZATIONNAME', $res[1]//FEMALE_SCORECARD:ORGANIZATION_NAME/text()),
			map:put($response-obj,'PUBLISHYEAR', xs:integer($year)),
			map:put($response-obj,'FEMALEATTORNEYS', xs:integer($FEMALEATTORNEYS)),
			map:put($response-obj,'FEMALEEQUITYPARTNERS', ($FEMALEEQUITYPARTNERS)),
			map:put($response-obj,'FEMALENONEQUITYPARTNERS', ($FEMALENONEQUITYPARTNERS)),
			map:put($response-obj,'FEMALEASSOCIATES', ($FEMALEASSOCIATES)),
			map:put($response-obj,'FEMALEOTHERATTORNEYS', ($FEMALEOTHERATTORNEYS))
		)
		
		let $_ := if ($res) then json:array-push($response-arr, $response-obj) else ()
		
		return $res
				
	return ($response-arr) 
};

declare function firm:GetLeveragePostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)

	let $data := if($checkMergerData != '') then firm:GetLeveragePM($request) else firm:GetLeverage($request)
	return $data
};

declare function firm:GetLeverage($request)
{	
		let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
			cts:and-query((
			cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/','1')
			)))

		let $distinctYears := if($request/StartYear/text() ne '' and $request/EndYear/text() ne '') then
		for $year in $distinctYears
		where $year ge xs:integer($request/StartYear/text()) and $year le xs:integer($request/EndYear/text())
		return $year
		else $distinctYears[1 to 5]
			
		let $OrganizationID := $request//OrganisationID/text()
		let $OrganizationName := if((/organization[organizations:ORGANIZATION_ID = xs:string($OrganizationID)]/organizations:ALM_NAME/text())[1] ne '')then 
			/organization[organizations:ORGANIZATION_ID = xs:string($OrganizationID)]/organizations:ALM_NAME/text()[1]
		else 
			/organization[organizations:ORGANIZATION_ID = xs:string($OrganizationID)]/organizations:ORGANIZATION_NAME/text()[1]
		let $response-arr := json:array()	

		let $amlaw200maxYearData := cts:search(/,
								cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/','1')
									,cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string(max($distinctYears)))
									,cts:element-value-query(xs:QName('nlj250:ORGANIZATION_ID'),$request//OrganisationID/text())
									)))[1]

		let $uk50maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
				cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$request//OrganisationID/text())
			)))[1]

		let $global100maxYearData := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
				cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
				cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$request//OrganisationID/text())
			)))[1]				

		let $china40maxYearData := cts:search(/,
		cts:and-query((
			cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/'),
			cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(fn:max($distinctYears))),
			cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),$request//OrganisationID/text())
		)))[1]						

		let $maxYearData := if($uk50maxYearData ne '' or $amlaw200maxYearData ne '' or $global100maxYearData ne '' or $china40maxYearData ne '') then 'Y' else ()

		let $Interval := if($request//Interval/text() ne '') then if(xs:integer($request//Interval/text()) gt 5) then $request//Interval/text() else 5 else ''

		let $interval := if(xs:string($Interval) ne '') then $Interval else ()
		let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])							

		let $data := for $year in $yearss
		(:--------------1st Part-------------:)
		let $response-obj := json:object()
			let $a := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/','1')
				,cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string($year))
			,cts:element-value-query(xs:QName('nlj250:ORGANIZATION_ID'),$request//OrganisationID/text())
				)))[1]
			
		let $d := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/','1')
				,cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year))
			,cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$request//OrganisationID/text())
				))) [1] 
		let $e := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
				,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
			,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$request//OrganisationID/text())
				)))[1]
		let $g := cts:search(/,
			cts:and-query((
				cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/','1')
				,cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year))
			,cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),$request//OrganisationID/text())
				))) [1] 

		let $NUM_ATTORNEYS :=if($a//nlj250:EQUITY_PARTNERS/text()) then fn:round-half-to-even(($a//nlj250:NUM_ATTORNEYS/text() - $a//nlj250:EQUITY_PARTNERS/text()) div ($a//nlj250:EQUITY_PARTNERS/text()) , 2)
							 else if($d//Global_100:NUM_EQUITY_PARTNERS/text()) then ($d//Global_100:NUM_LAWYERS/text() -  $d//Global_100:NUM_EQUITY_PARTNERS/text())  div $d//Global_100:NUM_EQUITY_PARTNERS/text() 
							 else if($e//UK_50:LEVERAGE/text()) then $e//UK_50:LEVERAGE/text()
							 else if($g//CHINA_40:EQUITY_PARTNERS/text()) then ($g//CHINA_40:FIRMWIDE_LAWYERS/text() - $g//CHINA_40:EQUITY_PARTNERS/text()) div $g//CHINA_40:EQUITY_PARTNERS/text()
							 else -1000
		
		 (: if(fn:not($a//nlj250:NUM_NE_PARTNERS/text() ne "") and fn:not($d//Global_100:NUM_LAWYERS/text() ne ""))
		then 
			if(fn:not($e//UK_50:NUMBER_OF_LAWYERS/text() != ""))
			then ($g//CHINA_40:FIRMWIDE_LAWYERS/text() - $g//CHINA_40:EQUITY_PARTNERS/text()) div $g//CHINA_40:EQUITY_PARTNERS/text()
			else $e//UK_50:LEVERAGE/text()
		else 
			if(fn:not($a//nlj250:NUM_NE_PARTNERS/text() ne ''))
			then ($d//Global_100:NUM_LAWYERS/text() -  $d//Global_100:NUM_EQUITY_PARTNERS/text())  div $d//Global_100:NUM_EQUITY_PARTNERS/text() 
			else fn:round-half-to-even(($a//nlj250:NUM_ATTORNEYS/text() - $a//nlj250:EQUITY_PARTNERS/text()) div ($a//nlj250:EQUITY_PARTNERS/text()) , 2) :)
		
		let $isAddMaxYear := if(xs:string($year) ne xs:string(max($distinctYears))) then 'y' else
									if($a ne '' or $d ne '' or $e ne '' or $g ne '') then 'y' else 'n' 

		let $_ := (
				map:put($response-obj,'ORGANIZATION_ID',xs:integer($OrganizationID)),
				map:put($response-obj,'ORGANIZATION_NAME', $OrganizationName),
				map:put($response-obj,'CHANGE', fn:round-half-to-even($NUM_ATTORNEYS,2)),
				map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
				)
		let $_ :=if(xs:string($year) ne xs:string(max($distinctYears))) then json:array-push($response-arr, $response-obj) else
					if($maxYearData ne '' and ($a ne '' or $d ne '' or $e ne '' or $g ne ''))
								then json:array-push($response-arr,$response-obj) else()
		(:--------------2nd Part-------------:)
		let $response-obj := json:object()        
		let $amlaw200CurrentYear  := fn:avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
										,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
										,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
										,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
										)))//AMLAW_200:LEVERAGE/text())	

		let $amlaw200PreYear  := fn:avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
										,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
										,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($year)-1))
										,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
										)))//AMLAW_200:LEVERAGE/text())								
				
		let $result :=if(xs:string($NUM_ATTORNEYS) ne '-1000') then (:fn:round-half-to-even((($amlaw200CurrentYear - $amlaw200PreYear ) div $amlaw200PreYear) * 100 ,2):) fn:round-half-to-even($amlaw200CurrentYear,2) else -1000
		
		let $_ := (
				map:put($response-obj,'ORGANIZATION_ID',xs:integer(0)),
				map:put($response-obj,'ORGANIZATION_NAME','Am Law 100'),
				map:put($response-obj,'CHANGE', $result),
				map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
				)
		let $_ :=if($isAddMaxYear ne 'n' ) then json:array-push($response-arr, $response-obj)  else()
		(:--------------3rd Part-------------:)
		let $response-obj := json:object()        
		let $amlaw200CurrentYear  := fn:avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
										,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
										,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
										,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
										)))//AMLAW_200:LEVERAGE/text())	

		let $amlaw200PreYear  := fn:avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
										,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
										,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($year)-1))
										,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
										)))//AMLAW_200:LEVERAGE/text())								
				
		let $result :=if(xs:string($NUM_ATTORNEYS) ne '-1000') then (:fn:round-half-to-even((($amlaw200CurrentYear - $amlaw200PreYear ) div $amlaw200PreYear) * 100 ,2):) fn:round-half-to-even($amlaw200CurrentYear,2) else -1000
		
		let $_ := (
				map:put($response-obj,'ORGANIZATION_ID',xs:integer(0)),
				map:put($response-obj,'ORGANIZATION_NAME','Am Law 2nd Hundred'),
				map:put($response-obj,'CHANGE', $result),
				map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
				)
		let $_ := if($isAddMaxYear ne 'n') then json:array-push($response-arr, $response-obj)  else()

		

		(:---------------UK50------------------------:)
		
		let $response-obj := json:object()
			
			let $uk50ID := cts:search(/,
								cts:and-query((
									cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")(:,
									cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)):),
									cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($OrganizationID))
									)))[1]//UK_50:ORGANIZATION_ID/text()

			let $distinctid_gt_100_Current := fn:distinct-values(cts:search(/,
								cts:and-query((
									cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
									cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
									)))//UK_50:ORGANIZATION_ID/text())

			
				let $res3 := avg(cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
									(:,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.))):)
									,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
									)))//UK_50:LEVERAGE/text())
				
				let $distinctid_gt_100  :=fn:distinct-values(cts:search(/,
								cts:and-query((
									cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
									cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($year) - 1))
									)))//UK_50:ORGANIZATION_ID/text())
				
				let $res3-LAG :=avg(cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
									(:,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.))):)
									,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($year) -1))
									)))//UK_50:LEVERAGE/text())
				
				let $difference := $res3 - $res3-LAG

				(: let $CHANGE := if(fn:not($distinctid_gt_100_Current != '') or fn:not($distinctid_gt_100 != '')) then -1000
							else if($res3 ne 0 and $res3-LAG ne 0) then fn:round-half-to-even((xs:double($difference) div  $res3-LAG ) * 100 , 2) else 0 :)

				let $CHANGE := if(fn:not($distinctid_gt_100_Current != '') or fn:not($distinctid_gt_100 != '')) then -1000
							else if($res3 ne 0 and $res3-LAG ne 0) then fn:round-half-to-even($res3 , 2) else 0			
				
				let $_ :=(
					map:put($response-obj,'ORGANIZATION_ID', 0),
				map:put($response-obj,'ORGANIZATION_NAME', 'UK 100'),
				map:put($response-obj,'CHANGE', $CHANGE),
				map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
				)
				let $_ :=if($uk50ID ne '' and $isAddMaxYear ne 'n') then json:array-push($response-arr, $response-obj) else()
		return ()  
		return $response-arr

};

declare function firm:GetLeveragePM($request)
{
	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetMergedFirmData($OrganisationID)

	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID
	
	let $uk50ID := cts:search(/,
								cts:and-query((
									cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/")(:,
									cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year)):),
									cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$checkMergerData//FirmData//FirmID)
									)))//UK_50:ORGANIZATION_ID/text()	

	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
		cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/','1')
		)))

		let $distinctYears := if($request/StartYear/text() ne '' and $request/EndYear/text() ne '') then
		for $year in $distinctYears
		where $year ge xs:integer($request/StartYear/text()) and $year le xs:integer($request/EndYear/text())
		return $year
		else $distinctYears[1 to 5]
			
		
		
		let $response-arr := json:array()	

		let $maxYearData := cts:search(/,
								cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/','1')
									,cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string(max($distinctYears)))
									,cts:element-value-query(xs:QName('nlj250:ORGANIZATION_ID'),$request//OrganisationID/text())
									)))[1]

		let $Interval := if($request//Interval/text() ne '') then if(xs:integer($request//Interval/text()) gt 5) then $request//Interval/text() else 5 else ''

		let $interval := if(xs:string($Interval) ne '') then $Interval else ()
		let $yearss := if(xs:string($interval) ne '') then fn:reverse($distinctYears[1 to xs:integer($interval)]) else fn:reverse($distinctYears[1 to 5])							

		let $data := for $year in $yearss
						let $isAddMaxYearT := fn:boolean('') 
						let $loopData := for $item in $checkMergerData//FirmData
											let $OrganizationID := $item//FirmID/text()
											let $OrganizationName := $item//FirmName/text()

											(: let $OrganizationName := if((/organization[organizations:ORGANIZATION_ID = xs:string($OrganizationID)]/organizations:ALM_NAME/text())[1] ne '')then 
													/organization[organizations:ORGANIZATION_ID = xs:string($OrganizationID)]/organizations:ALM_NAME/text()[1]
												else 
													/organization[organizations:ORGANIZATION_ID = xs:string($OrganizationID)]/organizations:ORGANIZATION_NAME/text()[1] :)
											(:--------------1st Part-------------:)
											let $response-obj := json:object()
												let $a := cts:search(/,
												cts:and-query((
													cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/','1')
													,cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string($year))
												,cts:element-value-query(xs:QName('nlj250:ORGANIZATION_ID'),$OrganizationID)
													)))
												
											let $d := cts:search(/,
												cts:and-query((
													cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/','1')
													,cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year))
												,cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$OrganizationID)
													))) [1] 
											let $e := cts:search(/,
												cts:and-query((
													cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
													,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
												,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$OrganizationID)
													)))[1]
											let $g := cts:search(/,
												cts:and-query((
													cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/','1')
													,cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($year))
												,cts:element-value-query(xs:QName('CHINA_40:ORGANIZATION_ID'),$OrganizationID)
													))) [1] 

											let $NUM_ATTORNEYS := if(fn:not($a ne '') and fn:not($d ne '') and fn:not($e ne '') and fn:not($g ne '')) then -1000 else
											
											 if(fn:not($a//nlj250:NUM_NE_PARTNERS/text() ne "") and fn:not($d//Global_100:NUM_LAWYERS/text() ne ""))
											then 
												if(fn:not($e//UK_50:NUMBER_OF_LAWYERS/text() ne ""))
												then ($g//CHINA_40:FIRMWIDE_LAWYERS/text() - $g//CHINA_40:EQUITY_PARTNERS/text()) div $g//CHINA_40:EQUITY_PARTNERS/text()
												else $e//UK_50:LEVERAGE/text()
											else 
												if(fn:not($a//nlj250:NUM_NE_PARTNERS/text() ne ''))
												then ($d//Global_100:NUM_LAWYERS/text() -  $d//Global_100:NUM_EQUITY_PARTNERS/text())  div $d//Global_100:NUM_EQUITY_PARTNERS/text() 
												else fn:round-half-to-even(($a//nlj250:NUM_ATTORNEYS/text() - $a//nlj250:EQUITY_PARTNERS/text()) div ($a//nlj250:EQUITY_PARTNERS/text()) , 2)
											
											let $isAddMaxYear := if(xs:string($year) ne xs:string(max($distinctYears))) then (xdmp:set($isAddMaxYearT, fn:boolean('true')), $isAddMaxYearT) else
																		if($a ne '' or $d ne '' or $e ne '' or $g ne '') then (xdmp:set($isAddMaxYearT, fn:boolean('true')), $isAddMaxYearT) else (xdmp:set($isAddMaxYearT, fn:boolean('')), $isAddMaxYearT) 

											let $_ := (
													map:put($response-obj,'ORGANIZATION_ID',xs:integer($OrganizationID)),
													map:put($response-obj,'ORGANIZATION_NAME', $OrganizationName),
													map:put($response-obj,'CHANGE', fn:round-half-to-even($NUM_ATTORNEYS,2)),
													map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
													)
											let $_ :=if($isAddMaxYear eq fn:boolean('true')) then json:array-push($response-arr,$response-obj) else ()
											return()

		(:--------------2nd Part-------------:)
		let $response-obj := json:object()        
		let $amlaw200CurrentYear  := fn:avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
										,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
										,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
										,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
										)))//AMLAW_200:LEVERAGE/text())	

		let $amlaw200PreYear  := fn:avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
										,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '<=',100)
										,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($year)-1))
										,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
										)))//AMLAW_200:LEVERAGE/text())								
				
		let $result := (:fn:round-half-to-even((($amlaw200CurrentYear - $amlaw200PreYear ) div $amlaw200PreYear) * 100 ,2):) fn:round-half-to-even($amlaw200CurrentYear,2)
		
		let $_ := (
				map:put($response-obj,'ORGANIZATION_ID',xs:integer(0)),
				map:put($response-obj,'ORGANIZATION_NAME','Am Law 100'),
				map:put($response-obj,'CHANGE', $result),
				map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
				)
		let $_ := json:array-push($response-arr, $response-obj)
		(:--------------3rd Part-------------:)
		let $response-obj := json:object()        
		let $amlaw200CurrentYear  := fn:avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
										,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
										,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
										,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
										)))//AMLAW_200:LEVERAGE/text())	

		let $amlaw200PreYear  := fn:avg(cts:search(/,
										cts:and-query((
										cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
										,cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'), '>',100)
										,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($year)-1))
										,cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
										)))//AMLAW_200:LEVERAGE/text())								
				
		let $result := (:fn:round-half-to-even((($amlaw200CurrentYear - $amlaw200PreYear ) div $amlaw200PreYear) * 100 ,2) :) fn:round-half-to-even($amlaw200CurrentYear,2)
		
		let $_ := (
				map:put($response-obj,'ORGANIZATION_ID',xs:integer(0)),
				map:put($response-obj,'ORGANIZATION_NAME','Am Law 2nd Hundred'),
				map:put($response-obj,'CHANGE', $result),
				map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
				)
		let $_ := json:array-push($response-arr, $response-obj) 

		

		(:---------------UK50------------------------:)
		
		let $response-obj := json:object()
			
			

			let $distinctid_gt_100_Current := fn:distinct-values(cts:search(/,
								cts:and-query((
									cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
									cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($year))
									)))//UK_50:ORGANIZATION_ID/text())

			
				let $res3 := avg(cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
									(:,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.))):)
									,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($year))
									)))//UK_50:LEVERAGE/text())
				
				let $distinctid_gt_100  :=fn:distinct-values(cts:search(/,
								cts:and-query((
									cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
									cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($year) - 1))
									)))//UK_50:ORGANIZATION_ID/text())
				
				let $res3-LAG :=avg(cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1')
									(:,cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),($distinctid_gt_100 ! xs:string(.))):)
									,cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($year) -1))
									)))//UK_50:LEVERAGE/text())
				
				let $difference := $res3 - $res3-LAG

				let $CHANGE := if(fn:not($distinctid_gt_100_Current != '') or fn:not($distinctid_gt_100 != '')) then -1000
							else if($res3 ne 0 and $res3-LAG ne 0) then fn:round-half-to-even( $res3 , 2) else 0
				
				let $_ :=(
					map:put($response-obj,'ORGANIZATION_ID', 0),
				map:put($response-obj,'ORGANIZATION_NAME', 'UK 100'),
				map:put($response-obj,'CHANGE', $CHANGE),
				map:put($response-obj,'PUBLISHYEAR',xs:integer($year))
				)
				let $_ :=if($uk50ID != '') then json:array-push($response-arr, $response-obj) else()
		return ()  
		return $response-arr

};

declare function firm:GetChangesinHeadcountByYearPostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $data := if($checkMergerData != '') then firm:GetChangesinHeadcountByYearPM($request) else firm:GetChangesinHeadcountByYear($request)

	return $data
};

declare function firm:GetChangesinHeadcountByYear($request)
{
	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/','1')
	))
	)
	let $res := cts:search(//survey:YEAR,
									cts:and-query((
									cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/','1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($distinctYears))),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$request//OrganisationID/text())
									)))
	
	let $res1 := cts:search(//survey:YEAR,
									cts:and-query((
									cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/','1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($distinctYears) - 4)),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$request//OrganisationID/text())
									)))
										
	let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$request//OrganisationID,'.xml'))
	let $organizationID := $organization//organization:ORGANIZATION_ID/text()
	let $organizationName := $organization//organization:ORGANIZATION_SHORT_NAME/text()
	
	let $NUM_ASSOCIATES := $res//survey:NUM_ASSOCIATES/text()
	let $LAG_NUM_ASSOCIATES := $res1//survey:NUM_ASSOCIATES/text()
	let $NUM_NE_PARTNERS := $res//survey:NUM_NE_PARTNERS/text()
	let $LAG_NUM_NE_PARTNERS := $res1//survey:NUM_NE_PARTNERS/text()
	let $EQUITY_PARTNERS := $res//survey:EQUITY_PARTNERS/text()
	let $LAG_EQUITY_PARTNERS := $res1//survey:EQUITY_PARTNERS/text()
	
	let $AssociateChange := ((( $NUM_ASSOCIATES - $LAG_NUM_ASSOCIATES ) div $LAG_NUM_ASSOCIATES ) * 100)
	let $NonEQPartnerChange := if(($LAG_NUM_NE_PARTNERS > 0) and (($NUM_NE_PARTNERS - $LAG_NUM_NE_PARTNERS lt 0) or ($NUM_NE_PARTNERS - $LAG_NUM_NE_PARTNERS gt 0)))
							then fn:format-number(((( $NUM_NE_PARTNERS - $LAG_NUM_NE_PARTNERS ) div $LAG_NUM_NE_PARTNERS ) * 100), '.00')
							else 100
							
	let $EQPartnerChange := if(($EQUITY_PARTNERS - $LAG_EQUITY_PARTNERS  lt 0) or ($EQUITY_PARTNERS - $LAG_EQUITY_PARTNERS  gt 0))
							then fn:format-number(((( $EQUITY_PARTNERS - $LAG_EQUITY_PARTNERS  ) div $LAG_EQUITY_PARTNERS ) * 100), '.00')
							else 100
													
	let $response-arr := json:array()
	let $response-obj := json:object()
	
	let $_ := (
					map:put($response-obj,'ORGANIZATION_ID',xs:integer($organizationID)),
			map:put($response-obj,'ORGANIZATION_NAME',$organizationName),
			map:put($response-obj,'AssociateChange',if(xs:string($AssociateChange) ne '') then fn:round-half-to-even(xs:decimal($AssociateChange),2) else 0),
			map:put($response-obj,'NonEQPartnerChange',xs:decimal($NonEQPartnerChange)),
			map:put($response-obj,'EQPartnerChange',xs:decimal($EQPartnerChange)),
			map:put($response-obj,'PUBLISHYEAR',max($distinctYears))           
			)
	let $_ := if($res ne '' and $res1 ne '') then json:array-push($response-arr, $response-obj) else()
	
	return $response-arr
};

declare function firm:GetChangesinHeadcountByYearPM($request)
{
	let $OrganisationID := $request//OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)

	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID

	let $distinctYears := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/','1')
	))
	)
	let $res := cts:search(//survey:YEAR,
									cts:and-query((
									cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/','1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($distinctYears))),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$orgIDs)
									)))
	
	let $res1 := cts:search(//survey:YEAR,
									cts:and-query((
									cts:directory-query('/LegalCompass/denormalized-data/surveys/NLJ_250/','1'),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string(max($distinctYears) - 4)),
									cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$orgIDs)
									)))
										
	(: let $organization := fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$request//OrganisationID,'.xml'))
	let $organizationID := $organization//organization:ORGANIZATION_ID/text()
	let $organizationName := $organization//organization:ORGANIZATION_SHORT_NAME/text() :)
	
	let $NUM_ASSOCIATES := sum($res//survey:NUM_ASSOCIATES/text())
	let $LAG_NUM_ASSOCIATES := sum($res1//survey:NUM_ASSOCIATES/text())
	let $NUM_NE_PARTNERS := sum($res//survey:NUM_NE_PARTNERS/text())
	let $LAG_NUM_NE_PARTNERS := sum($res1//survey:NUM_NE_PARTNERS/text())
	let $EQUITY_PARTNERS := sum($res//survey:EQUITY_PARTNERS/text())
	let $LAG_EQUITY_PARTNERS := sum($res1//survey:EQUITY_PARTNERS/text())
	
	let $AssociateChange := if($LAG_NUM_ASSOCIATES ne 0) then ((( $NUM_ASSOCIATES - $LAG_NUM_ASSOCIATES ) div $LAG_NUM_ASSOCIATES ) * 100) else 0
	let $NonEQPartnerChange := if(($LAG_NUM_NE_PARTNERS > 0) and (($NUM_NE_PARTNERS - $LAG_NUM_NE_PARTNERS lt 0) or ($NUM_NE_PARTNERS - $LAG_NUM_NE_PARTNERS gt 0)))
							then fn:format-number(((( $NUM_NE_PARTNERS - $LAG_NUM_NE_PARTNERS ) div $LAG_NUM_NE_PARTNERS ) * 100), '.00')
							else 100
							
	let $EQPartnerChange := if(($EQUITY_PARTNERS - $LAG_EQUITY_PARTNERS  lt 0) or ($EQUITY_PARTNERS - $LAG_EQUITY_PARTNERS  gt 0))
							then fn:format-number(((( $EQUITY_PARTNERS - $LAG_EQUITY_PARTNERS  ) div $LAG_EQUITY_PARTNERS ) * 100), '.00')
							else 100
													
	let $response-arr := json:array()
	let $response-obj := json:object()
	
	let $_ := (
					map:put($response-obj,'ORGANIZATION_ID',xs:integer($orgIDs[1])),
			map:put($response-obj,'ORGANIZATION_NAME',''),
			map:put($response-obj,'AssociateChange',if(xs:string($AssociateChange) ne '') then fn:round-half-to-even(xs:decimal($AssociateChange),2) else 0),
			map:put($response-obj,'NonEQPartnerChange',xs:decimal($NonEQPartnerChange)),
			map:put($response-obj,'EQPartnerChange',xs:decimal($EQPartnerChange)),
			map:put($response-obj,'PUBLISHYEAR',max($distinctYears))           
			)
	let $_ := if($res != '' and $res1 != '') then json:array-push($response-arr, $response-obj) else()
	
	return $response-arr
};

declare function firm:GetLawFirmGlobalMapALI()
{
	let $request := xdmp:get-request-body()/request
	
	let $response-obj := json:object()
	let $response-arr := json:array()
	
	let $organization :='' (:fn:doc(fn:concat($config:DD-ORGANIZATION-PATH, $request/FirmID/text(),'.xml')):)
	let $organizationID := 0 (:$organization//organization:ORGANIZATION_ID/text():)
	let $organizationName := '' (:$organization//organization:ORGANIZATION_SHORT_NAME/text():)
	
	let $result-data := cts:search(/,
			cts:and-query((
			cts:directory-query($config:RD-ORGANIZATION_BRANCH-PATH,'1'),
		cts:element-range-query(xs:QName('organization-branch:FISCAL_YEAR'), '>=', fn:year-from-dateTime(fn:current-dateTime()) - 10),
		cts:element-value-query(xs:QName('organization-branch:ORGANIZATION_ID'), fn:tokenize($request/FirmID/text(),',')),
		cts:element-range-query(xs:QName('organization-branch:FISCAL_YEAR'), '>=', xs:integer($request/FromYear/text() -1 )),
		cts:element-range-query(xs:QName('organization-branch:FISCAL_YEAR'), '<=', xs:integer($request/ToYear/text()))		
		)))

	let $nljMaxYear	 := fn:max(cts:search(/,
							cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/')
								)))//nlj250:PUBLISHYEAR/text())
	
	let $data := for $data in $result-data
						let $location := if($data//organization-branch:STATE/text() or $data//organization-branch:COUNTRY/text()) then 
											if($data//organization-branch:STATE/text()) then
												fn:concat($data//organization-branch:CITY/text(),', ',$data//organization-branch:STATE/text())
											else
												fn:concat($data//organization-branch:CITY/text(),', ',$data//organization-branch:COUNTRY/text())
										 else ()

						let $FISCAL_YEAR := $data//organization-branch:FISCAL_YEAR/text()  
						
						let $nlj250 := cts:search(/,
												cts:and-query((
													cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/'),
													cts:element-value-query(xs:QName('nlj250:ORGANIZATION_ID'),$data//organization-branch:ORGANIZATION_ID/text()),
													cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string($nljMaxYear))
													)))[1]

						let $levrage := cts:search(//survey:YEAR,
							cts:and-query((
							cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_200/','1'),
							cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),$FISCAL_YEAR),
							cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),$data//organization-branch:ORGANIZATION_ID/text())
						)))//survey:LEVERAGE/text()
						
						let $city-data := cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/city_detail/'),
							cts:element-value-query(xs:QName('city_detail:STD_LOC'),$location,('case-insensitive'))
							)))
						
						let $response-obj := json:object()
						let $_ := (
							map:put($response-obj,'FirmId', $data//organization-branch:ORGANIZATION_ID/text()),
							map:put($response-obj,'FirmName', $data//organization-branch:ORGANIZATION_NAME/text()),
							map:put($response-obj,'TotalAttorneys', $data//organization-branch:NUM_ATTORNEYS/text()),
							map:put($response-obj,'Partners', xs:integer(fn:round($data//organization-branch:TOTAL_PARTNERS/text()))),
							map:put($response-obj,'EquityPartners', xs:integer(fn:round($data//organization-branch:EQUITY_PARTNERS/text()))),
							map:put($response-obj,'NonEquityPartners', xs:integer(fn:round($data//organization-branch:NON_EQUITY_PARTNERS/text()))),
							map:put($response-obj,'OtherAttorneys',xs:integer(fn:round($data//organization-branch:OTHER_ATTORNEYS/text()))),
							map:put($response-obj,'Associates', xs:integer(fn:round($data//organization-branch:ASSOCIATES/text()))),
							map:put($response-obj,'Location', $location),
							map:put($response-obj,'S', $data//organization-branch:STATE),
							map:put($response-obj,'C', $data//organization-branch:COUNTRY),
							map:put($response-obj,'YEAR', $FISCAL_YEAR),
							map:put($response-obj,'CITY', $data//organization-branch:CITY/text()),
							map:put($response-obj,'STATE', $data//organization-branch:STATE/text()),
							map:put($response-obj,'COUNTRY', $data//organization-branch:COUNTRY/text()),
							map:put($response-obj,'LEVRAGE', $levrage),
							map:put($response-obj,'LATITUDE', $city-data//city_detail:LATITUDE/text()),
							map:put($response-obj,'LONGITUDE', $city-data//city_detail:LONGITUDE/text()),
							map:put($response-obj,'Location1', concat($location,'-',$city-data//city_detail:ID/text()))
							)
						let $_ :=if($nlj250 and $location) then json:array-push($response-arr,$response-obj) else ()
						return ($data)
	return ($response-arr)
};

declare function firm:GetClients()
{
	
	let $request := xdmp:get-request-body()/request
	let $OrganisationID := $request/FirmID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)

	let $firmID := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID

	let $fromYear := xs:integer($request/FromYear/text())
	let $toYear := xs:integer($request/ToYear/text()) 
	let $representationIDs := $request/RepresentationID/text()
	
	let $response-arr := json:array()
	let $response-obj := json:object()

	let $WCW_REPRESENTATION_TYPE_ID-Query := if($representationIDs ne '')then
	cts:element-value-query(xs:QName('Who_Counsels_who:REPRESENTATION_TYPE_ID'),($representationIDs ! xs:string(.)),'exact')
	else ()
	
	let $BDBS_TRANSACTION_TYPE_ID_Query :=  if($representationIDs ne '')then
	cts:element-value-query(xs:QName('bdbs-transaction:TRANSACTION_TYPE_ID'),$representationIDs,'exact')
	else ()
	
	let $LFR_NEW_REPRESENTATION_TYPE_ID_Query := if($representationIDs ne '')then
	cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:REPRESENTATION_TYPE_ID'),$representationIDs,'exact')
	else ()
	
	let $LFR_REPRESENTATION_TYPE_ID_Query := if($representationIDs ne '')then
	cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:REPRESENTATION_TYPE_ID'),$representationIDs,'exact')
	else ()
	
	let $organization := (:fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/',$firmID,'.xml')):) 0
	let $organizationID := (:$organization//organization:ORGANIZATION_ID/text():) ''
	let $organizationName := ''(:if ($organization//organization:ALM_NAME/text() != '') then ($organization//organization:ALM_NAME/text()) else fn:normalize-space($organization//organization:ORGANIZATION_NAME/text()) :)
	(:let $organizationName := $organization//organization:ORGANIZATION_SHORT_NAME/text() :)
	
	let $search-result1:= cts:search(/,
	cts:and-query((
	cts:directory-query($config:RD-SURVEY-WHO_COUNSELS_WHO-PATH),
	cts:element-value-query(xs:QName('Who_Counsels_who:OUTSIDE_COUNSEL_ID'),$firmID),
	$WCW_REPRESENTATION_TYPE_ID-Query,
	cts:element-range-query(xs:QName('Who_Counsels_who:FISCAL_YEAR'), '>=', $fromYear),
	cts:element-range-query(xs:QName('Who_Counsels_who:FISCAL_YEAR'), '<=', $toYear)
	)))
	let $data := for $entry in $search-result1
	let $response-obj := json:object()           
	let $_ := (
		map:put($response-obj,'Source',$entry//Who_Counsels_who:WHOCOUNSELSWHO_SOURCE/text()),
		map:put($response-obj,'TypeOfTransaction',$entry//Who_Counsels_who:STD_REPRESENTATION_TYPE/text()),
		map:put($response-obj,'SearchID', 0),
		map:put($response-obj,'Role', ()),
		map:put($response-obj,'Firm', $entry//Who_Counsels_who:ORGANIZATION_NAME/string()),
		map:put($response-obj,'client',$entry//Who_Counsels_who:ORGANIZATION_NAME/string()),
		map:put($response-obj,'Date', xs:integer($entry//Who_Counsels_who:FISCAL_YEAR/text())),
		map:put($response-obj,'Month', ()),
		map:put($response-obj,'Jurisdiction', ()),
		map:put($response-obj,'CaseName', ()),
		map:put($response-obj,'CaseId', ()),
		map:put($response-obj,'PatentNumber', ()),
		map:put($response-obj,'DocketNumber', ()),
		map:put($response-obj,'FirmId', $entry//Who_Counsels_who:OUTSIDE_COUNSEL_ID/string()),
		map:put($response-obj,'Details', if ($entry//Who_Counsels_who:TRANSACTION_NAME/text() != '') then fn:concat('CaseName: ',$entry//Who_Counsels_who:TRANSACTION_NAME/text()) else ()),
		map:put($response-obj,'TypeofCase', ())
		)
	let $_ := json:array-push($response-arr,$response-obj)  
	return ()
	
	(:2nd Part of SP:)
		let $representer-result := cts:search(/,
		cts:and-query((
			cts:directory-query($config:RD-BDBS_REPRESENTER-PATH)
			,cts:element-value-query(xs:QName('bdbs-representer:ORGANIZATION_ID'),($firmID))
		)))
	
	let $party-ids := fn:distinct-values($representer-result//bdbs-representer:PARTY_ID/text())
	
	let $transaction-result := cts:search(/,
		cts:and-query((
		cts:directory-query($config:RD-BDBS_PARTY-PATH)
		,cts:element-value-query(xs:QName('bdbs-party:PARTY_ID'),$party-ids)
		)))
	
	let $transaction-ids := fn:distinct-values($transaction-result//bdbs-party:TRANSACTION_ID/text())
	
	let $search-result := cts:search(/,
	cts:and-query((
	cts:directory-query($config:RD-BDBS_TRANSACTION-PATH)
	,cts:element-value-query(xs:QName('bdbs-transaction:TRANSACTION_ID'),$transaction-ids)
	,$BDBS_TRANSACTION_TYPE_ID_Query
	,cts:element-range-query(xs:QName('bdbs-transaction:YEAR'), '>=', $fromYear)
	,cts:element-range-query(xs:QName('bdbs-transaction:YEAR'), '<=', $toYear)
	)))[1 to 10]
	
	let $data := for $entry in $search-result
	let $transaction := for $trn in $transaction-result/bdbs-party[bdbs-party:TRANSACTION_ID eq $entry//bdbs-transaction:TRANSACTION_ID/text()]
		let $role := $representer-result/bdbs-representer[bdbs-representer:PARTY_ID eq $trn//bdbs-party:PARTY_ID]/bdbs-representer:REPRESENTER_ROLE/text()
		let $response-obj := json:object()
		let $NAME := $entry//bdbs-transaction:NAME/text()
		let $_ := (
		map:put($response-obj,'SOURCE','ALM Legal Intelligence - Big Deals/Big Suits'),
		map:put($response-obj,'TypeOfTransaction',$entry//bdbs-transaction:STD_TRANSACTION_TYPE/text()),
		map:put($response-obj,'SearchID', 0),
		map:put($response-obj,'Role', $role[1]),
		map:put($response-obj,'Firm', $organizationName),
		map:put($response-obj,'client', $trn//bdbs-party:ORGANIZATION_NAME/text()),
		map:put($response-obj,'Date',$entry//bdbs-transaction:YEAR/text()),
		map:put($response-obj,'Month',$entry//bdbs-transaction:MONTH/text()),
		map:put($response-obj,'CaseName', $NAME),
		map:put($response-obj,'CaseId', ()),
		map:put($response-obj,'PatentNumber', ()),
		map:put($response-obj,'TypeofCase', ()),
		map:put($response-obj,'DocketNumber', ()),
		map:put($response-obj,'FirmId', ()),
		map:put($response-obj,'Details', fn:concat('CaseName: ',$NAME))
		
		)
		let $_ := json:array-push($response-arr,$response-obj)
		return ()
	return ()
	(:3rd part of SP:)
	
	let $search-result2:= cts:search(/,
		cts:and-query((
		cts:directory-query($config:RD-SURVEY-COMPANYPROFILE_LFR_NEW-PATH),
		cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:FIRM_ID'),$firmID),
		cts:not-query(cts:element-value-query(xs:QName('COMPANYPROFILE_LFR_NEW:FIRM'),'')),
		$LFR_NEW_REPRESENTATION_TYPE_ID_Query,
		cts:element-range-query(xs:QName('COMPANYPROFILE_LFR_NEW:YEAR'), '>=', $fromYear),
		cts:element-range-query(xs:QName('COMPANYPROFILE_LFR_NEW:YEAR'), '<=', $toYear)
		)))
	let $data := for $entry in $search-result2
	let $response-obj := json:object()           
	let $_ := (
		map:put($response-obj,'Source',$entry//COMPANYPROFILE_LFR_NEW:SOURCE/text()),
		map:put($response-obj,'TypeOfTransaction',$entry//COMPANYPROFILE_LFR_NEW:TYPEOFREPRESENTATION/text()),
		map:put($response-obj,'SearchID', 0),
		map:put($response-obj,'Role', $entry[1]//COMPANYPROFILE_LFR_NEW:ROLE/text()),
		map:put($response-obj,'Firm', $organizationName),
		map:put($response-obj,'client',$entry//COMPANYPROFILE_LFR_NEW:COMPANY_NAME/string()),
		map:put($response-obj,'Date', xs:integer($entry//COMPANYPROFILE_LFR_NEW:YEAR/text())),
		map:put($response-obj,'Month', ()),
		map:put($response-obj,'Jurisdiction', $entry//COMPANYPROFILE_LFR_NEW:JURISDICTION/text()),
		map:put($response-obj,'CaseName', $entry//COMPANYPROFILE_LFR_NEW:CASENAME/text()),
		map:put($response-obj,'CaseId', $entry//COMPANYPROFILE_LFR_NEW:CASEID/text()),
		map:put($response-obj,'PatentNumber', $entry//COMPANYPROFILE_LFR_NEW:PATENTNUMBER/text()),
		map:put($response-obj,'TypeofCase', $entry//COMPANYPROFILE_LFR_NEW:TYPEOFCASE/text()),
		map:put($response-obj,'DocketNumber', $entry//COMPANYPROFILE_LFR_NEW:DOCKETNUMBER/text()),
		map:put($response-obj,'FirmId', $entry//COMPANYPROFILE_LFR_NEW:FIRM_ID/text()),
		map:put($response-obj,'Details', $entry//COMPANYPROFILE_LFR_NEW:DETAILS/text())    
		)
	let $_ := json:array-push($response-arr,$response-obj)  
	return ()
	
	(:4th Part of SP :)
	
	let $search-result3:= cts:search(/,
		cts:and-query((
		cts:directory-query($config:RD-SURVEY-COMPANYPROFILE_LFR-PATH),
		$LFR_REPRESENTATION_TYPE_ID_Query,
		cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:FIRM_ID'),$firmID),
		cts:not-query(cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:FIRM'),'')),
		cts:element-range-query(xs:QName('COMPANYPROFILE_LFR:YEAR'), '>=', $fromYear),
		cts:element-range-query(xs:QName('COMPANYPROFILE_LFR:YEAR'), '<=', $toYear),
		cts:or-query((
			cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:SOURCE'),'ALM Legal Intelligence','exact'),
			cts:element-value-query(xs:QName('COMPANYPROFILE_LFR:SOURCE'),'USPTO','exact')
			))
		)))[1 to 10]
	let $data := for $entry in $search-result3
	let $response-obj := json:object()           
	let $_ := (
		map:put($response-obj,'Source',$entry//COMPANYPROFILE_LFR:SOURCE/text()),
		map:put($response-obj,'TypeOfTransaction',$entry//COMPANYPROFILE_LFR:TYPEOFREPRESENTATION/text()),
		map:put($response-obj,'SearchID', 0),
		map:put($response-obj,'Firm', $organizationName),
		map:put($response-obj,'client',$entry//COMPANYPROFILE_LFR:COMPANY_NAME/string()),
		map:put($response-obj,'Date', xs:integer($entry//COMPANYPROFILE_LFR:YEAR/text())),
		map:put($response-obj,'Month', ()),
		map:put($response-obj,'Jurisdiction', $entry//COMPANYPROFILE_LFR:JURISDICTION/text()),
		map:put($response-obj,'CaseName', $entry//COMPANYPROFILE_LFR:CASENAME/text()),
		map:put($response-obj,'CaseId', $entry//COMPANYPROFILE_LFR:CASEID/text()),
		map:put($response-obj,'PatentNumber', $entry//COMPANYPROFILE_LFR:PATENTNUMBER/text()),
		map:put($response-obj,'TypeofCase', $entry//COMPANYPROFILE_LFR:TYPEOFCASE/text()),
		map:put($response-obj,'DocketNumber', $entry//COMPANYPROFILE_LFR:DOCKETNUMBER/text()),
		map:put($response-obj,'FirmId', $entry//COMPANYPROFILE_LFR:FIRM_ID/text()),
		map:put($response-obj,'Details', $entry//COMPANYPROFILE_LFR:DETAILS/text())    
		)
	let $_ := json:array-push($response-arr,$response-obj)  
	return ()
	return $response-arr
};

declare function firm:GetLateralPartnerMovesPostMerger()
{
	let $request := xdmp:get-request-body()/request
	let $OrganisationID := $request/OrganisationID/text()

	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)

	let $data := if($checkMergerData != '') then firm:GetLateralPartnerMovesPM($request) else firm:GetLateralPartnerMoves($request)
	return $data
};
declare function firm:GetLateralPartnerMoves($request)
{
	let $OrganisationID := $request/OrganisationID
	let $OrganisationID := fn:tokenize($OrganisationID,',')
	let $RE_ID := ($OrganisationID ! firm:GetREIdByOrgId(.))
	let $sortBy := 'date_added'
	let $direction := 'descending'
	
	let $date-query := if (fn:exists($request/fromDate/text()) and fn:exists($request/toDate/text())) then
						cts:and-query((
						cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'),'0/0/0000')),
						cts:element-range-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), '>=',xs:date($request/fromDate/text())),
						cts:element-range-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), '<=',xs:date($request/toDate/text()))
						))
						else ()
						
	let $title-query := if (fn:exists($request/Title/text())) then
						cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:Title'),$request/Title/text(),'case-insensitive')
						else ()
						
	let $practiceAreas-query := if (fn:exists($request/practiceAreas/text())) then
						cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:practices'),$request/practiceAreas/text(),('wildcarded', 'case-insensitive'))
						else ()
	
	let $name-query := if (fn:exists($request/name/text())) then
						cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:Attorney_Name'),$request/name/text(),('wildcarded', 'case-insensitive'))
						else ()
						
	
	let $locations := if (fn:exists($request/cities/text()) and fn:exists($request/states/text()) and fn:exists($request/countries/text()) and fn:exists($request/geographicregions/text()) and fn:exists($request/usregions/text())) then
	(cts:element-values(xs:QName('ALI_RE_LateralMoves_Data:std_loc'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/city/'),
		cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:city'), $request/cities/text()),
		cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:state'), $request/states/text()),
		cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:country'), $request/countries/text()),
		cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:geographic_region'), $request/geographicregions/text()),
		cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:us_region'), $request/usregions/text())
		))))
	else cts:element-values(xs:QName('ALI_RE_LateralMoves_Data:std_loc'))
						
	let $search-results := cts:search(/,
	cts:and-query((
		cts:directory-query($config:RD-ALI_RE_LATERALMOVES_DATA-PATH,'infinity')
		,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:company_Id'),$RE_ID,('exact'))
		,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:action'),$request/ChangeType/text(),'case-insensitive')
		,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'),('0000-00-00','0/0/0000')))
		,$date-query
		,$title-query
		,$practiceAreas-query
		,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:std_loc'),$locations,'case-insensitive')
		,$name-query
	)))
	
	let $Totalcount :=  count($search-results)
	
	let $search-results := for $result in $search-results
		let $order-by :=if (fn:upper-case($sortBy) = fn:upper-case('date_added')) then 
		$result//ALI_RE_LateralMoves_Data:date_added/text()
		else ()  
		order by 
		if ($direction ne 'descending') then () else $order-by descending,
		if ($direction ne 'ascending') then () else $order-by ascending
	return $result
	
	let $response-arr := json:array()
	let $date := for $entry in $search-results
	let $response-obj := json:object()
	let $FROM := if(fn:not($entry//ALI_RE_LateralMoves_Data:CompanyName_From/text() != '') and $entry//ALI_RE_LateralMoves_Data:action/text() = 'removed') then
					$entry//ALI_RE_LateralMoves_Data:Company_Name/text()
					else $entry//ALI_RE_LateralMoves_Data:CompanyName_From/text()
	let $TO := if(($entry//ALI_RE_LateralMoves_Data:CompanyName_To/text() eq '') and $entry//ALI_RE_LateralMoves_Data:action/text() = 'added') then
					$entry//ALI_RE_LateralMoves_Data:Company_Name/text()
					else $entry//ALI_RE_LateralMoves_Data:CompanyName_To/text()
					
	let $From_Id := if(($entry//ALI_RE_LateralMoves_Data:CompanyID_FROM_ALI/text() eq '') and $entry//ALI_RE_LateralMoves_Data:action/text() = 'removed') then
					$entry//ALI_RE_LateralMoves_Data:CompanyID_ALI/text()
					else $entry//ALI_RE_LateralMoves_Data:CompanyID_FROM_ALI/text()
					
	let $To_Id := if(($entry//ALI_RE_LateralMoves_Data:CompanyId_To_ALI/text()) eq '' and $entry//ALI_RE_LateralMoves_Data:action/text() = 'added') then
					$entry//ALI_RE_LateralMoves_Data:CompanyID_ALI/text()
					else $entry//ALI_RE_LateralMoves_Data:CompanyId_To_ALI/text()  
					
	let $last_action := if($entry//ALI_RE_LateralMoves_Data:action/text() = 'removed') then
		'Departed'
		else 'Joined'
	
	let $attorney_link := if($entry//ALI_RE_LateralMoves_Data:action/text() = 'removed') then
		()
		else $entry//ALI_RE_LateralMoves_Data:Attorney_Link/text()
		
	let $Attorney_Email := if($entry//ALI_RE_LateralMoves_Data:action/text() = 'removed') then
		()
		else $entry//ALI_RE_LateralMoves_Data:email/text()
	let $_ := (
		map:put($response-obj,'totalcount', ($Totalcount)),
		map:put($response-obj,'firmId', xs:integer($entry//ALI_RE_LateralMoves_Data:company_Id/text())),
		map:put($response-obj,'attorney_id', xs:integer($entry//ALI_RE_LateralMoves_Data:person_id/text())),
		map:put($response-obj,'firmname', $entry//ALI_RE_LateralMoves_Data:Company_Name/text()),
		map:put($response-obj,'practices', fn:replace($entry//ALI_RE_LateralMoves_Data:practices/text(),';','; ')),
		map:put($response-obj,'education', $entry//ALI_RE_LateralMoves_Data:edu/text()),
		map:put($response-obj,'date_added', $entry//ALI_RE_LateralMoves_Data:date_added/text()),
		map:put($response-obj,'name', $entry//ALI_RE_LateralMoves_Data:Attorney_Name/text()),
		map:put($response-obj,'title', $entry//ALI_RE_LateralMoves_Data:Title/text()),
		map:put($response-obj,'location', $entry//ALI_RE_LateralMoves_Data:Location/text()),
		map:put($response-obj,'From', $FROM),
		map:put($response-obj,'To', $TO),
		map:put($response-obj,'From_Id', $From_Id),
		map:put($response-obj,'To_Id', $To_Id),
		map:put($response-obj,'last_action', $last_action),
		map:put($response-obj,'attorney_link', $attorney_link),
		map:put($response-obj,'biotext', $entry//ALI_RE_LateralMoves_Data:detail_text/text()),
		map:put($response-obj,'Attorney_Email', $Attorney_Email),
		map:put($response-obj,'ali_id', $entry//ALI_RE_LateralMoves_Data:CompanyID_ALI/text()),
		map:put($response-obj,'ALI_Name', $entry//ALI_RE_LateralMoves_Data:CompanyName_ALI/text())
		)
	let $_ := json:array-push($response-arr,$response-obj)  
	return ()
	return $response-arr
};

declare function firm:GetLateralPartnerMovesPM($request)
{

	let $OrganisationID := $request/OrganisationID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID	

	let $RE_ID := fn:distinct-values(firm:GetREIdByOrgId2($orgIDs))
	let $sortBy := 'date_added'
	let $direction := 'descending'
	
	let $date-query := if (fn:exists($request/fromDate/text()) and fn:exists($request/toDate/text())) then
						cts:and-query((
						cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'),'0/0/0000')),
						cts:element-range-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), '>=',xs:date($request/fromDate/text())),
						cts:element-range-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'), '<=',xs:date($request/toDate/text()))
						))
						else ()
						
	let $title-query := if (fn:exists($request/Title/text())) then
						cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:Title'),$request/Title/text(),'case-insensitive')
						else ()
						
	let $practiceAreas-query := if (fn:exists($request/practiceAreas/text())) then
						cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:practices'),$request/practiceAreas/text(),('wildcarded', 'case-insensitive'))
						else ()
	
	let $name-query := if (fn:exists($request/name/text())) then
						cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:Attorney_Name'),$request/name/text(),('wildcarded', 'case-insensitive'))
						else ()
						
	
	let $locations := if (fn:exists($request/cities/text()) and fn:exists($request/states/text()) and fn:exists($request/countries/text()) and fn:exists($request/geographicregions/text()) and fn:exists($request/usregions/text())) then
	(cts:element-values(xs:QName('ALI_RE_LateralMoves_Data:std_loc'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/city/'),
		cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:city'), $request/cities/text()),
		cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:state'), $request/states/text()),
		cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:country'), $request/countries/text()),
		cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:geographic_region'), $request/geographicregions/text()),
		cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:us_region'), $request/usregions/text())
		))))
	else cts:element-values(xs:QName('ALI_RE_LateralMoves_Data:std_loc'))
						
	let $search-results := cts:search(/,
	cts:and-query((
		cts:directory-query($config:RD-ALI_RE_LATERALMOVES_DATA-PATH,'infinity')
		,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:company_Id'),$RE_ID)
		,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:action'),$request/ChangeType/text(),'case-insensitive')
		,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:date_added'),('0000-00-00','0/0/0000')))
		,$date-query
		,$title-query
		,$practiceAreas-query
		,cts:element-value-query(xs:QName('ALI_RE_LateralMoves_Data:std_loc'),$locations,'case-insensitive')
		,$name-query
	)))
	
	let $Totalcount :=  count($search-results)
	
	let $search-results := for $result in $search-results
		let $order-by :=if (fn:upper-case($sortBy) = fn:upper-case('date_added')) then 
		$result//ALI_RE_LateralMoves_Data:date_added/text()
		else ()  
		order by 
		if ($direction ne 'descending') then () else $order-by descending,
		if ($direction ne 'ascending') then () else $order-by ascending
	return $result
	
	let $response-arr := json:array()
	let $date := for $entry in $search-results
	let $response-obj := json:object()
	let $FROM := if(fn:not($entry//ALI_RE_LateralMoves_Data:CompanyName_From/text() != '') and $entry//ALI_RE_LateralMoves_Data:action/text() = 'removed') then
					$entry//ALI_RE_LateralMoves_Data:Company_Name/text()
					else $entry//ALI_RE_LateralMoves_Data:CompanyName_From/text()
	let $TO := if(($entry//ALI_RE_LateralMoves_Data:CompanyName_To/text() eq '') and $entry//ALI_RE_LateralMoves_Data:action/text() = 'added') then
					$entry//ALI_RE_LateralMoves_Data:Company_Name/text()
					else $entry//ALI_RE_LateralMoves_Data:CompanyName_To/text()
					
	let $From_Id := if(($entry//ALI_RE_LateralMoves_Data:CompanyID_FROM_ALI/text() eq '') and $entry//ALI_RE_LateralMoves_Data:action/text() = 'removed') then
					$entry//ALI_RE_LateralMoves_Data:CompanyID_ALI/text()
					else $entry//ALI_RE_LateralMoves_Data:CompanyID_FROM_ALI/text()
					
	let $To_Id := if(($entry//ALI_RE_LateralMoves_Data:CompanyId_To_ALI/text()) eq '' and $entry//ALI_RE_LateralMoves_Data:action/text() = 'added') then
					$entry//ALI_RE_LateralMoves_Data:CompanyID_ALI/text()
					else $entry//ALI_RE_LateralMoves_Data:CompanyId_To_ALI/text()  
					
	let $last_action := if($entry//ALI_RE_LateralMoves_Data:action/text() = 'removed') then
		'Departed'
		else 'Joined'
	
	let $attorney_link := if($entry//ALI_RE_LateralMoves_Data:action/text() = 'removed') then
		()
		else $entry//ALI_RE_LateralMoves_Data:Attorney_Link/text()
		
	let $Attorney_Email := if($entry//ALI_RE_LateralMoves_Data:action/text() = 'removed') then
		()
		else $entry//ALI_RE_LateralMoves_Data:email/text()
	let $_ := (
		map:put($response-obj,'totalcount', ($Totalcount)),
		map:put($response-obj,'firmId', xs:integer($entry//ALI_RE_LateralMoves_Data:company_Id/text())),
		map:put($response-obj,'attorney_id', xs:integer($entry//ALI_RE_LateralMoves_Data:person_id/text())),
		map:put($response-obj,'firmname', $entry//ALI_RE_LateralMoves_Data:Company_Name/text()),
		map:put($response-obj,'practices', fn:replace($entry//ALI_RE_LateralMoves_Data:practices/text(),';','; ')),
		map:put($response-obj,'education', $entry//ALI_RE_LateralMoves_Data:edu/text()),
		map:put($response-obj,'date_added', $entry//ALI_RE_LateralMoves_Data:date_added/text()),
		map:put($response-obj,'name', $entry//ALI_RE_LateralMoves_Data:Attorney_Name/text()),
		map:put($response-obj,'title', $entry//ALI_RE_LateralMoves_Data:Title/text()),
		map:put($response-obj,'location', $entry//ALI_RE_LateralMoves_Data:Location/text()),
		map:put($response-obj,'From', $FROM),
		map:put($response-obj,'To', $TO),
		map:put($response-obj,'From_Id', $From_Id),
		map:put($response-obj,'To_Id', $To_Id),
		map:put($response-obj,'last_action', $last_action),
		map:put($response-obj,'attorney_link', $attorney_link),
		map:put($response-obj,'biotext', $entry//ALI_RE_LateralMoves_Data:detail_text/text()),
		map:put($response-obj,'Attorney_Email', $Attorney_Email),
		map:put($response-obj,'ali_id', $entry//ALI_RE_LateralMoves_Data:CompanyID_ALI/text()),
		map:put($response-obj,'ALI_Name', $entry//ALI_RE_LateralMoves_Data:CompanyName_ALI/text())
		)
	let $_ := json:array-push($response-arr,$response-obj)  
	return ()
	return $response-arr
};

declare function firm:GetLawFirmProfileNews(
	 $toDate
	,$fromDate
	,$toDate-Time
	,$fromDate-Time
	,$FIRMID
	,$Source
)
{
	let $OrganizationID := $FIRMID
	let $organizationName := if((/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text())[1] ne '')then 
	/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ALM_NAME/text()[1]
	else 
	/organization[organization:ORGANIZATION_ID = xs:string($OrganizationID)]/organization:ORGANIZATION_NAME/text()[1]
	
	let $response-arr := json:array()
	(:Part 1 of inline Query:)
	let $sortDate := cts:element-values(xs:QName('lfp_news:SORTDATE'),(),('descending'),
		cts:and-query((
			cts:directory-query($config:RD-LAWFIRMPROFILE-NEWS-PATH)
			,cts:element-value-query(xs:QName('lfp_news:FIRMID'), $FIRMID ,('exact'))
			,cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '>=', $fromDate-Time)
			,cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '<=', $toDate-Time)  
			,if($Source ne '' and $Source ne 'All') then cts:element-value-query(xs:QName('lfp_news:SOURCE'),$Source) else ()     
		)))
	
	let $date-formatted := for $date in $sortDate
		return fn:format-dateTime(($date), '[Y]-[M01]')
	
	(:let $IDs:= count(fn:distinct-values($search-results/LAWFIRMPROFILE_NEWS/lfp_news:ID)) :)
	let $data := for $date in fn:distinct-values($date-formatted)
		let $dateSearch := cts:search(/,
			cts:and-query((
				 cts:directory-query($config:RD-LAWFIRMPROFILE-NEWS-PATH)
				,cts:element-value-query(xs:QName('lfp_news:FIRMID'),$FIRMID,('exact'))
				,cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '>=', $fromDate-Time)
				,cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '<=',  $toDate-Time) 
				,cts:element-value-query(xs:QName('lfp_news:SORTDATE'),fn:concat($date,'-*'),('wildcarded'))
				,if($Source ne '' and $Source ne 'All') then cts:element-value-query(xs:QName('lfp_news:SOURCE'),$Source) else ()
			)))
	
		let $COUNT := fn:round(count($dateSearch//lfp_news:SORTDATE/text()))
		(:let $COUNT := count($dateSearch):)
		let $min-Date := (:min(xs:dateTime($dateSearch//lfp_news:SORTDATE)) :) min($dateSearch//lfp_news:SORTDATE ! xs:dateTime(.))
	
		let $response-obj := json:object()
		let $_ := (
			map:put($response-obj,'FIRMID',$FIRMID),
			map:put($response-obj,'FIRMNAME', $organizationName),
			map:put($response-obj,'TOTAL',$COUNT),
			map:put($response-obj,'SORTDATE',$min-Date),
			map:put($response-obj,'SOURCE','Total Activity')
			)
		let $_ := json:array-push($response-arr,$response-obj)  
		return ()
	
	(:Part 2 inline Query:)
	(:Used same search -result of part 1:)
	let $search-results := cts:search(/,
		cts:and-query((
			cts:directory-query($config:RD-LAWFIRMPROFILE-NEWS-PATH)
			,cts:element-value-query(xs:QName('lfp_news:FIRMID'),$FIRMID,('exact'))
			,cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '>=', $fromDate-Time)
			,cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '<=', $toDate-Time)
			,if($Source ne '' and $Source ne 'All') then cts:element-value-query(xs:QName('lfp_news:SOURCE'),$Source) else ()
		)))
	
	let $data := for $date in fn:distinct-values($date-formatted)  
		let $SOURCE :=fn:distinct-values($search-results/LAWFIRMPROFILE_NEWS[fn:contains(lfp_news:SORTDATE,$date)]//lfp_news:SOURCE)  
		
		(:Logic for source with 'Firm Site':)  
		let $res := if(fn:contains(fn:string-join($SOURCE,','),'Firm Site')) then  (
				let $count :=  count($search-results/LAWFIRMPROFILE_NEWS[fn:contains(lfp_news:SORTDATE,$date) and lfp_news:SOURCE = 'Firm Site'])  
				(:let $min-Date := min(xs:dateTime($search-results/LAWFIRMPROFILE_NEWS[fn:contains(lfp_news:SORTDATE,$date) and lfp_news:SOURCE = 'Firm Site']//lfp_news:SORTDATE)) :)
				let $min-Date := min(($search-results/LAWFIRMPROFILE_NEWS[fn:contains(lfp_news:SORTDATE,$date) and lfp_news:SOURCE = 'Firm Site']//lfp_news:SORTDATE) ! xs:dateTime(.) )
				let $response-obj := json:object()
				let $_ := (
					map:put($response-obj,'FIRMID',$FIRMID),
					map:put($response-obj,'FIRMNAME', $organizationName),
					map:put($response-obj,'TOTAL',$count),
					map:put($response-obj,'SORTDATE',$min-Date),
					map:put($response-obj,'SOURCE','Firm Site')
				)
				let $_ := json:array-push($response-arr,$response-obj)   
				return ()
				)
			else ()
	
		(:Logic for source not having 'Firm Site':)
		let $res := if(fn:contains(fn:string-join($SOURCE,','),'Firm Site')) then  (

			let $search-results1 := cts:search(/,
							cts:and-query((
								cts:directory-query($config:RD-LAWFIRMPROFILE-NEWS-PATH)
								,cts:element-value-query(xs:QName('lfp_news:FIRMID'),$FIRMID,('exact'))
								,cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '>=', $fromDate-Time)
								,cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '<=', $toDate-Time)
								,cts:not-query(cts:element-value-query(xs:QName('lfp_news:SOURCE'),'Firm Site'))
							)))
			
			let $count :=  count($search-results/LAWFIRMPROFILE_NEWS[fn:contains(lfp_news:SORTDATE,$date) and lfp_news:SOURCE ne 'Firm Site'])  
			(:let $min-Date := min(xs:dateTime($search-results/LAWFIRMPROFILE_NEWS[fn:contains(lfp_news:SORTDATE,$date) and lfp_news:SOURCE ne 'Firm Site']//lfp_news:SORTDATE)):)
			let $min-Date := min(($search-results/LAWFIRMPROFILE_NEWS[fn:contains(lfp_news:SORTDATE,$date) and lfp_news:SOURCE ne 'Firm Site']//lfp_news:SORTDATE) ! xs:dateTime(.)) 
			let $response-obj := json:object()
			let $_ := (
				map:put($response-obj,'FIRMID',$FIRMID),
				map:put($response-obj,'FIRMNAME', $organizationName),
				map:put($response-obj,'TOTAL',$count),
				map:put($response-obj,'SORTDATE',$min-Date),
				map:put($response-obj,'SOURCE','News Coverage')
			)
			let $_ := if (xs:string($min-Date) != '') then json:array-push($response-arr,$response-obj) else ()
			return () 
		)
			else()
		
		return $res 
	
	(:3rd patr of inline query:)
	
	let $maxYears := max(cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('PublishYear'),(),('descending'),
	cts:and-query((
		cts:directory-query($config:DD-SURVEY-AMLAW_100-PATH,'1')
	))))
	
	(: let $OrganizationIDs := cts:element-attribute-values(xs:QName('survey:YEAR'),xs:QName('OrganizationID'),(),('descending'),
	cts:and-query((
	cts:directory-query('/LegalCompass/denormalized-data/surveys/AMLAW_100/','1'),
	cts:element-attribute-value-query(xs:QName('survey:YEAR'),xs:QName('PublishYear'),xs:string($maxYears))
	))) :)
	
	let $OrganizationIDs := cts:element-values(xs:QName('amlaw100:ORGANIZATION_ID'),(),(),
	  cts:and-query((
		 cts:directory-query($config:RD-SURVEY-AMLAW_100-PATH)
		,cts:element-value-query(xs:QName('amlaw100:PUBLISHYEAR'),xs:string($maxYears))
	  )))
	
	
	let $sortDate := cts:element-values(xs:QName('lfp_news:SORTDATE'),(),('descending'),
	cts:and-query((
		cts:directory-query($config:RD-LAWFIRMPROFILE-NEWS-PATH)
		,cts:element-value-query(xs:QName('lfp_news:FIRMID'),($OrganizationIDs ! xs:string(.)),('exact'))
		,cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '>=',$fromDate-Time)
		,cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '<=', $toDate-Time) 
		,if($Source ne '' and $Source ne 'All') then cts:element-value-query(xs:QName('lfp_news:SOURCE'),$Source) else ()
	)))
	
	let $date-formatted := for $date in $sortDate
	return fn:format-dateTime(($date), '[Y]-[M01]')
	
	let $data := for $date in fn:distinct-values($date-formatted)
	let $dateSearch := cts:search(/,
		cts:and-query((
		cts:directory-query($config:RD-LAWFIRMPROFILE-NEWS-PATH)
		,cts:element-value-query(xs:QName('lfp_news:FIRMID'),($OrganizationIDs ! xs:string(.)),('exact'))
		,cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '>=', $fromDate-Time)
		,cts:element-range-query(xs:QName('lfp_news:SORTDATE'), '<=', $toDate-Time)
		,cts:element-value-query(xs:QName('lfp_news:SORTDATE'),fn:concat($date,'-*'),('wildcarded'))
		,if($Source ne '' and $Source ne 'All') then cts:element-value-query(xs:QName('lfp_news:SOURCE'),$Source) else ()
		)))
	(:let $COUNT := fn:round(count($dateSearch//lfp_news:SORTDATE/text()) div 100):)
	let $COUNT := fn:round(count($dateSearch//lfp_news:SORTDATE/text()) div 100)
	let $min-Date := (:min(xs:dateTime($dateSearch//lfp_news:SORTDATE)):) min($dateSearch//lfp_news:SORTDATE ! xs:dateTime(.))
	
	let $response-obj := json:object()
	let $_ := (
		map:put($response-obj,'FIRMID', 0),
		map:put($response-obj,'FIRMNAME', 'AM Law 100'),
		map:put($response-obj,'TOTAL',$COUNT),
		map:put($response-obj,'SORTDATE',$min-Date),
		map:put($response-obj,'SOURCE', 'AM Law 100 Average Total Activity')
		)
	let $_ := json:array-push($response-arr,$response-obj)  
	return ()  
	
	return ($response-arr)
};

declare function firm:GetLawfirmContactsAdded()
{
	let $request := xdmp:get-request-body()/request
	let $OrganisationID := $request/firmIds
	let $OrganisationID := fn:tokenize($OrganisationID,',')
	let $RE_ID := ($OrganisationID ! firm:GetREIdByOrgId(.))
	
	let $date-query := if (fn:exists($request/fromDate/text()) and fn:exists($request/toDate/text())) then
						()
						else 
						()
	let $title-query := if (fn:exists($request/titles/text())) then
						cts:element-value-query(xs:QName('people_changes:std_title'),$request/titles/text(),'case-insensitive')
						else
						()
	let $locations := if (fn:exists($request/cities/text()) and fn:exists($request/states/text()) and fn:exists($request/countries/text()) and fn:exists($request/geographicregions/text()) and fn:exists($request/usregions/text())) then
	(cts:element-values(xs:QName('city:std_loc'),(),(),
		cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/city/'),
		cts:element-value-query(xs:QName('city:city'), $request/cities/text()),
		cts:element-value-query(xs:QName('city:state'), $request/states/text()),
		cts:element-value-query(xs:QName('city:country'), $request/countries/text()),
		cts:element-value-query(xs:QName('city:geographic_region'), $request/geographicregions/text()),
		cts:element-value-query(xs:QName('city:us_region'), $request/usregions/text())
		))))
	else cts:element-values(xs:QName('city:std_loc'))
	let $response-arr := json:array()
	
	let $search-results := cts:search(/,
	cts:and-query((
		cts:directory-query($config:RD-PEOPLE_CHANGES-PATH)
		,cts:element-value-query(xs:QName('people_changes:company'),$RE_ID)
		,cts:element-value-query(xs:QName('people_changes:action'),$request/lastAction/text(),'case-insensitive')
		,cts:element-value-query(xs:QName('people_changes:std_loc'),$locations,'case-insensitive') 
		,$date-query
		,$title-query
	)))
	
	let $data := for $result in $search-results
		let $response-obj := json:object()
		let $company_from := if($result//people_changes:company_id_from/text() ne '0' and $result//people_changes:company_id_from/text() ne ' ')then
		doc(fn:concat('/LegalCompass/relational-data/company/',$result//people_changes:company_id_from,'.xml'))//company:company/text()
		else ()
		let $company_to := if($result//people_changes:company_id_to/text() ne '0' and $result//people_changes:company_id_to/text() ne ' ')then
		doc(fn:concat('/LegalCompass/relational-data/company/',$result//people_changes:company_id_to,'.xml'))//company:company/text()
		else ()
		let $_ := (
		map:put($response-obj,'firmId', $result//people_changes:company/text()),
		map:put($response-obj,'date_added', $result//people_changes:date_added/text()),
		map:put($response-obj,'name', $result//people_changes:name/text()),
		map:put($response-obj,'title', $result//people_changes:std_title/text()),
		map:put($response-obj,'location', $result//people_changes:std_loc/text()),
		map:put($response-obj,'from', $company_from),
		map:put($response-obj,'to', $company_to),
		map:put($response-obj,'last_action', $result//people_changes:action/text())
		)
		let $_ := json:array-push($response-arr,$response-obj)
	return ()
	return ($response-arr)
};

declare function firm:GetLawFirmGlobalMapByPractices()
{
	(:let $request :=  <request><FirmID>178</FirmID></request>:)
	let $request := xdmp:get-request-body()/request

	(: let $OrganisationID := $request/FirmID/text()
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
	let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID	 :)
	let $orgIDs := fn:tokenize($request/FirmID/text(),',')
	let $orgCount := fn:count($orgIDs)
	let $orgIDs := $orgIDs[$orgCount]

	let $RE_ID := firm:GetREIdByOrgId2($orgIDs)
	let $response-arr := json:array()
	let $organization := (:fn:doc(fn:concat('/LegalCompass/denormalized-data/organization/', $request/FirmID/text() ,'.xml')):) ''
	let $ORGANIZATION_NAME := ''(:if ($organization//organization:ALM_NAME) then $organization//organization:ALM_NAME/text() else $organization//organization:ORGANIZATION_NAME/text():)
	
	let $locations := cts:element-values(xs:QName('ALI_RE_Attorney_Data:location'), (), (),
	cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
		,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner','Associate','Other Counsel/Attorney'), ('case-insensitive'))
		,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:ALI_ID'), $orgIDs )
		)))
	for $location in $locations
	(: let $query := cts:and-query((
		cts:directory-query('/LegalCompass/relational-data/person/')      
		,cts:element-value-query(xs:QName('rd_person:company'), $RE_ID )
		,cts:element-value-query(xs:QName('rd_person:std_loc'),$location)
		)) :)

	let $query := cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')      
		,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:ALI_ID'),$orgIDs )
		,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'),$location)
		,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'),('Partner','Associate','Other Counsel/Attorney'))
		))

	let $Practice := for $practiceArea in cts:values(cts:element-reference(xs:QName('ALI_RE_Attorney_Data:practice_area')), (), (),$query)

						
						let $city := cts:search(/city_detail:city_detail,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/city_detail/')
									,cts:element-value-query(xs:QName('city_detail:STD_LOC'), $location, ('case-insensitive'))
									)))[1]

						let $headCount := cts:and-query((
									cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')      
									,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:ALI_ID'),$orgIDs )
									,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'),$location)
									,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:practice_area'),$practiceArea)
									,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'),('Partner','Associate','Other Counsel/Attorney'))
									))

						let $response-obj := json:object()
						let $_ := (
							map:put($response-obj,'firmid',$orgIDs[1]),
							map:put($response-obj,'firmLocation', $location),
							map:put($response-obj,'practicearea', $practiceArea),
							map:put($response-obj,'latitude', $city/city_detail:LATITUDE/text()),
							map:put($response-obj,'longitude', $city/city_detail:LONGITUDE/text()),
							map:put($response-obj,'firmName', $ORGANIZATION_NAME),
							map:put($response-obj,'totalcount', count(cts:search(fn:doc(),$query))),
							map:put($response-obj,'headCount', count(cts:search(fn:doc(),$headCount)))
							)
							(:let $_ := json:array-push($response-arr, $response-obj):)
						(:return  $location || ' : ' || $practiceArea  || ' : ' ||$city/city_detail:LATITUDE/text()||' : '||$city/city_detail:LONGITUDE/text()||' : '|| cts:frequency($practiceArea):)
						return $response-obj
	return $Practice 

};

declare function firm:GetOfficeTrendsMap()
{
	let $request := xdmp:get-request-body()/request
	
	let $firmIDs :=fn:tokenize($request/firmIds/text(),',')
	let $practiceAreas := $request/practiceAreas/text()
	let $response-arr := json:array()
	
	(:let $practiceAreas := fn:concat('*',$practiceAreas,'*'):)
	let $practiceAreas := $practiceAreas

for $firmID in $firmIDs
let $RE_ID := firm:GetREIdByOrgId( $firmID )

(:Get Locations :)

let $person-locations := cts:element-values(xs:QName('ALI_RE_Attorney_Data:location'), (), (),
 cts:and-query((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    (:,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:practice_area'),$practiceAreas,('wildcarded')):)
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner','Associate','Other Counsel/Attorney'))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), $RE_ID )
    ,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), ('Location not identified','Location Not Available')))
    )))
(:    
let $locations :=  cts:element-values(xs:QName('city_detail:STD_LOC'),(),(),
        cts:and-query((
        cts:directory-query('/LegalCompass/relational-data/city_detail/')
        ,cts:element-value-query(xs:QName('city_detail:STD_LOC'),$person-locations,('case-insensitive'))
       )))

for $location in $locations
:)
for $location in $person-locations
    (:let $query := cts:and-query((
       cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), $RE_ID )
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'),$location,'case-insensitive')
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:practices'),$practiceAreas)
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner','Associate','Other Counsel/Attorney'), ('case-insensitive'))
      ,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:status'), ''))
      )):)
    let $query := cts:and-query((
      cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
      (:,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:practice_area'), $practiceAreas, ('wildcarded','case-insensitive')):)
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'),$location,'case-insensitive')
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($RE_ID))
      )) 
    let $headcount := xdmp:estimate(cts:search(/,
      cts:and-query((
      $query
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'),('case-insensitive'))
     )))) 
      
    let $partnercount := xdmp:estimate(cts:search(/,
      cts:and-query((
      $query
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($RE_ID))
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner'))
      ))))
    let $associatecount := xdmp:estimate(cts:search(/,
      cts:and-query((
      $query
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($RE_ID))
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Associate'))
      ))))
    let $othercouselcount := xdmp:estimate(cts:search(/,
      cts:and-query((
      $query
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($RE_ID))
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other Counsel/Attorney'),'case-insensitive')
      )))) 
    let $admincount := xdmp:estimate(cts:search(/,
      cts:and-query((
      $query
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($RE_ID))
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Administrative / Support Staff'),'case-insensitive')
      )))) 
    let $othercount :=  xdmp:estimate(cts:search(/,
      cts:and-query((
      $query
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($RE_ID))
      ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other'),'case-insensitive')
      ))))
      
      let $city-data := cts:search(/,
        cts:and-query((
        cts:directory-query('/LegalCompass/relational-data/city_detail/'),
        (:cts:element-value-query(xs:QName('city_detail:STD_LOC'),$location,('case-insensitive','whitespace-sensitive')):)
		cts:element-value-query(xs:QName('city_detail:STD_LOC'),$location,('case-insensitive','whitespace-sensitive','punctuation-sensitive'))
       )))
	   
    let $A := (cts:search(/,
        cts:and-query((
        $query
        ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney','Administrative / Support Staff','Other'),('case-insensitive'))
       ))))[1]
	   
 let $response-obj := json:object()
      let $_ := (
        map:put($response-obj,'firmid', (xs:string($firmID))),
        map:put($response-obj,'firmlocation', $location),
        map:put($response-obj,'firmname', $A//ALI_RE_Attorney_Data:firm_name/text()),
        map:put($response-obj,'headcount', $headcount),
        map:put($response-obj,'partnercount', $partnercount),
        map:put($response-obj,'associatecount',  $associatecount),
        map:put($response-obj,'othercouselcount', $othercouselcount),
        map:put($response-obj,'admincount', $admincount),
        map:put($response-obj,'othercount', $othercount),
        map:put($response-obj,'practicearea', firm:GetAllPracticeAreas($RE_ID,$location)),
        map:put($response-obj,'LATITUDE', $city-data//city_detail:LATITUDE/text()),
        map:put($response-obj,'LONGITUDE', $city-data//city_detail:LONGITUDE/text())
      )  
return $response-obj

};

declare function firm:GetOfficeTrendsDataAnalysis()
{
let $request := xdmp:get-request-body()/request

let $PracticeAreas := fn:tokenize($request/PracticeAreas/text(),'[|]')
let $Cities := tokenize($request/cities/text(), '~')
let $FirmIds := tokenize($request/firmIds/text(), ',')

let $PracticeArea-Query := if($PracticeAreas != '')then
  cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:practice_area'), $PracticeAreas, ('case-insensitive'))
  else ()

  let $ID-Query := if($FirmIds != '')then
  cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:ALI_ID'), $FirmIds, ('case-insensitive'))
  else ()
  
(:let $query := 
  cts:and-query(((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:practice_area'), $PracticeAreas, ('case-insensitive'))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities)
))) :)
let $query := 
  cts:and-query(((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
	,$ID-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities,('case-insensitive','whitespace-sensitive'))
)))

let $city-data := cts:search(/city_detail:city_detail,
            cts:and-query((
               cts:directory-query('/LegalCompass/relational-data/city_detail/')
              ,cts:element-value-query(xs:QName('city_detail:STD_LOC'), $Cities, ('case-insensitive','whitespace-sensitive'))              
            )))[1] 
          
(:let $search := for $company in cts:values(cts:element-reference(xs:QName('ALI_RE_Attorney_Data:firm_id')), (), (),$query):)
let $search := for $company in fn:distinct-values(cts:search(/ALI_RE_Attorney_Data,
	$query)//ALI_RE_Attorney_Data:firm_id/text())

  
  let $headcount := xdmp:estimate(cts:search(/,
    cts:and-query((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities,('case-insensitive','whitespace-sensitive'))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'),('case-insensitive'))
    ))))
  let $partnercount := xdmp:estimate(cts:search(/,
    cts:and-query((     
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner'),('case-insensitive'))
    ))))
  let $associatecount := xdmp:estimate(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Associate'))
    ))))
  let $othercouselcount := xdmp:estimate(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other Counsel/Attorney'),'case-insensitive')
    )))) 
  let $admincount := xdmp:estimate(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Administrative / Support Staff'),'case-insensitive')
    )))) 
  let $othercount :=  xdmp:estimate(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other'),'case-insensitive')
    ))))
    
  let $A := (cts:search(/,
    cts:and-query((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities, ('case-insensitive','whitespace-sensitive'))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney','Other','Administrative / Support Staff'),('case-insensitive'))
    ))))[1]
	
  let $FIRMID := if($A//ALI_RE_Attorney_Data:ALI_ID/text() ne "")
    then $A//ALI_RE_Attorney_Data:ALI_ID/text()
    else $A//ALI_RE_Attorney_Data:firm_id/text()
	
  let $FirmName := if($A//ALI_RE_Attorney_Data:ALM_NAME/text() ne "")then
    $A//ALI_RE_Attorney_Data:ALM_NAME/text()
    else
    $A//ALI_RE_Attorney_Data:firm_name/text()
	
  let $response-obj := json:object()
  let $_ := (
    map:put($response-obj,'firmid', $FIRMID),
    map:put($response-obj,'firmlocation', $Cities),
    (:map:put($response-obj,'firmname', $A//ALI_RE_Attorney_Data:firm_name/text()),:)
	map:put($response-obj,'firmname', $FirmName),
    map:put($response-obj,'headcount', $headcount),
    map:put($response-obj,'partnercount', $partnercount),
    map:put($response-obj,'associatecount',  $associatecount),
    map:put($response-obj,'othercouselcount', $othercouselcount),
    map:put($response-obj,'admincount', $admincount),
    map:put($response-obj,'othercount', $othercount),
    map:put($response-obj,'practicearea', firm:GetAllPracticeAreas((xs:string($company)),$Cities,$PracticeAreas)),
    map:put($response-obj,'LATITUDE', $city-data//city_detail:LATITUDE/text()),
    map:put($response-obj,'LONGITUDE', $city-data//city_detail:LONGITUDE/text())
  )
  (:return $headcount || ' - ' || (/organization[organization:ORGANIZATION_ID = firm:GetALIIdByREId(xs:string($company))]/organization:ORGANIZATION_NAME/text())[1]:)
  return $response-obj 
return ($search) 

};

declare function firm:GetOfficeTrendsDataAnalysis_Merged()
{
let $request := xdmp:get-request-body()/request	

let $PracticeAreas := fn:tokenize($request/PracticeAreas/text(),'[|]')
let $Cities := tokenize($request/cities/text(), '~')
let $FirmIds := tokenize($request/firmIds/text(), ',')
let $Keywords := $request/Keyword/text()
let $FirmSizeFrom := $request/firmSizefrom/text()
let $FirmSizeTo := $request/firmSizeTo/text()
let $isPrimaryPracticeArea := if($request/isPrimaryPracticeArea/text() ne '') then $request/isPrimaryPracticeArea/text() else 'false'

let $maxYears := fn:max(cts:element-attribute-values(xs:QName("survey:YEAR"),xs:QName("PublishYear"),(),("descending"),
  cts:and-query((
    cts:directory-query("/LegalCompass/denormalized-data/surveys/AMLAW_200/","1")
  ))))

let $femaleScorecardMaxYear := max(cts:search(/,
    cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/")
    )))//FEMALE_SCORECARD:PUBLISHYEAR/text())

 (: let $PracticeAreas := fn:tokenize(fn:string-join($PracticeAreas ! fn:string(fn:replace(.,"amp;amp;",'')),','),',') :)

let $PracticeArea-Query := if($PracticeAreas != '')then
  if(xs:string($isPrimaryPracticeArea) ne 'true') then cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practice_area'), $PracticeAreas, ('case-insensitive'))
  else cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:primary_practice'), $PracticeAreas, ('case-insensitive'))
  else ()

let $Keyword-Query := if($Keywords !='') then
			
							if(fn:contains(fn:lower-case($Keywords),'and') and fn:not(fn:contains(fn:lower-case($Keywords),'"'))) then 
								 firm:GetAndOperatorQuery($Keywords)
													
							
							else if(fn:contains(fn:lower-case($Keywords),'or') and fn:not(fn:contains(fn:lower-case($Keywords),'"'))) then 
								 firm:GetOrOperatorQuery($Keywords)
													
							else if(fn:contains(fn:lower-case($Keywords),'"') and fn:contains(fn:lower-case($Keywords),'" or "')) then 
								 firm:GetExactOrOperatorQuery($Keywords)
										
							else if(fn:contains(fn:lower-case($Keywords),'"') and fn:contains(fn:lower-case($Keywords),'" and "')) then 
								 firm:GetExactAndOperatorQuery($Keywords)			
										
							else if(fn:contains(fn:lower-case($Keywords),' or ') and fn:contains(fn:lower-case($Keywords),' and ')) then 
								 firm:GetAndOrOperatorQuery($Keywords)
							
							(:else if(fn:contains(fn:lower-case($Keywords),'"') and fn:not(fn:contains(fn:lower-case($Keywords),'" and "')) and fn:not(fn:contains(fn:lower-case($Keywords),'" or "'))) then 
								 news:GetExactAndOperatorQuery($Keywords)	:)
							
							else if(fn:contains($Keywords,',') and fn:not(fn:contains(fn:lower-case($Keywords),'"'))) then
								   cts:or-query((
									cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive'))
										))
								else if(fn:contains($Keywords,' ') and fn:not(fn:contains(fn:lower-case($Keywords),'"'))) then 
								   cts:or-query((
									cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive'))
										))
								else cts:or-query((
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'),fn:replace($Keywords,'"',''),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'),fn:replace($Keywords,'"',''),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'),fn:replace($Keywords,'"',''),('wildcarded','case-insensitive'))
										))
							
					else ()
  
(:let $Keyword-Query := if($Keyword != '') then
	cts:or-query((
  		cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'), fn:concat("*",$Keyword,"*"),("case-insensitive","punctuation-insensitive","whitespace-insensitive","wildcarded")),
		cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'), fn:concat("*",$Keyword,"*"),("case-insensitive","punctuation-insensitive","whitespace-insensitive","wildcarded")),
		cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'), fn:concat("*",$Keyword,"*"),("case-insensitive","punctuation-insensitive","whitespace-insensitive","wildcarded"))
	))
  else ()  :)
  
let $ID-Query := if($FirmIds != '')then
  cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:ALI_ID'), $FirmIds, ('case-insensitive'))
  else ()
  
let $query := 
  cts:and-query(((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
    ,$Keyword-Query
    ,$ID-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities,('case-insensitive','whitespace-sensitive'))
)))

let $city-data := cts:search(/city_detail:city_detail,
            cts:and-query((
               cts:directory-query('/LegalCompass/relational-data/city_detail/')
              ,cts:element-value-query(xs:QName('city_detail:STD_LOC'), $Cities, ('case-insensitive','whitespace-sensitive'))              
            )))[1] 

let $search := for $company in fn:distinct-values(cts:search(/ALI_RE_Attorney_Data,$query)//ALI_RE_Attorney_Data:firm_id/text())
  
  let $headcount := if ($Keywords ne "" )
  then count(cts:search(/,
    cts:and-query((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
    ,$Keyword-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities,('case-insensitive','whitespace-sensitive'))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'),('case-insensitive'))
    ))))
  else xdmp:estimate(cts:search(/,
    cts:and-query((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities,('case-insensitive','whitespace-sensitive'))
	(: ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities) :)
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'),('case-insensitive'))
    ))))
  let $partnercount := if ($Keywords ne "" )
  then count(cts:search(/,
    cts:and-query((     
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner'),('case-insensitive'))
    ))))
   else xdmp:estimate(cts:search(/,
    cts:and-query((     
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner'),('case-insensitive'))
    ))))
  let $associatecount := if ($Keywords ne "" ) 
  then count(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Associate'))
    ))))
  else xdmp:estimate(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Associate'))
    ))))
  let $othercouselcount := if ($Keywords ne "" )
  then count(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other Counsel/Attorney'),'case-insensitive')
    ))))
  else xdmp:estimate(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other Counsel/Attorney'),'case-insensitive')
    )))) 
  let $admincount := if ($Keywords ne "" )
  then count(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Administrative / Support Staff'),'case-insensitive')
    ))))
   else xdmp:estimate(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Administrative / Support Staff'),'case-insensitive')
    )))) 
  let $othercount :=  if ($Keywords ne "" )
  then count(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other'),'case-insensitive')
    ))))
   else xdmp:estimate(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other'),'case-insensitive')
    )))) 
  
  let $A := (cts:search(/,
    cts:and-query((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities, ('case-insensitive','whitespace-sensitive'))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney','Other','Administrative / Support Staff'),('case-insensitive'))
    ))))[1]
	
  let $FIRMID := if($A//ALI_RE_Attorney_Data:ALI_ID/text() ne "")
    then $A//ALI_RE_Attorney_Data:ALI_ID/text()
    else $A//ALI_RE_Attorney_Data:firm_id/text()
	
  let $b := cts:search(/Diversity_Scorecard:DiversityScorecard,
    cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/")
    ,cts:element-value-query(xs:QName("Diversity_Scorecard:PUBLISHYEAR"),xs:string($maxYears))
    ,cts:element-value-query(xs:QName("Diversity_Scorecard:ORGANIZATION_ID"),xs:string($FIRMID))
    )))
  (: let $minorityPart1 := fn:round-half-to-even((($b//Diversity_Scorecard:ASIAN_AMERICAN_PARTNERS/text() + $b//Diversity_Scorecard:AFRICAN_AMERICAN_PARTNERS/text() + $b//Diversity_Scorecard:HISPANIC_PARTNERS/text() + $b//Diversity_Scorecard:OTHER_PARTNERS/text()) div $b//Diversity_Scorecard:MINORITY_PERC_PARTNERS/text()) - ($b//Diversity_Scorecard:ASIAN_AMERICAN_PARTNERS/text() + $b//Diversity_Scorecard:AFRICAN_AMERICAN_PARTNERS/text() + $b//Diversity_Scorecard:HISPANIC_PARTNERS/text() + $b//Diversity_Scorecard:OTHER_PARTNERS/text()),0) :)
  (:let $minorityAttorneys := fn:round($b//Diversity_Scorecard:TOTAL_PARTNERS/text() * $b//Diversity_Scorecard:MINORITY_PERC_PARTNERS/text()):)
  let $minorityPart1 := fn:round-half-to-even($b//Diversity_Scorecard:ASIAN_AMERICAN_PARTNERS/text() + $b//Diversity_Scorecard:AFRICAN_AMERICAN_PARTNERS/text() + $b//Diversity_Scorecard:HISPANIC_PARTNERS/text() + $b//Diversity_Scorecard:OTHER_PARTNERS/text(),0)
  let $c := cts:search(/FEMALE_SCORECARD:FemaleScoreCard,
    cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/")
    ,cts:element-value-query(xs:QName("FEMALE_SCORECARD:PUBLISHYEAR"),xs:string($maxYears))
    ,cts:element-value-query(xs:QName("FEMALE_SCORECARD:ORGANIZATION_ID"),xs:string($FIRMID))
    )))

let $femaleCount :=xdmp:estimate(cts:search(/, cts:and-query((
						cts:directory-query('/LegalCompass/relational-data/person/')      
						,cts:element-value-query(xs:QName('rd_person:company'), $company)
						,cts:element-value-query(xs:QName('rd_person:std_loc'),$Cities,('exact'))
						,cts:element-value-query(xs:QName('rd_person:std_title'),'Partner',('exact'))
						,cts:element-value-query(xs:QName('rd_person:gender'),'F')
						,cts:not-query(cts:element-value-query(xs:QName('rd_person:temp_status'),'Pending'))
						,cts:not-query(cts:element-value-query(xs:QName('rd_person:status'),''))
					))))
  
  let $d := cts:search(/AMLaw200,
    cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/")
    ,cts:element-value-query(xs:QName("AMLAW_200:PUBLISHYEAR"),xs:string($maxYears))
    ,cts:element-value-query(xs:QName("AMLAW_200:ORGANIZATION_ID"),xs:string($FIRMID))
    )))
   let $e := cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/organization-address/","1"),
      cts:element-value-query(xs:QName('org-address:HEADQUARTERS'),'H','case-insensitive'),
      cts:element-value-query(xs:QName('org-address:ORGANIZATION_ID'),xs:string($FIRMID))
    )))[1]
    
  (: let $headquater := if($e//org-address:COUNTRY/text() eq 'USA') then
    fn:concat($e//org-address:CITY/text(),", ",$e//org-address:STATE/text())    
    else
    fn:concat($e//org-address:CITY/text(),", ",$e//org-address:COUNTRY/text()) :)
    
  let $FirmName := if($A//ALI_RE_Attorney_Data:ALM_NAME/text() ne "")then
    $A//ALI_RE_Attorney_Data:ALM_NAME/text()
    else
    $A//ALI_RE_Attorney_Data:firm_name/text()

	let $headQuarter := if($A//ALI_RE_Attorney_Data:HQ/text() eq 'Y') then 'Yes' else 'No'

   let $PracticeAreaList := if($A//ALI_RE_Attorney_Data:ALI_ID/text() ne "") 
	then firm:GetAllPracticeAreas((xs:string($A//ALI_RE_Attorney_Data:ALI_ID/text())),$Cities,$PracticeAreas)
    else ()
	
  return if($FirmSizeFrom ge 0 and $FirmSizeTo ge 0) then( 
  if((xs:integer($headcount) ge $FirmSizeFrom) and (xs:integer($headcount) le $FirmSizeTo)) then  
  let $response-obj := json:object()  
  let $_ := (
    map:put($response-obj,'firmid', $FIRMID),
    map:put($response-obj,'firmlocation', $Cities),
    map:put($response-obj,'firmname', $FirmName),
    map:put($response-obj,'headcount', $headcount),
    map:put($response-obj,'partnercount', $partnercount),
    map:put($response-obj,'associatecount',  $associatecount),
    map:put($response-obj,'othercouselcount', $othercouselcount),
    map:put($response-obj,'admincount', $admincount),
    map:put($response-obj,'othercount', $othercount),
    (:map:put($response-obj,'practicearea', firm:GetAllPracticeAreas((xs:string($company)),$Cities,$PracticeAreas)),:)
	map:put($response-obj,'practicearea', $PracticeAreaList),
    map:put($response-obj,'LATITUDE', $city-data//city_detail:LATITUDE/text()),
    map:put($response-obj,'LONGITUDE', $city-data//city_detail:LONGITUDE/text()),
    map:put($response-obj, 'minorityAttorneys', $minorityPart1),
    (: map:put($response-obj, 'femaleAttorneys',$c//FEMALE_SCORECARD:FEMALE_PARTNERS/text()), :)
	map:put($response-obj, 'femaleAttorneys',$femaleCount),
    map:put($response-obj, 'leverage', $d//AMLAW_200:LEVERAGE/text()),
    map:put($response-obj, 'headquater', $headQuarter),
	map:put($response-obj, 'p1', $company)

	
  )
  return $response-obj  
  else ()
  )
  else (
  if(xs:integer($headcount) > 0) then
  let $response-obj := json:object()  
  let $_ := (
    map:put($response-obj,'firmid', $FIRMID),
    map:put($response-obj,'firmlocation', $Cities),
    map:put($response-obj,'firmname', $FirmName),
    map:put($response-obj,'headcount', $headcount),
    map:put($response-obj,'partnercount', $partnercount),
    map:put($response-obj,'associatecount',  $associatecount),
    map:put($response-obj,'othercouselcount', $othercouselcount),
    map:put($response-obj,'admincount', $admincount),
    map:put($response-obj,'othercount', $othercount),
    map:put($response-obj,'practicearea', $PracticeAreaList),
    map:put($response-obj,'LATITUDE', $city-data//city_detail:LATITUDE/text()),
    map:put($response-obj,'LONGITUDE', $city-data//city_detail:LONGITUDE/text()),
    map:put($response-obj, 'minorityAttorneys', $minorityPart1),
    map:put($response-obj, 'femaleAttorneys',$femaleCount),
    map:put($response-obj, 'leverage', $d//AMLAW_200:LEVERAGE/text()),
    map:put($response-obj, 'headquater', $headQuarter),
	map:put($response-obj, 'headquater1', $A//ALI_RE_Attorney_Data:HQ/text()),
	map:put($response-obj, 'p2', $company)
  )
  return $response-obj  
  else()
  )
  
return $search

};

declare function firm:GetOfficeTrendsDataAnalysis_Merged_Old()
{
let $request := xdmp:get-request-body()/request	

let $PracticeAreas := fn:tokenize($request/PracticeAreas/text(),'[|]')
let $Cities := tokenize($request/cities/text(), '~')
let $FirmIds := tokenize($request/firmIds/text(), ',')
let $Keywords := $request/Keyword/text()
let $FirmSizeFrom := $request/firmSizefrom/text()
let $FirmSizeTo := $request/firmSizeTo/text()
let $isPrimaryPracticeArea := if($request/isPrimaryPracticeArea/text() ne '') then $request/isPrimaryPracticeArea/text() else 'false'

let $maxYears := fn:max(cts:element-attribute-values(xs:QName("survey:YEAR"),xs:QName("PublishYear"),(),("descending"),
  cts:and-query((
    cts:directory-query("/LegalCompass/denormalized-data/surveys/AMLAW_200/","1")
  ))))

let $femaleScorecardMaxYear := max(cts:search(/,
    cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/")
    )))//FEMALE_SCORECARD:PUBLISHYEAR/text())

 (: let $PracticeAreas := fn:tokenize(fn:string-join($PracticeAreas ! fn:string(fn:replace(.,"amp;amp;",'')),','),',') :)

let $PracticeArea-Query := if($PracticeAreas != '')then
  if(xs:string($isPrimaryPracticeArea) ne 'true') then cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practice_area'), $PracticeAreas, ('case-insensitive'))
  else cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:primary_practice'), $PracticeAreas, ('case-insensitive'))
  else ()

let $Keyword-Query := if($Keywords !='') then
			
							if(fn:contains(fn:lower-case($Keywords),'and') and fn:not(fn:contains(fn:lower-case($Keywords),'"'))) then 
								 firm:GetAndOperatorQuery($Keywords)
													
							
							else if(fn:contains(fn:lower-case($Keywords),'or') and fn:not(fn:contains(fn:lower-case($Keywords),'"'))) then 
								 firm:GetOrOperatorQuery($Keywords)
													
							else if(fn:contains(fn:lower-case($Keywords),'"') and fn:contains(fn:lower-case($Keywords),'" or "')) then 
								 firm:GetExactOrOperatorQuery($Keywords)
										
							else if(fn:contains(fn:lower-case($Keywords),'"') and fn:contains(fn:lower-case($Keywords),'" and "')) then 
								 firm:GetExactAndOperatorQuery($Keywords)			
										
							else if(fn:contains(fn:lower-case($Keywords),' or ') and fn:contains(fn:lower-case($Keywords),' and ')) then 
								 firm:GetAndOrOperatorQuery($Keywords)
							
							(:else if(fn:contains(fn:lower-case($Keywords),'"') and fn:not(fn:contains(fn:lower-case($Keywords),'" and "')) and fn:not(fn:contains(fn:lower-case($Keywords),'" or "'))) then 
								 news:GetExactAndOperatorQuery($Keywords)	:)
							
							else if(fn:contains($Keywords,',') and fn:not(fn:contains(fn:lower-case($Keywords),'"'))) then
								   cts:or-query((
									cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive'))
										))
								else if(fn:contains($Keywords,' ') and fn:not(fn:contains(fn:lower-case($Keywords),'"'))) then 
								   cts:or-query((
									cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive'))
										))
								else cts:or-query((
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'),fn:replace($Keywords,'"',''),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'),fn:replace($Keywords,'"',''),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'),fn:replace($Keywords,'"',''),('wildcarded','case-insensitive'))
										))
							
					else ()
  
(:let $Keyword-Query := if($Keyword != '') then
	cts:or-query((
  		cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'), fn:concat("*",$Keyword,"*"),("case-insensitive","punctuation-insensitive","whitespace-insensitive","wildcarded")),
		cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'), fn:concat("*",$Keyword,"*"),("case-insensitive","punctuation-insensitive","whitespace-insensitive","wildcarded")),
		cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'), fn:concat("*",$Keyword,"*"),("case-insensitive","punctuation-insensitive","whitespace-insensitive","wildcarded"))
	))
  else ()  :)
  
let $ID-Query := if($FirmIds != '')then
  cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:ALI_ID'), $FirmIds, ('case-insensitive'))
  else ()
  
let $query := 
  cts:and-query(((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
    ,$Keyword-Query
    ,$ID-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities,('case-insensitive','whitespace-sensitive'))
)))

let $city-data := cts:search(/city_detail:city_detail,
            cts:and-query((
               cts:directory-query('/LegalCompass/relational-data/city_detail/')
              ,cts:element-value-query(xs:QName('city_detail:STD_LOC'), $Cities, ('case-insensitive','whitespace-sensitive'))              
            )))[1] 

let $search := for $company in fn:distinct-values(cts:search(/ALI_RE_Attorney_Data,$query)//ALI_RE_Attorney_Data:firm_id/text())
  
  let $headcount := if ($Keywords ne "" )
  then count(cts:search(/,
    cts:and-query((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
    ,$Keyword-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities,('case-insensitive','whitespace-sensitive'))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'),('case-insensitive'))
    ))))
  else xdmp:estimate(cts:search(/,
    cts:and-query((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities,('case-insensitive','whitespace-sensitive'))
	(: ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities) :)
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'),('case-insensitive'))
    ))))
  let $partnercount := if ($Keywords ne "" )
  then count(cts:search(/,
    cts:and-query((     
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner'),('case-insensitive'))
    ))))
   else xdmp:estimate(cts:search(/,
    cts:and-query((     
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner'),('case-insensitive'))
    ))))
  let $associatecount := if ($Keywords ne "" ) 
  then count(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Associate'))
    ))))
  else xdmp:estimate(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Associate'))
    ))))
  let $othercouselcount := if ($Keywords ne "" )
  then count(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other Counsel/Attorney'),'case-insensitive')
    ))))
  else xdmp:estimate(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other Counsel/Attorney'),'case-insensitive')
    )))) 
  let $admincount := if ($Keywords ne "" )
  then count(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Administrative / Support Staff'),'case-insensitive')
    ))))
   else xdmp:estimate(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Administrative / Support Staff'),'case-insensitive')
    )))) 
  let $othercount :=  if ($Keywords ne "" )
  then count(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other'),'case-insensitive')
    ))))
   else xdmp:estimate(cts:search(/,
    cts:and-query((
    $query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Other'),'case-insensitive')
    )))) 
  
  let $A := (cts:search(/,
    cts:and-query((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities, ('case-insensitive','whitespace-sensitive'))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney','Other','Administrative / Support Staff'),('case-insensitive'))
    ))))[1]
	
  let $FIRMID := if($A//ALI_RE_Attorney_Data:ALI_ID/text() ne "")
    then $A//ALI_RE_Attorney_Data:ALI_ID/text()
    else $A//ALI_RE_Attorney_Data:firm_id/text()
	
  let $b := cts:search(/Diversity_Scorecard:DiversityScorecard,
    cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/")
    ,cts:element-value-query(xs:QName("Diversity_Scorecard:PUBLISHYEAR"),xs:string($maxYears))
    ,cts:element-value-query(xs:QName("Diversity_Scorecard:ORGANIZATION_ID"),xs:string($FIRMID))
    )))
  (: let $minorityPart1 := fn:round-half-to-even((($b//Diversity_Scorecard:ASIAN_AMERICAN_PARTNERS/text() + $b//Diversity_Scorecard:AFRICAN_AMERICAN_PARTNERS/text() + $b//Diversity_Scorecard:HISPANIC_PARTNERS/text() + $b//Diversity_Scorecard:OTHER_PARTNERS/text()) div $b//Diversity_Scorecard:MINORITY_PERC_PARTNERS/text()) - ($b//Diversity_Scorecard:ASIAN_AMERICAN_PARTNERS/text() + $b//Diversity_Scorecard:AFRICAN_AMERICAN_PARTNERS/text() + $b//Diversity_Scorecard:HISPANIC_PARTNERS/text() + $b//Diversity_Scorecard:OTHER_PARTNERS/text()),0) :)
  (:let $minorityAttorneys := fn:round($b//Diversity_Scorecard:TOTAL_PARTNERS/text() * $b//Diversity_Scorecard:MINORITY_PERC_PARTNERS/text()):)
  let $minorityPart1 := fn:round-half-to-even($b//Diversity_Scorecard:ASIAN_AMERICAN_PARTNERS/text() + $b//Diversity_Scorecard:AFRICAN_AMERICAN_PARTNERS/text() + $b//Diversity_Scorecard:HISPANIC_PARTNERS/text() + $b//Diversity_Scorecard:OTHER_PARTNERS/text(),0)
  let $c := cts:search(/FEMALE_SCORECARD:FemaleScoreCard,
    cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/")
    ,cts:element-value-query(xs:QName("FEMALE_SCORECARD:PUBLISHYEAR"),xs:string($femaleScorecardMaxYear))
    ,cts:element-value-query(xs:QName("FEMALE_SCORECARD:ORGANIZATION_ID"),xs:string($FIRMID))
    )))
  
  let $d := cts:search(/AMLaw200,
    cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/")
    ,cts:element-value-query(xs:QName("AMLAW_200:PUBLISHYEAR"),xs:string($maxYears))
    ,cts:element-value-query(xs:QName("AMLAW_200:ORGANIZATION_ID"),xs:string($FIRMID))
    )))
   let $e := cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/organization-address/","1"),
      cts:element-value-query(xs:QName('org-address:HEADQUARTERS'),'H','case-insensitive'),
      cts:element-value-query(xs:QName('org-address:ORGANIZATION_ID'),xs:string($FIRMID))
    )))[1]
    
  (: let $headquater := if($e//org-address:COUNTRY/text() eq 'USA') then
    fn:concat($e//org-address:CITY/text(),", ",$e//org-address:STATE/text())    
    else
    fn:concat($e//org-address:CITY/text(),", ",$e//org-address:COUNTRY/text()) :)
    
  let $FirmName := if($A//ALI_RE_Attorney_Data:ALM_NAME/text() ne "")then
    $A//ALI_RE_Attorney_Data:ALM_NAME/text()
    else
    $A//ALI_RE_Attorney_Data:firm_name/text()

	let $headQuarter := if($A//ALI_RE_Attorney_Data:HQ/text() eq 'Y') then 'Yes' else 'No'

   let $PracticeAreaList := if($A//ALI_RE_Attorney_Data:ALI_ID/text() ne "") 
	then firm:GetAllPracticeAreas((xs:string($A//ALI_RE_Attorney_Data:ALI_ID/text())),$Cities,$PracticeAreas)
    else ()
	
  return if($FirmSizeFrom ge 0 and $FirmSizeTo ge 0) then( 
  if((xs:integer($headcount) ge $FirmSizeFrom) and (xs:integer($headcount) le $FirmSizeTo)) then  
  let $response-obj := json:object()  
  let $_ := (
    map:put($response-obj,'firmid', $FIRMID),
    map:put($response-obj,'firmlocation', $Cities),
    map:put($response-obj,'firmname', $FirmName),
    map:put($response-obj,'headcount', $headcount),
    map:put($response-obj,'partnercount', $partnercount),
    map:put($response-obj,'associatecount',  $associatecount),
    map:put($response-obj,'othercouselcount', $othercouselcount),
    map:put($response-obj,'admincount', $admincount),
    map:put($response-obj,'othercount', $othercount),
    (:map:put($response-obj,'practicearea', firm:GetAllPracticeAreas((xs:string($company)),$Cities,$PracticeAreas)),:)
	map:put($response-obj,'practicearea', $PracticeAreaList),
    map:put($response-obj,'LATITUDE', $city-data//city_detail:LATITUDE/text()),
    map:put($response-obj,'LONGITUDE', $city-data//city_detail:LONGITUDE/text()),
    map:put($response-obj, 'minorityAttorneys', $minorityPart1),
    map:put($response-obj, 'femaleAttorneys',$c//FEMALE_SCORECARD:FEMALE_PARTNERS/text()),
    map:put($response-obj, 'leverage', $d//AMLAW_200:LEVERAGE/text()),
    map:put($response-obj, 'headquater', $headQuarter),
	map:put($response-obj, 'p1', $PracticeAreas)

	
  )
  return $response-obj  
  else ()
  )
  else (
  if(xs:integer($headcount) > 0) then
  let $response-obj := json:object()  
  let $_ := (
    map:put($response-obj,'firmid', $FIRMID),
    map:put($response-obj,'firmlocation', $Cities),
    map:put($response-obj,'firmname', $FirmName),
    map:put($response-obj,'headcount', $headcount),
    map:put($response-obj,'partnercount', $partnercount),
    map:put($response-obj,'associatecount',  $associatecount),
    map:put($response-obj,'othercouselcount', $othercouselcount),
    map:put($response-obj,'admincount', $admincount),
    map:put($response-obj,'othercount', $othercount),
    map:put($response-obj,'practicearea', $PracticeAreaList),
    map:put($response-obj,'LATITUDE', $city-data//city_detail:LATITUDE/text()),
    map:put($response-obj,'LONGITUDE', $city-data//city_detail:LONGITUDE/text()),
    map:put($response-obj, 'minorityAttorneys', $minorityPart1),
    map:put($response-obj, 'femaleAttorneys',$c//FEMALE_SCORECARD:FEMALE_PARTNERS/text()),
    map:put($response-obj, 'leverage', $d//AMLAW_200:LEVERAGE/text()),
    map:put($response-obj, 'headquater', $headQuarter),
	map:put($response-obj, 'headquater1', $A//ALI_RE_Attorney_Data:HQ/text()),
	map:put($response-obj, 'p2', $PracticeAreas)
  )
  return $response-obj  
  else()
  )
  
return $search

};


declare function firm:SP_GETOFFICETRENDSURVEYDATA()
{
let $response-arr := json:array()
let $maxYears := fn:max(cts:element-attribute-values(xs:QName("survey:YEAR"),xs:QName("PublishYear"),(),("descending"),
  cts:and-query((
    cts:directory-query("/LegalCompass/denormalized-data/surveys/AMLAW_200/","1")
  ))))

let $organizationaddress_IDs := fn:distinct-values(cts:search(/,
                   cts:and-query((
                     cts:directory-query('/LegalCompass/relational-data/organization-address/')                
                     ,cts:element-value-query(xs:QName('org-address:HEADQUARTERS'),'H','case-insensitive')
                   )))//org-address:ORGANIZATION_ID/text())
                   
let $organizationIDs := cts:element-values(xs:QName("organization:ORGANIZATION_ID"),(),())
let $organizationIDs := ($organizationaddress_IDs,$organizationIDs)

let $AMLAW_200_IDs := cts:element-values(xs:QName("AMLAW_200:ORGANIZATION_ID"),(),("descending"),
  cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/","1")
    ,cts:element-value-query(xs:QName("AMLAW_200:PUBLISHYEAR"),xs:string($maxYears))
    ,cts:element-value-query(xs:QName("AMLAW_200:ORGANIZATION_ID"),($organizationIDs ! xs:string(.)))
  )))

let $DIVERSITY_SCORECARD_IDs := cts:element-values(xs:QName("Diversity_Scorecard:ORGANIZATION_ID"),(),("descending"),
  cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/")
    ,cts:element-value-query(xs:QName("Diversity_Scorecard:PUBLISHYEAR"),xs:string($maxYears))
    ,cts:element-value-query(xs:QName("Diversity_Scorecard:ORGANIZATION_ID"),($organizationIDs ! xs:string(.)))
  )))    

let $FEMALE_SCORECARD_IDs := cts:element-values(xs:QName("FEMALE_SCORECARD:ORGANIZATION_ID"),(),("descending"),
  cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/","1")
    ,cts:element-value-query(xs:QName("FEMALE_SCORECARD:PUBLISHYEAR"),xs:string($maxYears))
    ,cts:element-value-query(xs:QName("FEMALE_SCORECARD:ORGANIZATION_ID"),($organizationIDs ! xs:string(.)))
  )))

let $Org_Ids := ($AMLAW_200_IDs,$DIVERSITY_SCORECARD_IDs,$FEMALE_SCORECARD_IDs)
let $data := for $Org_Id in (fn:distinct-values($Org_Ids))

(:
let $Org_Ids := $FEMALE_SCORECARD_IDs
let $data := for $Org_Id in ($Org_Ids)
:)
  let $response-obj := json:object()
  
  let $b := cts:search(/Diversity_Scorecard:DiversityScorecard,
    cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/")
    ,cts:element-value-query(xs:QName("Diversity_Scorecard:PUBLISHYEAR"),xs:string($maxYears))
    ,cts:element-value-query(xs:QName("Diversity_Scorecard:ORGANIZATION_ID"),xs:string($Org_Id))
    )))
  let $c := cts:search(/FEMALE_SCORECARD:FemaleScoreCard,
    cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/")
    ,cts:element-value-query(xs:QName("FEMALE_SCORECARD:PUBLISHYEAR"),xs:string($maxYears))
    ,cts:element-value-query(xs:QName("FEMALE_SCORECARD:ORGANIZATION_ID"),xs:string($Org_Id))
    )))
  let $d := cts:search(/AMLaw200,
    cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/")
    ,cts:element-value-query(xs:QName("AMLAW_200:PUBLISHYEAR"),xs:string($maxYears))
    ,cts:element-value-query(xs:QName("AMLAW_200:ORGANIZATION_ID"),xs:string($Org_Id))
    )))
   let $e := cts:search(/,
    cts:and-query((
      cts:directory-query("/LegalCompass/relational-data/organization-address/","1"),
      cts:element-value-query(xs:QName('org-address:HEADQUARTERS'),'H','case-insensitive'),
      cts:element-value-query(xs:QName('org-address:ORGANIZATION_ID'),xs:string($Org_Id))
    )))[1]
    
  let $headquater := if($e//org-address:STATE/text() ne '') then
    fn:concat($e//org-address:CITY/text(),", ",$e//org-address:STATE/text())    
    else
    fn:concat($e//org-address:CITY/text(),", ",$e//org-address:COUNTRY/text())

  let $orgName := if((/organization[firm-org:ORGANIZATION_ID = xs:string($Org_Id)]/firm-org:ALM_NAME/text())[1] ne '')then 
      /organization[firm-org:ORGANIZATION_ID = xs:string($Org_Id)]/firm-org:ALM_NAME/text()[1]
    else 
      /organization[firm-org:ORGANIZATION_ID = xs:string($Org_Id)]/firm-org:ORGANIZATION_NAME/text()[1]
      
  let $minorityAttorneys := fn:round($b//Diversity_Scorecard:TOTAL_PARTNERS/text() * $b//Diversity_Scorecard:MINORITY_PERC_PARTNERS/text())
  
  let $_ := (
    map:put($response-obj, 'firmID', $Org_Id),
    map:put($response-obj, 'firmName', $orgName),
    map:put($response-obj, 'minorityAttorneys', $minorityAttorneys),
    map:put($response-obj, 'femaleAttorneys',$c//FEMALE_SCORECARD:FEMALE_PARTNERS/text()),
    map:put($response-obj, 'leverage', $d//AMLAW_200:LEVERAGE/text()),
    map:put($response-obj, 'headquater', $headquater) 
    )
  return  ($response-obj)  
return $data

};

declare function firm:GetAllPracticeAreas($RE_ID,$locations)
{

for $location in $locations
  let $search := fn:string-join(cts:element-values(xs:QName('ALI_RE_Attorney_Data:practice_area'), (), ('ascending'),
    cts:and-query((
    cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), $RE_ID )
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $location , ('case-insensitive'))
    ))),',')
    
return $search
};

declare function firm:GetAllPracticeAreas($ALI_ID,$locations,$PracticeAreas)
{
	let $PracticeArea-Query := if($PracticeAreas != '')then
	cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:practice_area'), $PracticeAreas, ('case-insensitive'))
	else ()
  
	for $location in $locations
	let $search := fn:string-join(cts:element-values(xs:QName('ALI_RE_Attorney_Data:practice_area'), (), ('ascending'),
	cts:and-query((
		cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
		,$PracticeArea-Query
		(:,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), $RE_ID ):)
		,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:ALI_ID'), $ALI_ID )
		,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $locations, ('case-insensitive'))
		,cts:not-query(cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:practice_area'), ('','Practice Area Not Available'), ('case-insensitive')))
    ))),',')
    
return $search
};

(:------------- By Shubham --------------:)
declare function firm:GetAdvancedFirmSearchYears()
{
  let $res-array := json:array()
  (: let $amlaw100year := cts:search(/,
                  cts:and-query((
                       cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_100/')
                       )))//amlaw100:PUBLISHYEAR/text() :)
                       
  let $amlaw200year := cts:search(/,
                  cts:and-query((
                       cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                       )))//AMLAW_200:PUBLISHYEAR/text()
                       
 let $dc20year := cts:search(/,
                  cts:and-query((
                       cts:directory-query('/LegalCompass/relational-data/surveys/DC20/')
                       )))//dc20:PUBLISHYEAR/text()
                       
 let $global100year := cts:search(/,
                  cts:and-query((
                       cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                       )))//Global_100:PUBLISHYEAR/text()        
                       
 let $legaltimesyear := cts:search(/,
                  cts:and-query((
                       cts:directory-query('/LegalCompass/relational-data/surveys/Legal_Times_150/')
                       )))//legaltimes:PUBLISHYEAR/text()
                       
 let $nlj250year := cts:search(/,
                  cts:and-query((
                       cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/')
                       )))//nlj250:PUBLISHYEAR/text()
                       
 let $ny100year := cts:search(/,
                  cts:and-query((
                       cts:directory-query('/LegalCompass/relational-data/surveys/NY100/')
                       )))//ny100:PUBLISHYEAR/text()
                       
 let $alistyear := cts:search(/,
                  cts:and-query((
                       cts:directory-query('/LegalCompass/relational-data/surveys/ALIST/')
                       )))//alist:PUBLISHYEAR/text()
                       
 let $tx100year := cts:search(/,
                  cts:and-query((
                       cts:directory-query('/LegalCompass/relational-data/surveys/TX100/')
                       )))//tx100:PUBLISHYEAR/text()
 let $distinctYear := ($amlaw200year,$dc20year,$global100year,$legaltimesyear,$nlj250year,$ny100year,$alistyear,$tx100year)
 let $loopData := for $item in fn:distinct-values($distinctYear)
                  let $res-obj := json:object()
                  let $_ := (map:put($res-obj,'PublishYear',$item))
                  let $_ := json:array-push($res-array,$res-obj)
                  return()
 return $res-array
};

declare function firm:GetReIDByOrgID1($orgID)
{
	let $result := cts:search(/,cts:and-query(((
                   cts:directory-query('/LegalCompass/relational-data/FIRMS_ALI_XREF_RE/'),
                   cts:element-value-query(xs:QName('xref:ALI_ID'),xs:string($orgID))
                   ))))[1]//xref:RE_ID/text()
	return $result			   
};



(:--------------Comparison Tools----------------:)

declare function firm:SP_GETAMLAW200FIRMS()
{
  let $res-array := json:array()
  let $maxYear := cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text()
  let $maxYearGlobal100 := cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                      )))//Global_100:PUBLISHYEAR/text()                    
  let $totalCount :=fn:count(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
                        cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(max($maxYear))),
                        cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                      ))))                   
  let $totalCountGlobal100 :=fn:count(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
                        cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(max($maxYear))),
                        cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                      ))))                   
                      
 let $result :=cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
                        cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(max($maxYear))),
                        cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                      )))
 let $resultGlobal100 :=cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
                        cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(max($maxYearGlobal100))),
                        cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                      )))                    
 let $loopData := for $item in $result
                       let $res-obj := json:object()
                       let $orgName := firm:getOrganizationName($item//AMLAW_200:ORGANIZATION_ID/text())
                       let $searchName := fn:replace(xs:string($orgName), "[^a-zA-Z0-9'']", "")
                       let $_ := (map:put($res-obj,'ID',$item//AMLAW_200:ORGANIZATION_ID/text()),
                                  map:put($res-obj,'Name',$orgName),
                                  map:put($res-obj,'SearchName',$searchName),
                                  map:put($res-obj,'TotalCount',$totalCount))
                       let $_ := json:array-push($res-array,$res-obj)
                       return()
                       
  let $loopData1 := for $item in $resultGlobal100
                       let $res-obj := json:object()
                       let $orgName := firm:getOrganizationName($item//Global_100:ORGANIZATION_ID/text())
                       let $searchName := fn:replace(xs:string($orgName), "[^a-zA-Z0-9'']", "")
                       let $_ := (map:put($res-obj,'ID',$item//Global_100:ORGANIZATION_ID/text()),
                                  map:put($res-obj,'Name',$orgName),
                                  map:put($res-obj,'SearchName',$searchName),
                                  map:put($res-obj,'TotalCount',$totalCountGlobal100))
                       let $_ := json:array-push($res-array,$res-obj)
                       return()
  return $res-array
};

declare function firm:getOrganizationName($orgID)
{
   let $result :=cts:search(/,
                  cts:and-query((
                    cts:directory-query('/LegalCompass/relational-data/organization/'),
                    cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),$orgID)
                  )))[1]
   let $orgName := if($result//organizations:ALM_NAME/text() ne '') then $result//organizations:ALM_NAME/text() 
                   else $result//organizations:ORGANIZATION_NAME/text()
  return $orgName
};

declare function firm:SP_GETFIRMREVENUECHANGE($startYear,$endYear,$organizationID)
{
	let $res-array := json:array()
                      
  let $result := cts:search(/,
                  cts:and-query((
                       cts:directory-query("/LegalCompass/relational-data/organization/"),
                       cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),fn:tokenize($organizationID,','))
                       )))
  let $loopData := for $item in $result
                       
                      let $loopData1 := for $item1 in ($startYear to $endYear)
					  
					  let $amLaw200Year :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                     cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($item1))
                                                  )))
                      
                      let $global100 := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                         cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($item1)))))
                       let $global100preYear := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                         cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($item1) - 1)))))
                       let $amLaw200YearPreYear :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                     cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($item1) - 1)))))
                                                  
                        let $uk50 := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                         cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($item1)))))[1]
                       let $uk50preYear := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                         cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($item1) -1)))))[1]

					   let $grossRevenue := if($amLaw200Year//AMLAW_200:GROSS_REVENUE/text() ne '') then 
					   						$amLaw200Year//AMLAW_200:GROSS_REVENUE/text() 
										    else if($global100//Global_100:GROSS_REVENUE/text() ne '') then $global100//Global_100:GROSS_REVENUE/text()
											else if($uk50//UK_50:GROSS_REVENUE_DOLLAR/text()) then $uk50//UK_50:GROSS_REVENUE_DOLLAR/text() else -1000
					   
                       let $grossRevenuePreYear := if($amLaw200YearPreYear//AMLAW_200:GROSS_REVENUE/text() ne '') then $amLaw200YearPreYear//AMLAW_200:GROSS_REVENUE/text() 
					   							   else if($global100preYear//Global_100:GROSS_REVENUE/text() ne '') then $global100preYear//Global_100:GROSS_REVENUE/text()
													else if($uk50preYear//UK_50:GROSS_REVENUE_DOLLAR/text()) then $uk50preYear//UK_50:GROSS_REVENUE_DOLLAR/text() else -1000
					   
					   let $organizationName := if(fn:not($item//organizations:ALM_NAME/text() ne '')) then $item//organizations:ORGANIZATION_NAME/text()
												else $item//organizations:ALM_NAME/text()

                       let $res-obj := json:object()
                       let $difference := $grossRevenue - $grossRevenuePreYear
                       let $changes :=if(xs:string($grossRevenue) ne '-1000' and xs:string($grossRevenuePreYear) ne '-1000') then fn:round-half-to-even(xs:float(($difference div $grossRevenuePreYear)*100),2) else -1000
					   
                       let $_ := (map:put($res-obj,'ORGANIZATION_ID',$item//organizations:ORGANIZATION_ID/text()),
                                  map:put($res-obj,'ORGANIZATION_NAME',$organizationName),
                                  map:put($res-obj,'CHANGE',$changes),
                                  map:put($res-obj,'PUBLISHYEAR',$item1),
                                  map:put($res-obj,'GROSS_REVENUE',$grossRevenue),
								  map:put($res-obj,'VALUE',$grossRevenue)
                                  )
                       let $_ :=json:array-push($res-array,$res-obj)
                       return ()
                       return()
   (:------------------------ AMLAW200 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $grossrevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i))
                                                                )))//AMLAW_200:GROSS_REVENUE/text())
                         let $grossrevenuepreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($i)-1))
                                                               )))//AMLAW_200:GROSS_REVENUE/text())
                         let $difference := $grossrevenue - $grossrevenuepreYear
                         let $changes :=if($grossrevenue ne 0 and $grossrevenuepreYear ne 0) then fn:format-number(xs:float(($difference div $grossrevenuepreYear)*100), '#,##0.00') else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 200'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'GROSS_REVENUE',$grossrevenue),
												map:put($res-obj,'VALUE',$grossrevenue)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ AMLAW100 Union--------------------:) 
	let $amlaw100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $grossrevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:GROSS_REVENUE/text())

                         let $grossrevenuepreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																    cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                               )))//AMLAW_200:GROSS_REVENUE/text())
                         let $difference := $grossrevenue - $grossrevenuepreYear
                         let $changes :=if($grossrevenue ne 0 and $grossrevenuepreYear ne 0) then fn:format-number(xs:float(($difference div $grossrevenuepreYear)*100), '#,##0.00') else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 100'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'GROSS_REVENUE',$grossrevenue),
												map:put($res-obj,'VALUE',$grossrevenue)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else()
                        return()


	(:------------------------ AMLAW25 Union--------------------:) 
	let $amlaw25data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $grossrevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',25),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:GROSS_REVENUE/text())

                         let $grossrevenuepreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																    cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',25),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                               )))//AMLAW_200:GROSS_REVENUE/text())
                         let $difference := $grossrevenue - $grossrevenuepreYear
                         let $changes :=if($grossrevenue ne 0 and $grossrevenuepreYear ne 0) then fn:format-number(xs:float(($difference div $grossrevenuepreYear)*100), '#,##0.00') else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 25'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'GROSS_REVENUE',$grossrevenue),
												map:put($res-obj,'VALUE',$grossrevenue)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ AMLAW Second Hundred Union--------------------:) 
	let $amlaw25data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $grossrevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:GROSS_REVENUE/text())

                         let $grossrevenuepreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																    cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                               )))//AMLAW_200:GROSS_REVENUE/text())
                         let $difference := $grossrevenue - $grossrevenuepreYear
                         let $changes :=if($grossrevenue ne 0 and $grossrevenuepreYear ne 0) then fn:format-number(xs:float(($difference div $grossrevenuepreYear)*100), '#,##0.00') else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law Second Hundred'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'GROSS_REVENUE',$grossrevenue),
												map:put($res-obj,'VALUE',$grossrevenue)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else()
                        return()															
                        
    (:------------------------ GLOBAL_100 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $grossrevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i)),
																   cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"")),
																   cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",100)
                                                                )))//Global_100:GROSS_REVENUE/text())
                         let $grossrevenuepreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"")),
																   cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",100)
                                                                )))//Global_100:GROSS_REVENUE/text())
                         let $difference := $grossrevenue - $grossrevenuepreYear
                         let $changes :=if($grossrevenue ne 0 and $grossrevenuepreYear ne 0) then fn:format-number(xs:float(($difference div $grossrevenuepreYear)*100), '#,##0.00') else 0
						 
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 100'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'GROSS_REVENUE',$grossrevenue),
												map:put($res-obj,'VALUE',$grossrevenue)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else()
                        return()
  

   (:------------------------ GLOBAL_200 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $grossrevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i)),
																   cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"")),
																   cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",200)
                                                                )))//Global_100:GROSS_REVENUE/text())
                         let $grossrevenuepreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"")),
																   cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",200)
                                                                )))//Global_100:GROSS_REVENUE/text())
                         let $difference := $grossrevenue - $grossrevenuepreYear
                         let $changes :=if($grossrevenue ne 0 and $grossrevenuepreYear ne 0) then fn:format-number(xs:float(($difference div $grossrevenuepreYear)*100), '#,##0.00') else 0
						 
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 200'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'GROSS_REVENUE',$grossrevenue),
												map:put($res-obj,'VALUE',$grossrevenue)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ GLOBAL_100 Second Hundred Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $grossrevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i)),
																   cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"")),
																   cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),">",100)
                                                                )))//Global_100:GROSS_REVENUE/text())
                         let $grossrevenuepreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"")),
																   cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),">",100)
                                                                )))//Global_100:GROSS_REVENUE/text())
                         let $difference := $grossrevenue - $grossrevenuepreYear
                         let $changes :=if($grossrevenue ne 0 and $grossrevenuepreYear ne 0) then fn:format-number(xs:float(($difference div $grossrevenuepreYear)*100), '#,##0.00') else 0
						 
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global Second Hundred'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'GROSS_REVENUE',$grossrevenue),
												map:put($res-obj,'VALUE',$grossrevenue)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ UK_50 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $grossrevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($i)),
																   cts:not-query(cts:element-value-query(xs:QName("UK_50:UK_50_RANK"),"")),
																   cts:element-range-query(xs:QName("UK_50:UK_50_RANK"),"<=",50)
                                                                )))//UK_50:GROSS_REVENUE_DOLLAR/text())

                         let $grossrevenuepreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:not-query(cts:element-value-query(xs:QName("UK_50:UK_50_RANK"),"")),
																   cts:element-range-query(xs:QName("UK_50:UK_50_RANK"),"<=",50)
                                                                )))//UK_50:GROSS_REVENUE_DOLLAR/text())
                         let $difference := $grossrevenue - $grossrevenuepreYear
                         let $changes :=if($grossrevenue ne 0 and $grossrevenuepreYear ne 0) then fn:format-number(xs:float(($difference div $grossrevenuepreYear)*100), '#,##0.00') else 0
						 
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 50'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'GROSS_REVENUE',$grossrevenue),
												map:put($res-obj,'VALUE',$grossrevenue)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ UK_100 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $grossrevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($i)),
																   cts:not-query(cts:element-value-query(xs:QName("UK_50:UK_50_RANK"),"")),
																   cts:element-range-query(xs:QName("UK_50:UK_50_RANK"),"<=",100)
                                                                )))//UK_50:GROSS_REVENUE_DOLLAR/text())

                         let $grossrevenuepreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:not-query(cts:element-value-query(xs:QName("UK_50:UK_50_RANK"),"")),
																   cts:element-range-query(xs:QName("UK_50:UK_50_RANK"),"<=",100)
                                                                )))//UK_50:GROSS_REVENUE_DOLLAR/text())
                         let $difference := $grossrevenue - $grossrevenuepreYear
                         let $changes :=if($grossrevenue ne 0 and $grossrevenuepreYear ne 0) then fn:format-number(xs:float(($difference div $grossrevenuepreYear)*100), '#,##0.00') else -1000
						 
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 100'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'GROSS_REVENUE',$grossrevenue),
												map:put($res-obj,'VALUE',$grossrevenue)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ China 45 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $grossrevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
                                                                   cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($i))
                                                                )))//CHINA_40:GROSS_REVENUE/text())

                         let $grossrevenuepreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
                                                                   cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(xs:integer($i)-1))
                                                                )))//CHINA_40:GROSS_REVENUE/text())

                         let $difference := $grossrevenue - $grossrevenuepreYear
                         let $changes :=if($grossrevenue ne 0 and $grossrevenuepreYear ne 0) then fn:format-number(xs:float(($difference div $grossrevenuepreYear)*100), '#,##0.00') else -1000
						 
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','China 45'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'GROSS_REVENUE',$grossrevenue),
												map:put($res-obj,'VALUE',$grossrevenue)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()																
   					
   return $res-array
                  

};

declare function firm:SP_GETFIRMRPLCHANGE($startYear,$endYear,$organizationID)
{
  let $res-array := json:array()
                      
  let $result := cts:search(/,
                  cts:and-query((
                       cts:directory-query("/LegalCompass/relational-data/organization/"),
                       cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),fn:tokenize($organizationID,','))
                       )))
   let $loopData := for $item in $result
                      let $loopData1 := for $item1 in (xs:integer($startYear) to xs:integer($endYear))
					  
					  let $amLaw200Year :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                     cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($item1))
                                                  )))
                      
                      let $global100 := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                         cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($item1)))))
                       let $global100preYear := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                         cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($item1) -1)))))
                       let $amLaw200YearPreYear :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                     cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($item1) -1)))))
                       let $uk50 := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                         cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($item1)))))[1]
                       let $uk50preYear := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                         cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($item1) -1)))))[1]

 let $organizationName := if(fn:not($item//organizations:ALM_NAME/text() ne '')) then $item//organizations:ORGANIZATION_NAME/text()
												else $item//organizations:ALM_NAME/text()                       

 let $rpl := if($amLaw200Year//AMLAW_200:RPL/text() ne '') then $amLaw200Year//AMLAW_200:RPL/text() 
			else if($global100//Global_100:REVENUE_PER_LAWYER/text() != '') then $global100//Global_100:REVENUE_PER_LAWYER/text()
			else if($uk50//UK_50:RPL_DOLLAR/text() ne '') then $uk50//UK_50:RPL_DOLLAR/text() else()

   					   let $rplPreYear := if($amLaw200YearPreYear//AMLAW_200:RPL/text() ne '') then $amLaw200YearPreYear//AMLAW_200:RPL/text() 
										  else if($global100preYear//Global_100:REVENUE_PER_LAWYER/text() != '') then $global100preYear//Global_100:REVENUE_PER_LAWYER/text()
										  else if($uk50preYear//UK_50:RPL_DOLLAR/text() ne '') then $uk50preYear//UK_50:RPL_DOLLAR/text() else()
                       let $res-obj := json:object()
                       let $difference := $rpl - $rplPreYear			
                       let $changes := if($rpl ne 0 and $rplPreYear ne 0) then firm:MLRoundingFunction(($difference div $rplPreYear)*100, 2) else 0
					   let $changes1 := if($amLaw200Year ne '' or $global100 ne '' or $uk50 ne '') then $changes else -1000
                       let $_ := (map:put($res-obj,'ORGANIZATION_ID',$item//organizations:ORGANIZATION_ID/text()),
                                  map:put($res-obj,'ORGANIZATION_NAME',$organizationName),
                                  map:put($res-obj,'CHANGE',$changes1),
                                  map:put($res-obj,'PUBLISHYEAR',$item1),
                                  map:put($res-obj,'RPL',$rpl),
								  map:put($res-obj,'VALUE',$rpl)
                                  )
                       let $_ := json:array-push($res-array,$res-obj)
                       return ()
                       return()
					   
   (:------------------------ AMLAW200 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i))
                                                                )))//AMLAW_200:RPL/text())
                         let $rplpreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($i)-1))
                                                               )))//AMLAW_200:RPL/text())
                         let $difference := $rpl - $rplpreYear
                         let $changes := if($rpl ne 0 and $rplpreYear ne 0) then fn:format-number(xs:float($difference div $rplpreYear)*100, '#,##0.00') else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 200'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'RPL',$rpl),
												map:put($res-obj,'VALUE',$rpl)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ AMLAW100 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:RPL/text())
                         let $rplpreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																    cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                               )))//AMLAW_200:RPL/text())
                         let $difference := $rpl - $rplpreYear
                         let $changes := if($rpl ne 0 and $rplpreYear ne 0) then fn:format-number(xs:float($difference div $rplpreYear)*100, '#,##0.00') else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 100'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'RPL',$rpl),
												map:put($res-obj,'VALUE',$rpl)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

    (:------------------------ AMLAW25 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',25),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:RPL/text())
                         let $rplpreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																    cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',25),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                               )))//AMLAW_200:RPL/text())
                         let $difference := $rpl - $rplpreYear
                         let $changes := if($rpl ne 0 and $rplpreYear ne 0) then fn:format-number(xs:float($difference div $rplpreYear)*100, '#,##0.00') else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 25'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'RPL',$rpl),
												map:put($res-obj,'VALUE',$rpl)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ AMLAW1 Second Hundred Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:RPL/text())
                         let $rplpreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																    cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                               )))//AMLAW_200:RPL/text())
                         let $difference := $rpl - $rplpreYear
                         let $changes := if($rpl ne 0 and $rplpreYear ne 0) then fn:format-number(xs:float($difference div $rplpreYear)*100, '#,##0.00') else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law Second Hundred'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'RPL',$rpl),
												map:put($res-obj,'VALUE',$rpl)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else()
                        return()
	
	(:------------------------ GLOBAL_100 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i)),
																   cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"")),
																   cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",100)
                                                                )))//Global_100:REVENUE_PER_LAWYER/text())
                         let $rplpreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"")),
																   cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",100)
                                                                )))//Global_100:REVENUE_PER_LAWYER/text())
                         let $difference := $rpl - $rplpreYear
                         let $changes :=  if($rpl ne 0 and $rplpreYear ne 0) then fn:format-number(xs:float($difference div $rplpreYear)*100, '#,##0.00') else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 100'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'RPL',$rpl),
												map:put($res-obj,'VALUE',$rpl)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else() 
                        return()

	(:------------------------ GLOBAL_200 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i)),
																   cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"")),
																   cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",200)
                                                                )))//Global_100:REVENUE_PER_LAWYER/text())
                         let $rplpreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"")),
																   cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",200)
                                                                )))//Global_100:REVENUE_PER_LAWYER/text())
                         let $difference := $rpl - $rplpreYear
                         let $changes :=  if($rpl ne 0 and $rplpreYear ne 0) then fn:format-number(xs:float($difference div $rplpreYear)*100, '#,##0.00') else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 200'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'RPL',$rpl),
												map:put($res-obj,'VALUE',$rpl)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else() 
                        return()

	(:------------------------ GLOBAL Second Hundred Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i)),
																   cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"")),
																   cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),">",100)
                                                                )))//Global_100:REVENUE_PER_LAWYER/text())
                         let $rplpreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"")),
																   cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),">",100)
                                                                )))//Global_100:REVENUE_PER_LAWYER/text())
                         let $difference := $rpl - $rplpreYear
                         let $changes :=  if($rpl ne 0 and $rplpreYear ne 0) then fn:format-number(xs:float($difference div $rplpreYear)*100, '#,##0.00') else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global Second Hundred'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'RPL',$rpl),
												map:put($res-obj,'VALUE',$rpl)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else() 
                        return()

	(:------------------------ UK_50 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $grossrevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($i)),
																   cts:not-query(cts:element-value-query(xs:QName("UK_50:UK_50_RANK"),"")),
																   cts:element-range-query(xs:QName("UK_50:UK_50_RANK"),"<=",50)
                                                                )))//UK_50:RPL_DOLLAR/text())

                         let $grossrevenuepreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:not-query(cts:element-value-query(xs:QName("UK_50:UK_50_RANK"),"")),
																   cts:element-range-query(xs:QName("UK_50:UK_50_RANK"),"<=",50)
                                                                )))//UK_50:RPL_DOLLAR/text())
                         let $difference := $grossrevenue - $grossrevenuepreYear
                         let $changes :=if($grossrevenue ne 0 and $grossrevenuepreYear ne 0) then fn:format-number(xs:float(($difference div $grossrevenuepreYear)*100), '#,##0.00') else -1000
						 
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 50'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'GROSS_REVENUE',$grossrevenue),
												map:put($res-obj,'VALUE',$grossrevenue)
                                                )
                        let $_ := json:array-push($res-array,$res-obj) 
                        return()

	(:------------------------ UK_100 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $grossrevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($i)),
																   cts:not-query(cts:element-value-query(xs:QName("UK_50:UK_50_RANK"),"")),
																   cts:element-range-query(xs:QName("UK_50:UK_50_RANK"),"<=",100)
                                                                )))//UK_50:RPL_DOLLAR/text())

                         let $grossrevenuepreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:not-query(cts:element-value-query(xs:QName("UK_50:UK_50_RANK"),"")),
																   cts:element-range-query(xs:QName("UK_50:UK_50_RANK"),"<=",100)
                                                                )))//UK_50:RPL_DOLLAR/text())
                         let $difference := $grossrevenue - $grossrevenuepreYear
                         let $changes :=if($grossrevenue ne 0 and $grossrevenuepreYear ne 0) then fn:format-number(xs:float(($difference div $grossrevenuepreYear)*100), '#,##0.00') else -1000
						 
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 100'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'GROSS_REVENUE',$grossrevenue),
												map:put($res-obj,'VALUE',$grossrevenue)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ China 45 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $grossrevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
                                                                   cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($i))
                                                                )))//CHINA_40:REVENUE_PER_LAWYER/text())

                         let $grossrevenuepreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
                                                                   cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(xs:integer($i)-1))
                                                                )))//CHINA_40:REVENUE_PER_LAWYER/text())

                         let $difference := $grossrevenue - $grossrevenuepreYear
                         let $changes :=if($grossrevenue ne 0 and $grossrevenuepreYear ne 0) then fn:format-number(xs:float(($difference div $grossrevenuepreYear)*100), '#,##0.00') else -1000
						 
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','China 45'),
                                                map:put($res-obj,'CHANGE',$changes),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'GROSS_REVENUE',$grossrevenue),
												map:put($res-obj,'VALUE',$grossrevenue),
												map:put($res-obj,'preYera',$grossrevenuepreYear)

												
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()										

   return $res-array                    

};

declare function firm:SP_FIRMCOSTPERLAWYER($startYear,$endYear,$organizationID)
{
  let $res-array := json:array()
                      
  let $result := cts:search(/,
                  cts:and-query((
                       cts:directory-query("/LegalCompass/relational-data/organization/"),
                       cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),fn:tokenize($organizationID,','))
                       )))
  let $loopData := for $item in $result
                       
                      
                      let $loopData1 := for $item1 in ($startYear to $endYear)
                      
                        let $amLaw200Year :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                     cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($item1))
                                                  )))

						let $global100 := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                         cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($item1))
													)))

						 let $uk50 := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                         cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($item1))
													)))[1]

						let $amlawNOI := $amLaw200Year//AMLAW_200:NET_OPERATING_INCOME/text()
						let $noiG100 := $global100//Global_100:PPP/text() * $global100//Global_100:NUM_EQUITY_PARTNERS/text()											   
						let $noiUK50 := $uk50//UK_50:PPP_DOLLAR/text() *  $uk50//UK_50:NUMBER_OF_EQ_PARTNERS/text()	
						let $amlawNumLawyers := $amLaw200Year//AMLAW_200:NUM_OF_LAWYERS/text()	
						let $globalnumLawyers:= $global100//Global_100:NUM_LAWYERS/text()	
						let $uk50NumLawyers := $uk50//UK_50:NUMBER_OF_LAWYERS/text()
						
						let $grossRevenue := if($amLaw200Year//AMLAW_200:GROSS_REVENUE/text() != '') then $amLaw200Year//AMLAW_200:GROSS_REVENUE/text()
                                            else if($global100//Global_100:GROSS_REVENUE/text()) then $global100//Global_100:GROSS_REVENUE/text()
											else $uk50//UK_50:GROSS_REVENUE_DOLLAR/text()

						let $noi := if($amlawNOI) then $amlawNOI
									else if($noiG100) then $noiG100
									else if($noiUK50) then $noiUK50
									else 0

						let $nol := if($amlawNumLawyers) then $amlawNumLawyers
									else if($globalnumLawyers) then $globalnumLawyers
									else if($uk50NumLawyers) then $uk50NumLawyers
									else 0			



												  
                       (: let $difference :=if($amLaw200Year) then xs:double($amLaw200Year//AMLAW_200:GROSS_REVENUE/text()) - xs:double($amLaw200Year//AMLAW_200:NET_OPERATING_INCOME/text())
					   					 else if($global100) then $global100//Global_100
                       let $cpl :=if(xs:double($amLaw200Year//AMLAW_200:NUM_OF_LAWYERS/text()) ne 0) then firm:MLRoundingFunction(xs:float($difference div xs:double($amLaw200Year//AMLAW_200:NUM_OF_LAWYERS/text())),2) else 0 :)

					   let $cpl := if($nol) then firm:MLRoundingFunction((($grossRevenue - $noi) div $nol) , 2) else -1000
                       let $res-obj := json:object()
                      
					    let $organizationName := if(fn:not($item//organizations:ALM_NAME/text() ne '')) then $item//organizations:ORGANIZATION_NAME/text()
												else $item//organizations:ALM_NAME/text()

						let $_ := (map:put($res-obj,'ORGANIZATION_ID',$item//organizations:ORGANIZATION_ID/text()),
                                  map:put($res-obj,'ORGANIZATION_NAME',$organizationName),
                                  map:put($res-obj,'PUBLISHYEAR',$item1),
                                  map:put($res-obj,'CostPerLawyer',$cpl)
                                  )
                       let $_ := json:array-push($res-array,$res-obj)
                       return ()
                       return()
   (:------------------------ AMLAW200 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                        let $grossRevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i))
                                                                )))//AMLAW_200:GROSS_REVENUE/text())
                        let $netIncome :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i))
                                                                )))//AMLAW_200:NET_OPERATING_INCOME/text())
                        let $noofLawyers :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i))
                                                                )))//AMLAW_200:NUM_OF_LAWYERS/text())       
                                                                
                        let $difference := $grossRevenue - $netIncome
                        let $cpl :=if($noofLawyers ne 0 and $difference ne 0) then fn:format-number(xs:float(( $difference div $noofLawyers)), '#,##0.00') else ''
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CostPerLawyer',$cpl)
                                                )
                        let $_ := if(xs:string($cpl) ne '') then json:array-push($res-array,$res-obj) else()
                        return()

	 (:------------------------ AMLAW100 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                        let $grossRevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:GROSS_REVENUE/text())
                        let $netIncome :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:NET_OPERATING_INCOME/text())
                        let $noofLawyers :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:NUM_OF_LAWYERS/text())       
                                                                
                        let $difference := $grossRevenue - $netIncome
                        let $cpl :=if($noofLawyers ne 0 and $difference ne 0) then fn:format-number(xs:float(( $difference div $noofLawyers)), '#,##0.00') else ''
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CostPerLawyer',$cpl)
                                                )
                        let $_ := if(xs:string($cpl) ne '') then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ AMLAW25 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                        let $grossRevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',25),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:GROSS_REVENUE/text())
                        let $netIncome :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',25),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:NET_OPERATING_INCOME/text())
                        let $noofLawyers :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',25),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:NUM_OF_LAWYERS/text())       
                                                                
                        let $difference := $grossRevenue - $netIncome
                        let $cpl :=if($noofLawyers ne 0 and $difference ne 0) then fn:format-number(xs:float(( $difference div $noofLawyers)), '#,##0.00') else ''
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 25'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CostPerLawyer',$cpl)
                                                )
                        let $_ := if(xs:string($cpl) ne '') then json:array-push($res-array,$res-obj) else()
                        return()	

	(:------------------------ AMLAW 2nd Hundred Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                        let $grossRevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:GROSS_REVENUE/text())
                        let $netIncome :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:NET_OPERATING_INCOME/text())
                        let $noofLawyers :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:NUM_OF_LAWYERS/text())       
                                                                
                        let $difference := $grossRevenue - $netIncome
                        let $cpl :=if($noofLawyers ne 0 and $difference ne 0) then fn:format-number(xs:float(( $difference div $noofLawyers)), '#,##0.00') else ''
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CostPerLawyer',$cpl)
                                                )
                        let $_ := if(xs:string($cpl) ne '') then json:array-push($res-array,$res-obj) else()
                        return()					
						
	(:----------- UK 50 Union -----------:)	
 let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
		let $res3 := cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1'),
							cts:element-range-query(xs:QName('UK_50:UK_50_RANK'),'<=',50),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($i))
							)))

		let $grossRevenue := avg($res3//UK_50:GROSS_REVENUE_DOLLAR/text())
		let $ppp := avg($res3//UK_50:PPP_DOLLAR/text())
		
		
		
		let $CHANGE := fn:round-half-to-even(($grossRevenue - ($ppp * avg($res3//UK_50:NUMBER_OF_EQ_PARTNERS/text()))) div avg($res3//UK_50:NUMBER_OF_LAWYERS/text()) ,2)											


		(: let $res3PreYear := cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1'),
							cts:element-range-query(xs:QName('UK_50:UK_50_RANK'),'<=',50),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($i) -1 ))
							)))

		let $grossRevenuePreYear := avg($res3PreYear//UK_50:GROSS_REVENUE_DOLLAR/text())
		let $pppPreYear := avg($res3PreYear//UK_50:PPP_DOLLAR/text())
		
		
		
		let $CHANGEPreYear := fn:round-half-to-even(($grossRevenuePreYear - ($pppPreYear * avg($res3PreYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()))) div avg($res3PreYear//UK_50:NUMBER_OF_LAWYERS/text()) ,2)											

		let $cpl := ((($CHANGE - $CHANGEPreYear) div $CHANGEPreYear) * 100) :)

		 let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 50'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CostPerLawyer',$CHANGE)
                                                )
		let $_ := json:array-push($res-array,$res-obj)
		return()	

	(:----------- UK 100 Union -----------:)	
 let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
		let $res3 := cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1'),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string($i))
							)))

		let $grossRevenue := avg($res3//UK_50:GROSS_REVENUE_DOLLAR/text())
		let $ppp := avg($res3//UK_50:PPP_DOLLAR/text())
		
		
		
		let $CHANGE := fn:round-half-to-even(($grossRevenue - ($ppp * avg($res3//UK_50:NUMBER_OF_EQ_PARTNERS/text()))) div avg($res3//UK_50:NUMBER_OF_LAWYERS/text()) ,2)											


		(: let $res3PreYear := cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/','1'),
							cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'), xs:string(xs:integer($i) -1 ))
							)))

		let $grossRevenuePreYear := avg($res3PreYear//UK_50:GROSS_REVENUE_DOLLAR/text())
		let $pppPreYear := avg($res3PreYear//UK_50:PPP_DOLLAR/text())
		
		
		
		let $CHANGEPreYear := fn:round-half-to-even(($grossRevenuePreYear - ($pppPreYear * avg($res3PreYear//UK_50:NUMBER_OF_EQ_PARTNERS/text()))) div avg($res3PreYear//UK_50:NUMBER_OF_LAWYERS/text()) ,2)											

		let $cpl := ((($CHANGE - $CHANGEPreYear) div $CHANGEPreYear) * 100) :)

		 let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CostPerLawyer',$CHANGE)
                                                )
		let $_ := json:array-push($res-array,$res-obj)
		return()		
							            
   
   return $res-array                    

};

declare function firm:SP_FIRMPROFITPERPARTNER($startYear,$endYear,$organizationID)
{
  let $res-array := json:array()
                      
  let $result := cts:search(/,
                  cts:and-query((
                       cts:directory-query("/LegalCompass/relational-data/organization/"),
                       cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),fn:tokenize($organizationID,','))
                       )))
  let $loopData := for $item in $result
                       
                       
                      let $loopData1 := for $item1 in ($startYear to $endYear)
                      
					  let $amLaw200Year :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                     cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($item1))
                                                  )))
					  
                      let $global100 := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
														 cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'')),
                                                         cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($item1)))))
                       
					  let $uk50Data := cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($item1))),
													cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text())
													)))[1]

                       let $costperlawyer := if($amLaw200Year//AMLAW_200:PPP/text() ne '') then $amLaw200Year//AMLAW_200:PPP/text() 
											else if($global100//Global_100:PPP/text() ne '') then $global100//Global_100:PPP/text()
											else if($uk50Data//UK_50:PPP_DOLLAR/text() ne '') then $uk50Data//UK_50:PPP_DOLLAR/text() else()

                       let $CPL := if($costperlawyer != '') then fn:round-half-to-even(xs:integer($costperlawyer), 2) else 0
                       let $res-obj := json:object()
					     let $organizationName := if(fn:not($item//organizations:ALM_NAME/text() ne '')) then $item//organizations:ORGANIZATION_NAME/text()
												else $item//organizations:ALM_NAME/text()
					   let $changes1 := if($amLaw200Year ne '' or $global100 ne '' or $uk50Data != '') then $CPL else -1000
                       let $_ := (map:put($res-obj,'ORGANIZATION_ID',$item//organizations:ORGANIZATION_ID/text()),
                                  map:put($res-obj,'ORGANIZATION_NAME',$organizationName),
								  map:put($res-obj,'PUBLISHYEAR',$item1),
                                  map:put($res-obj,'COSTPERLAWYER',$changes1)
                                  )
                       let $_ := json:array-push($res-array,$res-obj)
                       return ()
                       return()
   (:------------------------ AMLAW200 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $result :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i))
                                                                )))//AMLAW_200:PPP/text())
                         let $CPL := fn:format-number(xs:float($result), '0.00')
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'COSTPERLAWYER',$CPL)
                                                )
                        let $_ := json:array-push($res-array,$res-obj) 
                        return()
                        
	 (:------------------------ AMLAW 25 Union--------------------:)  
   
   let $amlaw25data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $result :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',25),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:PPP/text())

                         let $CPL := fn:format-number(xs:float($result), '0.00')
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 25'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'COSTPERLAWYER',$CPL)
                                                )
                        let $_ := json:array-push($res-array,$res-obj) 
                        return()

	(:------------------------ AMLAW 100 Union--------------------:)  
   
   let $amlaw25data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $result :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:PPP/text())
																
                         let $CPL := fn:format-number(xs:float($result), '0.00')
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'COSTPERLAWYER',$CPL)
                                                )
                        let $_ := json:array-push($res-array,$res-obj) 
                        return()					

	 (:------------------------ AMLAW 2nd Hundred Union--------------------:)  
   
   let $amlaw25data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $result :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:PPP/text())
																
                         let $CPL := fn:format-number(xs:float($result), '0.00')
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'COSTPERLAWYER',$CPL)
                                                )
                        let $_ := json:array-push($res-array,$res-obj) 
                        return()					


    (:------------------------ GLOBAL_200 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $result :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i))
                                                                )))//Global_100:PPP/text())
                         let $CPL := fn:format-number(xs:float($result), '0.00')
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'COSTPERLAWYER',$CPL)
                                                )
                        let $_ := if($result ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ GLOBAL_100 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $result :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                                )))//Global_100:PPP/text())

                         let $CPL := fn:format-number(xs:float($result), '0.00')
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'COSTPERLAWYER',$CPL)
                                                )
                        let $_ := if($result ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ GLOBAL_ 2nd hundred Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $result :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                                )))//Global_100:PPP/text())
																
                         let $CPL := if($result) then fn:format-number(xs:float($result), '0.00') else -1000
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'COSTPERLAWYER',$CPL)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()					

	(:------------------------ UK_50 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $result :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('UK_50:UK_50_RANK'),'<=',50),
																   cts:not-query(cts:element-value-query(xs:QName('UK_50:UK_50_RANK'),''))
                                                                )))//UK_50:PPP_DOLLAR/text())
																
                         let $CPL :=if($result) then fn:format-number(xs:float($result), '0.00') else -1000
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 50'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'COSTPERLAWYER',$CPL)
                                                )
                        let $_ :=  json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ UK_100 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $result :=  avg(cts:search(/,
                                                               cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('UK_50:UK_50_RANK'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('UK_50:UK_50_RANK'),''))
                                                                )))//UK_50:PPP_DOLLAR/text())
																
                         let $CPL := if($result) then fn:format-number(xs:float($result), '0.00') else -1000
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'COSTPERLAWYER',$CPL)
                                                )
                        let $_ :=  json:array-push($res-array,$res-obj)
                        return()
	
	(:------------------------ CHINA_45 hundred Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $result :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
                                                                   cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($i))
                                                                )))//CHINA_40:PROFITS_PER_PARTNER/text())
																
                         let $CPL :=if($result) then fn:format-number(xs:float($result), '0.00') else -1000
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','China 45'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'COSTPERLAWYER',$CPL)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()					

   return $res-array                    

};

declare function firm:SP_FIRMLGBTAttorneys($startYear,$endYear,$organizationID)
{
  let $res-array := json:array()
  
  let $publishYear := 0

  (: let $startYear := 2015 :)
  
  let $result := cts:search(/,
                  cts:and-query((
                       cts:directory-query("/LegalCompass/relational-data/organization/"),
                       cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),fn:tokenize($organizationID,','))
                       )))

  let $loopData := for $item in $result
					   let $res-obj1 := json:object()
					   let $organizationName := if(fn:not($item//organizations:ALM_NAME/text() ne '')) then $item//organizations:ORGANIZATION_NAME/text()
												else $item//organizations:ALM_NAME/text()

					   let $loopData1 := for $item1 in ($startYear to $endYear)

                       let $diversitySC := cts:search(/,
                                            cts:and-query((
                                                 cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                 cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                 cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($item1))
                                                 )))[1]   
					
					  
					   
						 
                           let $res-obj := json:object()
                           let $margin :=firm:MLRoundingFunction(xs:float(xs:double($diversitySC//nljlgbt:PERCENT_LGBT_ATTORNEYS/text()) * 100),2)
                           let $_ :=(map:put($res-obj,'ORGANIZATION_ID',$item//organizations:ORGANIZATION_ID/text()),
									     map:put($res-obj,'ORGANIZATION_NAME',$organizationName),
										 map:put($res-obj,'PUBLISHYEAR',$item1),
										 map:put($res-obj,'MARGIN',if($margin ne 0) then $margin else -1000)
									    )
                           let $_ := json:array-push($res-array,$res-obj)
                           return ()
                           return ()
                           
   (:------------------------ AMLAW200 Union--------------------:)  
   let $orgIDs := fn:tokenize(firm:getOrganizationIDByAmLaw(),',')
   let $orgIDsByGlobal100 := fn:tokenize(firm:getOrganizationIDByGlobal100(),',')
   let $getOrganizationIDByUK50 := fn:tokenize(firm:getOrganizationIDByUK50(),',')
   let $getOrganizationIDByChina40 := fn:tokenize(firm:getOrganizationIDByChina40(),',')


   let $amlaw200data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                     cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$orgIDs),
                                                     cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($i)),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:PERCENT_LGBT_ATTORNEYS'),('','0')))
                                                     )))//nljlgbt:PERCENT_LGBT_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ AMLAW 100 Union--------------------:)  
   

   let $amlaw200data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                     cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$orgIDs),
                                                     cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'<=',100),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'')),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:PERCENT_LGBT_ATTORNEYS'),('','0')))
                                                     )))//nljlgbt:PERCENT_LGBT_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ :=json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ AMLAW 25 Union--------------------:)  
   

   let $amlaw200data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                     cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$orgIDs),
                                                     cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'<=',25),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'')),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:PERCENT_LGBT_ATTORNEYS'),('','0')))
                                                     )))//nljlgbt:PERCENT_LGBT_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 25'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()


	(:------------------------ AMLAW 2nd hundred Union--------------------:)  
   

   let $amlaw200data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                     cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$orgIDs),
                                                     cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'>',100),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'')),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:PERCENT_LGBT_ATTORNEYS'),('','0')))
                                                     )))//nljlgbt:PERCENT_LGBT_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()										


    
    (:------------------------ GLOBAL200 Union--------------------:)  
   
   let $global100data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                     cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$orgIDsByGlobal100),
                                                     cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($i)),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:PERCENT_LGBT_ATTORNEYS'),('','0')))
                                                     )))//nljlgbt:PERCENT_LGBT_ATTORNEYS/text())
						let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ GLOBAL 100 Union--------------------:)  
   
   let $global100data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                     cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$orgIDsByGlobal100),
                                                     cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'<=',100),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'')),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:PERCENT_LGBT_ATTORNEYS'),('','0')))
                                                     )))//nljlgbt:PERCENT_LGBT_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ GLOBAL 2nd Hundred Union--------------------:)  
   
   let $global100data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                     cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$orgIDsByGlobal100),
                                                     cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'>',100),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'')),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:PERCENT_LGBT_ATTORNEYS'),('','0')))
                                                     )))//nljlgbt:PERCENT_LGBT_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ UK 50 Union--------------------:)  
   
   let $global100data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                     cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$getOrganizationIDByUK50),
                                                     cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'<=',50),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'')),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:PERCENT_LGBT_ATTORNEYS'),('','0')))
                                                     )))//nljlgbt:PERCENT_LGBT_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 50'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()	

	(:------------------------ UK 100 Union--------------------:)  
   
   let $global100data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                     cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$getOrganizationIDByUK50),
                                                     cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'<=',100),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'')),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:PERCENT_LGBT_ATTORNEYS'),('','0')))
                                                     )))//nljlgbt:PERCENT_LGBT_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()	

  (:------------------------ China 45 Union--------------------:)  
   
   let $global100data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                     cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$getOrganizationIDByChina40),
                                                     cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($i)),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:NLJ_LGBT_RANK'),'')),
													 cts:not-query(cts:element-value-query(xs:QName('nljlgbt:PERCENT_LGBT_ATTORNEYS'),('','0')))
                                                     )))//nljlgbt:PERCENT_LGBT_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','China 45'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()																										
    
   return $res-array                    

};


declare function firm:SP_FIRMFemaleAttorneys($startYear,$endYear,$organizationID)
{
  let $res-array := json:array()
                      
  let $result := cts:search(/,
                  cts:and-query((
                       cts:directory-query("/LegalCompass/relational-data/organization/"),
                       cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),fn:tokenize($organizationID,','))
                       )))
  let $loopData := for $item in $result
                                                 
                      let $loopData1 := for $item1 in ($startYear to $endYear)
					  
						   let $diversitySC := cts:search(/,
                                            cts:and-query((
                                                 cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                 cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                 cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($item1))
                                                 )))  
                           let $res-obj := json:object()
						   let $organizationName := if(fn:not($item//organizations:ALM_NAME/text() ne '')) then $item//organizations:ORGANIZATION_NAME/text()
												else $item//organizations:ALM_NAME/text()
                           let $margin :=if($diversitySC//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text()) then firm:MLRoundingFunction(xs:float(xs:double($diversitySC//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text()) * 100), 2) else -1000
                           let $_ := (map:put($res-obj,'ORGANIZATION_ID',$item//organizations:ORGANIZATION_ID/text()),
                                      map:put($res-obj,'ORGANIZATION_NAME',$organizationName),
                                      map:put($res-obj,'PUBLISHYEAR',$item1),
                                      map:put($res-obj,'MARGIN',$margin)
                                      )
                           let $_ := json:array-push($res-array,$res-obj)
                           return ()
                           return()
                           
   (:------------------------ AMLAW200 Union--------------------:)  
   let $orgIDs := fn:tokenize(firm:getOrganizationIDByAmLaw(),',')
   let $orgIDsByGlobal100 := fn:tokenize(firm:getOrganizationIDByGlobal100(),',')
   let $orgIDsByUK50 := fn:tokenize(firm:getOrganizationIDByUK50(),',')
   let $orgIDsByChina40 := fn:tokenize(firm:getOrganizationIDByChina40(),',')
   let $amlaw200data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$orgIDs),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($i))
                                                     )))//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ AMLAW 100 Union--------------------:)  
   
   let $amlaw200data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$orgIDs),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),'<=',100),
													 cts:not-query(cts:element-value-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),''))
                                                     )))//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ AMLAW25 Union--------------------:)  
   
   let $amlaw200data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$orgIDs),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),'<=',25),
													 cts:not-query(cts:element-value-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),''))
                                                     )))//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 25'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ :=json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ AMLAW 2nd hundred Union--------------------:)  
   
   let $amlaw200data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$orgIDs),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),'>',100),
													 cts:not-query(cts:element-value-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),''))
                                                     )))//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()															
    
    (:------------------------ GLOBAL200 Union--------------------:)  
   
   let $global100data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$orgIDsByGlobal100),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($i))
                                                     )))//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj) 
                        return()

	(:------------------------ GLOBAL100 Union--------------------:)  
   
   let $global100data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$orgIDsByGlobal100),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),'<=',100),
													 cts:not-query(cts:element-value-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),''))
                                                     )))//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ GLOBAL 2nd hundred Union--------------------:)  
   
   let $global100data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$orgIDsByGlobal100),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),'>',100),
													 cts:not-query(cts:element-value-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),''))
                                                     )))//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ :=  json:array-push($res-array,$res-obj) 
                        return()										
    
    

   (:------------------------ UK 50 Union--------------------:)  
   
   let $uk50data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$orgIDsByUK50),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),'<=',50),
													 cts:not-query(cts:element-value-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),''))
                                                     )))//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 50'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ :=  json:array-push($res-array,$res-obj) 
                        return()

	(:------------------------ UK 100 Union--------------------:)  
   
   let $uk50data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$orgIDsByUK50),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),'<=',100),
													 cts:not-query(cts:element-value-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),''))
                                                     )))//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text())

                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ :=  json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ China 45 Union--------------------:)  
   
   let $uk50data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$orgIDsByChina40),
                                                     cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($i)),
													 cts:not-query(cts:element-value-query(xs:QName('FEMALE_SCORECARD:WOMEN_IN_LAW_RANK'),''))
                                                     )))//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text())
													 
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','China 45'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ :=  json:array-push($res-array,$res-obj)
                        return()																				
    
   return $res-array                    

};

declare function firm:GetFIRMMinorityAttorneys($startYear,$endYear,$organizationID)
{
  let $res-array := json:array()
                      
  let $result := cts:search(/,
                  cts:and-query((
                       cts:directory-query("/LegalCompass/relational-data/organization/"),
                       cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),fn:tokenize($organizationID,','))
                       )))

  let $loopData := for $item in $result
                                                 
                      let $loopData1 := for $item1 in ($startYear to $endYear)
					  
						   let $diversitySC := cts:search(/,
                                            cts:and-query((
                                                 cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                 cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                 cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($item1))
                                                 )))  
                           let $res-obj := json:object()
						   let $organizationName := if(fn:not($item//organizations:ALM_NAME/text() ne '')) then $item//organizations:ORGANIZATION_NAME/text()
												else $item//organizations:ALM_NAME/text()
                           let $margin :=if(xs:string($diversitySC//Diversity_Scorecard:MINORITY_PERCENTAGE/text()) ne '') then firm:MLRoundingFunction(xs:float(xs:double($diversitySC//Diversity_Scorecard:MINORITY_PERCENTAGE/text()) * 100), 2) else 0
                           let $_ := (map:put($res-obj,'ORGANIZATION_ID',$item//organizations:ORGANIZATION_ID/text()),
                                      map:put($res-obj,'ORGANIZATION_NAME',$organizationName),
                                      map:put($res-obj,'PUBLISHYEAR',$item1),
                                      map:put($res-obj,'MARGIN',$margin)
                                      )
                           let $_ := if($diversitySC != '') then json:array-push($res-array,$res-obj) else()
                           return ()
                           return()
                           
   (:------------------------ AMLAW200 Union--------------------:)  
   let $orgIDs := fn:tokenize(firm:getOrganizationIDByAmLaw(),',')
   let $orgIDsByGlobal100 := fn:tokenize(firm:getOrganizationIDByGlobal100(),',')
   let $orgIDsByUK50 := fn:tokenize(firm:getOrganizationIDByUK50(),',')
   let $orgIDsByChina40 := fn:tokenize(firm:getOrganizationIDByChina40(),',')
   let $amlaw200data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$orgIDs),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($i))
                                                     )))//Diversity_Scorecard:MINORITY_PERCENTAGE/text())
                        let $margin :=fn:format-number(xs:float($result * 100), '#,##0.00')
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ :=if($result ne 0) then json:array-push($res-array,$res-obj) else ()
                        return()

	(:------------------------ AMLAW 100 Union--------------------:)  
   
   let $amlaw200data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$orgIDs),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),'<=',100),
													 cts:not-query(cts:element-value-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),''))
                                                     )))//Diversity_Scorecard:MINORITY_PERCENTAGE/text())
                        let $margin :=fn:format-number(xs:float($result * 100), '#,##0.00')
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ :=if($result ne 0) then json:array-push($res-array,$res-obj) else ()
                        return()

	(:------------------------ AMLAW25 Union--------------------:)  
   
   let $amlaw200data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$orgIDs),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),'<=',25),
													 cts:not-query(cts:element-value-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),''))
                                                     )))//Diversity_Scorecard:MINORITY_PERCENTAGE/text())
                        let $margin :=fn:format-number(xs:float($result * 100), '#,##0.00')
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 25'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ :=if($result ne 0) then json:array-push($res-array,$res-obj) else ()
                        return()

	(:------------------------ AMLAW 2nd hundred Union--------------------:)  
   
   let $amlaw200data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$orgIDs),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),'>',100),
													 cts:not-query(cts:element-value-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),''))
                                                     )))//Diversity_Scorecard:MINORITY_PERCENTAGE/text())
                        let $margin :=fn:format-number(xs:float($result * 100), '#,##0.00')
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ :=if($result ne 0) then json:array-push($res-array,$res-obj) else ()
                        return()															
    
    (:------------------------ GLOBAL200 Union--------------------:)  
   
   let $global100data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$orgIDsByGlobal100),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($i))
                                                     )))//Diversity_Scorecard:MINORITY_PERCENTAGE/text())
                        let $margin :=fn:format-number(xs:float($result * 100), '#,##0.00')
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := if($result ne 0) then json:array-push($res-array,$res-obj) else ()
                        return()

	(:------------------------ GLOBAL100 Union--------------------:)  
   
   let $global100data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$orgIDsByGlobal100),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),'<=',100),
													 cts:not-query(cts:element-value-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),''))
                                                     )))//Diversity_Scorecard:MINORITY_PERCENTAGE/text())
                        let $margin :=fn:format-number(xs:float($result * 100), '#,##0.00')
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := if($result ne 0) then json:array-push($res-array,$res-obj) else ()
                        return()

	(:------------------------ GLOBAL 2nd hundred Union--------------------:)  
   
   let $global100data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$orgIDsByGlobal100),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),'>',100),
													 cts:not-query(cts:element-value-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),''))
                                                     )))//Diversity_Scorecard:MINORITY_PERCENTAGE/text())
                        let $margin :=fn:format-number(xs:float($result * 100), '#,##0.00')
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := if($result ne 0) then json:array-push($res-array,$res-obj) else ()
                        return()										
    
    

   (:------------------------ UK 50 Union--------------------:)  
   
   let $uk50data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$orgIDsByUK50),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),'<=',50),
													 cts:not-query(cts:element-value-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),''))
                                                     )))//Diversity_Scorecard:MINORITY_PERCENTAGE/text())
                        let $margin :=if($result) then fn:format-number(xs:float($result * 100), '#,##0.00') else -1000
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 50'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ UK 100 Union--------------------:)  
   
   let $uk50data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$orgIDsByUK50),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($i)),
													 cts:element-range-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),'<=',100),
													 cts:not-query(cts:element-value-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),''))
                                                     )))//Diversity_Scorecard:MINORITY_PERCENTAGE/text())

                        let $margin :=fn:format-number(xs:float($result * 100), '#,##0.00')
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := if($result ne 0) then json:array-push($res-array,$res-obj) else ()
                        return()

	(:------------------------ China 45 Union--------------------:)  
   
   let $uk50data :=  for $i in (xs:integer($startYear) to xs:integer($endYear))
                         
                         let $result :=avg(cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$orgIDsByChina40),
                                                     cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($i)),
													 cts:not-query(cts:element-value-query(xs:QName('Diversity_Scorecard:DIVERSITY_RANK'),''))
                                                     )))//Diversity_Scorecard:MINORITY_PERCENTAGE/text())
													 
                        let $margin :=fn:format-number(xs:float($result * 100), '#,##0.00')
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','China 45'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'MARGIN',$margin)
                                                )
                        let $_ := if($result ne 0) then json:array-push($res-array,$res-obj) else ()
                        return()																				
    
   return $res-array                    

};

declare function firm:SP_FIRMRPLBYYEAR($startYear,$endYear,$organizationID)
{
  let $res-array := json:array()
                      
  let $result := cts:search(/,
                  cts:and-query((
                       cts:directory-query("/LegalCompass/relational-data/organization/"),
                       cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),fn:tokenize($organizationID,','))
                       )))
  let $loopData := for $item in $result
                       
                      
                      let $loopData1 := for $item1 in ($startYear to $endYear)
                      
                        let $amLaw200Year :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                     cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($item1))
                                                  )))//AMLAW_200:RPL/text()

						 let $global100 := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                         cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($item1)))))[1]
                      
                        let $uk50 := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                         cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($item1)))))[1]						  
												  
                     
                       let $res-obj := json:object()

					   let $rpl := if($amLaw200Year) then $amLaw200Year
									else if($global100//Global_100:REVENUE_PER_LAWYER/text() != '') then $global100//Global_100:REVENUE_PER_LAWYER/text()
									else if($uk50//UK_50:RPL_DOLLAR/text() ne '') then $uk50//UK_50:RPL_DOLLAR/text() else()
                      
					    let $organizationName := if(fn:not($item//organizations:ALM_NAME/text() ne '')) then $item//organizations:ORGANIZATION_NAME/text()
												else $item//organizations:ALM_NAME/text()

						let $_ := (map:put($res-obj,'ORGANIZATION_ID',$item//organizations:ORGANIZATION_ID/text()),
                                  map:put($res-obj,'ORGANIZATION_NAME',$organizationName),
                                  map:put($res-obj,'PUBLISHYEAR',$item1),
                                  map:put($res-obj,'REVENUE',$rpl)
                                  )
                       let $_ :=json:array-push($res-array,$res-obj) 
                       return ()
                       return()
   (:------------------------ AMLAW200 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i))
                                                                )))//AMLAW_200:RPL/text())
                         
                         let $changes := if($rpl) then fn:round-half-to-even($rpl,2) else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'REVENUE',$changes),
												map:put($res-obj,'VALUE',$changes)
                                                )
                        let $_ := if($changes) then json:array-push($res-array,$res-obj) else()
                        return()

	 (:------------------------ AMLAW 100 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
											cts:and-query((
												cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
												cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
												cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',100),
												cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
											)))//AMLAW_200:RPL/text())
                         
                         let $changes := if($rpl) then fn:round-half-to-even($rpl,2) else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'REVENUE',$changes),
												map:put($res-obj,'VALUE',$changes)
                                                )
                        let $_ := if($changes) then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ AMLAW 25 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
											cts:and-query((
												cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
												cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
												cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',25),
												cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
											)))//AMLAW_200:RPL/text())
                         
                         let $changes := if($rpl) then fn:round-half-to-even($rpl,2) else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 25'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'REVENUE',$changes),
												map:put($res-obj,'VALUE',$changes)
                                                )
                        let $_ := if($changes) then json:array-push($res-array,$res-obj) else()
                        return()	

	(:------------------------ AMLAW 2nd Hundred Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
											cts:and-query((
												cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
												cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
												cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'>',100),
												cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
											)))//AMLAW_200:RPL/text())
                         
                         let $changes := if($rpl) then fn:round-half-to-even($rpl,2) else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'REVENUE',$changes),
												map:put($res-obj,'VALUE',$changes)
                                                )
                        let $_ := if($changes) then json:array-push($res-array,$res-obj) else()
                        return()															
                        
    (:------------------------ GLOBAL_200 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i))
                                                                )))//Global_100:REVENUE_PER_LAWYER/text())
                         
                         let $changes := if($rpl) then fn:round-half-to-even($rpl,2) else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'REVENUE',$changes),
												map:put($res-obj,'VALUE',$changes)
                                                )
                        let $_ := if($changes) then json:array-push($res-array,$res-obj) else() 
                        return()

	(:------------------------ GLOBAL_100 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                                )))//Global_100:REVENUE_PER_LAWYER/text())
                         
                         let $changes := if($rpl) then fn:round-half-to-even($rpl,2) else 0
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'REVENUE',$changes),
												map:put($res-obj,'VALUE',$changes)
                                                )
                        let $_ := if($changes) then json:array-push($res-array,$res-obj) else() 
                        return()

	(:------------------------ GLOBAL 2nd Hundred Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                                )))//Global_100:REVENUE_PER_LAWYER/text())
                         
                         let $changes := if($rpl) then fn:round-half-to-even($rpl,2) else -1000
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'REVENUE',$changes),
												map:put($res-obj,'VALUE',$changes)
                                                )
                        let $_ :=  json:array-push($res-array,$res-obj)
                        return()	

	(:------------------------ UK_50 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('UK_50:UK_50_RANK'),'<=',50),
																   cts:not-query(cts:element-value-query(xs:QName('UK_50:UK_50_RANK'),''))
                                                                )))//UK_50:RPL_DOLLAR/text())
                         
                         let $changes := if($rpl) then fn:round-half-to-even($rpl,2) else -1000
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 50'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'REVENUE',$changes),
												map:put($res-obj,'VALUE',$changes)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()		

	(:------------------------ UK_100 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('UK_50:UK_50_RANK'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('UK_50:UK_50_RANK'),''))
                                                                )))//UK_50:RPL_DOLLAR/text())
                         
                         let $changes := if($rpl) then fn:round-half-to-even($rpl,2) else -1000
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'REVENUE',$changes),
												map:put($res-obj,'VALUE',$changes)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ China 45 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $rpl :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
                                                                   cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($i))
                                                                )))//CHINA_40:REVENUE_PER_LAWYER/text())
                         
                         let $changes := if($rpl) then fn:round-half-to-even($rpl,2) else -1000
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','China 45'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'REVENUE',$changes),
												map:put($res-obj,'VALUE',$changes)
                                                )
                        let $_ :=json:array-push($res-array,$res-obj)
                        return()																			

   return $res-array                    

};



declare function firm:getOrganizationIDByAmLaw()
{
  let $maxYear := cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text()
 let $result := fn:string-join(fn:distinct-values(cts:search(/,
                             cts:and-query((
                                 cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                 cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(max($maxYear)))
                                 )))//AMLAW_200:ORGANIZATION_ID/text()),',')
  return $result                                
};

declare function firm:getOrganizationIDByUK50()
{
  let $maxYear := cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/')
                      )))//UK_50:PUBLISHYEAR/text()
 let $result := fn:string-join(fn:distinct-values(cts:search(/,
                             cts:and-query((
                                 cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                 cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(max($maxYear)))
                                 )))//UK_50:ORGANIZATION_ID/text()),',')
  return $result                                
};

declare function firm:getOrganizationIDByChina40()
{
  let $maxYear := cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/CHINA_40/')
                      )))//CHINA_40:PUBLISHYEAR/text()
 let $result := fn:string-join(fn:distinct-values(cts:search(/,
                             cts:and-query((
                                 cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
                                 cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string(max($maxYear)))
                                 )))//CHINA_40:ORGANIZATION_ID/text()),',')
  return $result                                
};

declare function firm:getOrganizationIDByGlobal100()
{
  let $maxYear := cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                      )))//Global_100:PUBLISHYEAR/text()
                     
 let $result := fn:string-join(fn:distinct-values(cts:search(/,
                             cts:and-query((
                                 cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                 cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(max($maxYear)))
                                 )))//Global_100:ORGANIZATION_ID/text()),',')
  return $result                                
};


declare function firm:SP_GETFIRMLEVERAGE($startYear,$endYear,$organizationID)
{
  let $res-array := json:array()
                      
  let $result := cts:search(/,
                  cts:and-query((
                       cts:directory-query("/LegalCompass/relational-data/organization/"),
                       cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),fn:tokenize($organizationID,','))
                       )))
					   
  let $loopData := for $item in $result
                       
                      let $loopData1 := for $item1 in ($startYear to $endYear)
					  
					  let $amLaw200Year :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                     cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($item1))
                                                  )))
                      
                       let $amLaw200YearPreYear :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                     cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($item1)-1)))))
                        let $global100 :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                     cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
													 cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'')),
                                                     cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($item1)))))
													 
						let $global100PreYear :=  cts:search(/,
                                                      cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                        cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
														cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'')),
                                                     cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($item1)-1)))))
													 
                       let $uk50 := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                         cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($item1)))))[1]
                       let $uk50preYear := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                         cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(xs:integer($item1)-1)))))[1]
					   
					   let $leverage := if(fn:not($amLaw200Year ne '') and fn:not($global100 ne '') and fn:not($uk50 != '')) then -1000 else
					   					if($amLaw200Year//AMLAW_200:LEVERAGE/text() ne '') then $amLaw200Year//AMLAW_200:LEVERAGE/text() 
					   				   else if($global100//Global_100:NUM_EQUITY_PARTNERS/text() ne '') then firm:MLRoundingFunction((xs:double($global100//Global_100:NUM_LAWYERS/text()) - xs:double($global100//Global_100:NUM_EQUITY_PARTNERS/text())) div xs:double($global100//Global_100:NUM_EQUITY_PARTNERS/text()),1)
									   else if($uk50//UK_50:LEVERAGE/text() ne '') then $uk50//UK_50:LEVERAGE/text() else()	  
					   
                       let $leveragePreYear := if(fn:not($amLaw200Year ne '') and fn:not($global100 ne '') and fn:not($uk50 != '')) then -1000 else
					   						   if($amLaw200YearPreYear//AMLAW_200:LEVERAGE/text() ne '') then $amLaw200YearPreYear//AMLAW_200:LEVERAGE/text() 
					   						   else if($global100PreYear//Global_100:NUM_EQUITY_PARTNERS/text() ne '') then firm:MLRoundingFunction((xs:double($global100PreYear//Global_100:NUM_LAWYERS/text()) - xs:double($global100PreYear//Global_100:NUM_EQUITY_PARTNERS/text())) div xs:double($global100PreYear//Global_100:NUM_EQUITY_PARTNERS/text()),1)
											   else if($uk50preYear//UK_50:LEVERAGE/text() ne '') then $uk50preYear//UK_50:LEVERAGE/text() else()
                       let $difference := $leverage - $leveragePreYear
                       let $changes := if($leveragePreYear ne 0 and $leverage ne 0) then firm:MLRoundingFunction((($difference div $leveragePreYear)*100),2) else 0
                       let $res-obj := json:object()
                       let $organizationName := if(fn:not($item//organizations:ALM_NAME/text() ne '')) then $item//organizations:ORGANIZATION_NAME/text()
												else $item//organizations:ALM_NAME/text()
					  
                       let $_ := (map:put($res-obj,'ORGANIZATION_ID',$item//organizations:ORGANIZATION_ID/text()),
                                  map:put($res-obj,'ORGANIZATION_NAME',$organizationName),
                                  map:put($res-obj,'PUBLISHYEAR',$item1),
                                  map:put($res-obj,'CHANGE',$leverage)
                                  )
                       let $_ :=json:array-push($res-array,$res-obj)
                       return ()
                       return()
   (:------------------------ AMLAW200 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                        let $leverage :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i))
                                                                )))//AMLAW_200:LEVERAGE/text())
                        let $leveragePreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($i)-1))
                                                                )))//AMLAW_200:LEVERAGE/text())
                          
                         
                        let $difference := $leverage - $leveragePreYear
                        let $changes := if($leveragePreYear ne 0 and $leverage ne 0) then fn:format-number(xs:float(($difference div $leveragePreYear)*100), '#,##0.00') else ''
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CHANGE',fn:round-half-to-even($leverage,2))
                                                )
                        let $_ := if($changes ne '') then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ AMLAW 25 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                        let $leverage :=  avg(cts:search(/,
												cts:and-query((
													cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
													cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',25),
													cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
												)))//AMLAW_200:LEVERAGE/text())
                        let $leveragePreYear :=  avg(cts:search(/,
														cts:and-query((
															cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
															cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
															cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',25),
															cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
														)))//AMLAW_200:LEVERAGE/text())
                          
                         
                        let $difference := $leverage - $leveragePreYear
                        let $changes := if($leveragePreYear ne 0 and $leverage ne 0) then fn:format-number(xs:float(($difference div $leveragePreYear)*100), '#,##0.00') else ''
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 25'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CHANGE',fn:round-half-to-even($leverage,2))
                                                )
                        let $_ := if($changes ne '') then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ AMLAW 100 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                        let $leverage :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																	cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',100),
																	cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:LEVERAGE/text())
                        let $leveragePreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:LEVERAGE/text())
                          
                         
                        let $difference := $leverage - $leveragePreYear
                        let $changes := if($leveragePreYear ne 0 and $leverage ne 0) then fn:format-number(xs:float(($difference div $leveragePreYear)*100), '#,##0.00') else ''
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CHANGE',fn:round-half-to-even($leverage,2))
                                                )
                        let $_ := if($changes ne '') then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ AMLAW Second Hundred Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                        let $leverage :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																	cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'>',100),
																	cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:LEVERAGE/text())
                        let $leveragePreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:LEVERAGE/text())
                          
                         
                        let $difference := $leverage - $leveragePreYear
                        let $changes := if($leveragePreYear ne 0 and $leverage ne 0) then fn:format-number(xs:float(($difference div $leveragePreYear)*100), '#,##0.00') else ''
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CHANGE',fn:round-half-to-even($leverage,2))
                                                )
                        let $_ := if($changes ne '') then json:array-push($res-array,$res-obj) else()
                        return()															
	
	(:------------------------ Global 200 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
   
                        let $numberOfLawyers :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i))
                                                                )))//Global_100:NUM_LAWYERS/text())
                        let $nep :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i))
                                                                )))//Global_100:NUM_EQUITY_PARTNERS/text())
                          
                         let $numberOfLawyersPreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($i)-1))
                                                                )))//Global_100:NUM_LAWYERS/text())
                        let $nepPreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($i)-1))
                                                                )))//Global_100:NUM_EQUITY_PARTNERS/text())
                          
						
						let $leverage := if($nep ne 0) then fn:round-half-to-even(($numberOfLawyers - $nep) div $nep,1) else 0
						let $leveragePreYear := fn:round-half-to-even(($numberOfLawyersPreYear - $nepPreYear) div $nepPreYear,1)
						
                        let $margin :=if($leverage ne 0 and $leveragePreYear ne 0) then fn:round-half-to-even((($leverage - $leveragePreYear) div $leveragePreYear) * 100,2) else 0
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CHANGE',$leverage)
                                                )
                        let $_ :=if($leverage ne 0 and $leveragePreYear ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ Global 100 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
   
                        let $numberOfLawyers :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                                )))//Global_100:NUM_LAWYERS/text())
                        let $nep :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                                )))//Global_100:NUM_EQUITY_PARTNERS/text())
                          
                         let $numberOfLawyersPreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:element-range-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                                )))//Global_100:NUM_LAWYERS/text())
                        let $nepPreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:element-range-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                                )))//Global_100:NUM_EQUITY_PARTNERS/text())
                          
						
						let $leverage := if($nep ne 0) then fn:round-half-to-even(($numberOfLawyers - $nep) div $nep,1) else 0
						let $leveragePreYear := fn:round-half-to-even(($numberOfLawyersPreYear - $nepPreYear) div $nepPreYear,1)
						
                        let $margin :=if($leverage ne 0 and $leveragePreYear ne 0) then fn:round-half-to-even((($leverage - $leveragePreYear) div $leveragePreYear) * 100,2) else 0
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CHANGE',$leverage)
                                                )
                        let $_ :=if($leverage ne 0 and $leveragePreYear ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

  (:------------------------ Global 2nd hundred Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
   
                        let $numberOfLawyers :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                                )))//Global_100:NUM_LAWYERS/text())
                        let $nep :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                                )))//Global_100:NUM_EQUITY_PARTNERS/text())
                          
                         let $numberOfLawyersPreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:element-range-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                                )))//Global_100:NUM_LAWYERS/text())
                        let $nepPreYear :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                                   cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(xs:integer($i)-1)),
																   cts:element-range-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                                )))//Global_100:NUM_EQUITY_PARTNERS/text())
                          
						
						let $leverage := if($nep ne 0) then fn:round-half-to-even(($numberOfLawyers - $nep) div $nep,1) else 0
						let $leveragePreYear := fn:round-half-to-even(($numberOfLawyersPreYear - $nepPreYear) div $nepPreYear,1)
						
                        let $margin :=if($leverage ne 0 and $leveragePreYear ne 0) then fn:round-half-to-even((($leverage - $leveragePreYear) div $leveragePreYear) * 100,2) else 0
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CHANGE',$leverage)
                                                )
                        let $_ :=if($leverage ne 0 and $leveragePreYear ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

  (:------------------------ UK_50 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $leverage :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($i)),
																   cts:not-query(cts:element-value-query(xs:QName("UK_50:UK_50_RANK"),"")),
																   cts:element-range-query(xs:QName("UK_50:UK_50_RANK"),"<=",50)
                                                                )))//UK_50:LEVERAGE/text())

                      
                         
                         let $changes :=if($leverage) then $leverage else -1000
						 
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 50'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CHANGE',$changes)
                                                )
                        let $_ := if(xs:double($changes) ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ UK_100 Union--------------------:)  
   
   let $global100data := for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $leverage :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($i)),
																   cts:not-query(cts:element-value-query(xs:QName("UK_50:UK_50_RANK"),"")),
																   cts:element-range-query(xs:QName("UK_50:UK_50_RANK"),"<=",100)
                                                                )))//UK_50:LEVERAGE/text())

                      
                         
                         let $changes :=if($leverage) then $leverage else -1000
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CHANGE',$changes)
                                                )

                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ China 45 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $numberOfLawyers :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
                                                                   cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($i))
                                                                )))//CHINA_40:FIRMWIDE_LAWYERS/text())
                        let $nep :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
                                                                   cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($i))
                                                                )))//CHINA_40:EQUITY_PARTNERS/text())
                          
                         
						let $leverage := if($nep) then fn:round-half-to-even(($numberOfLawyers - $nep) div $nep,1) else -1000
						
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','China 45'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'CHANGE',$leverage)
                                                )

                        let $_ := json:array-push($res-array,$res-obj)
                        return()	
   return $res-array                    

};

declare function firm:GetFirmProfitMargin($startYear,$endYear,$organizationID)
{
  let $res-array := json:array()
                      
  let $result := cts:search(/,
                  cts:and-query((
                       cts:directory-query("/LegalCompass/relational-data/organization/"),
                       cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),fn:tokenize($organizationID,','))
                       )))
  let $loopData := for $item in $result
                       
                       let $loopData1 := for $item1 in ($startYear to $endYear)
					   
					   let $amLaw200Year :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                     cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($item1))
                                                  )))
					   
					   let $global100 := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                         cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($item1)))))
                     
					  let $uk50 := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                         cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($item1)))))
					   
					   let $margin := if($amLaw200Year//AMLAW_200:GROSS_REVENUE/text() ne '') then firm:MLRoundingFunction((xs:double($amLaw200Year//AMLAW_200:NET_OPERATING_INCOME/text()) div xs:double($amLaw200Year//AMLAW_200:GROSS_REVENUE/text())),2) * 100 
									  else if($global100//Global_100:GROSS_REVENUE/text() ne '' and $global100//Global_100:NUM_EQUITY_PARTNERS/text() ne '' and $global100//Global_100:PPP/text() ne '') then firm:MLRoundingFunction(((xs:double($global100//Global_100:PPP/text()) * xs:double($global100//Global_100:NUM_EQUITY_PARTNERS/text())) div xs:double($global100//Global_100:GROSS_REVENUE/text())) ,2) * 100
									  else if($uk50//UK_50:PROFIT_MARGIN/text()) then ($uk50//UK_50:PROFIT_MARGIN/text() * 100)
									  else -1000
                       let $margin1 :=fn:round($margin)
                       let $res-obj := json:object()

                       let $organizationName := if(fn:not($item//organizations:ALM_NAME/text() ne '')) then $item//organizations:ORGANIZATION_NAME/text()
												else $item//organizations:ALM_NAME/text()

                       let $_ := (map:put($res-obj,'ORGANIZATION_ID',$item//organizations:ORGANIZATION_ID/text()),
                                  map:put($res-obj,'ORGANIZATION_NAME',$organizationName),
                                  map:put($res-obj,'PUBLISHYEAR',$item1),
                                  map:put($res-obj,'Margin',$margin1)
                                  )
                       let $_ := json:array-push($res-array,$res-obj)
                       return ()
                       return()
					   
   (:------------------------ AMLAW200 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                        let $grossRevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i))
                                                                )))//AMLAW_200:GROSS_REVENUE/text())
                        let $netIncome :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i))
                                                                )))//AMLAW_200:NET_OPERATING_INCOME/text())
                          
                         
                        let $margin :=if($grossRevenue ne 0) then fn:round(($netIncome div $grossRevenue)*100) else 0
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'Margin',$margin)
                                                )
                        let $_ :=if($margin ne 0) then json:array-push($res-array,$res-obj) else()
                        return()


	(:------------------------ AMLAW 100 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                        let $grossRevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:GROSS_REVENUE/text())
                        let $netIncome :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:NET_OPERATING_INCOME/text())
                          
                         
                        let $margin :=if($grossRevenue ne 0) then fn:round(($netIncome div $grossRevenue)*100) else 0
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'Margin',$margin)
                                                )
                        let $_ :=if($margin ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ AMLAW 25 Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                        let $grossRevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',25),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:GROSS_REVENUE/text())
                        let $netIncome :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'<=',25),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:NET_OPERATING_INCOME/text())
                          
                         
                        let $margin :=if($grossRevenue ne 0) then fn:round(($netIncome div $grossRevenue)*100) else 0
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law 25'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'Margin',$margin)
                                                )
                        let $_ :=if($margin ne 0) then json:array-push($res-array,$res-obj) else()
                        return()

	(:------------------------ AMLAW 2nd Hundred Union--------------------:)  
   
   let $amlaw200data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                        let $grossRevenue :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:GROSS_REVENUE/text())
                        let $netIncome :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                                   cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($i)),
																   cts:element-range-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'>',100),
																   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                                )))//AMLAW_200:NET_OPERATING_INCOME/text())
                          
                         
                        let $margin :=if($grossRevenue ne 0) then fn:round(($netIncome div $grossRevenue)*100) else 0
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Am Law Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'Margin',$margin)
                                                )
                        let $_ :=if($margin ne 0) then json:array-push($res-array,$res-obj) else()
                        return()															
						
	(:------------------------ Global 200 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
   
                        let $res := cts:search(/,
										cts:and-query((	
											cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
											,cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i))
											,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
										)))[1]

						let $profitMargin := fn:avg(cts:search(/,
												cts:and-query((	
													cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
													,cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i))
													,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
												)))//Global_100:PROFIT_MARGIN/text())
		
		let $Margin :=if(fn:not($res ne '')) then -1000
					  else $profitMargin									
																
                       
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 200'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'Margin',$Margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ Global 100 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
   
                        let $res := cts:search(/,
										cts:and-query((	
											cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
											,cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i))
											,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
											,cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",100)
										)))[1]

						let $profitMargin := fn:avg(cts:search(/,
												cts:and-query((	
													cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
													,cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i))
													,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
													,cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),"<=",100)
												)))//Global_100:PROFIT_MARGIN/text())
		
		let $Margin :=if(fn:not($res ne '')) then -1000
					  else $profitMargin									
																
                       
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'Margin',$Margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ Global 2nd hundred Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
   
                        let $res := cts:search(/,
										cts:and-query((	
											cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
											,cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i))
											,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
											,cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),">",100)
										)))[1]

						let $profitMargin := fn:avg(cts:search(/,
												cts:and-query((	
													cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
													,cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($i))
													,cts:not-query(cts:element-value-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),""))
													,cts:element-range-query(xs:QName("Global_100:RANK_BY_GROSS_REVENUE"),">",100)
												)))//Global_100:PROFIT_MARGIN/text())
		
		let $Margin :=if(fn:not($res ne '')) then -1000
					  else $profitMargin									
																
                       
                        let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','Global Second Hundred'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'Margin',$Margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ UK_50 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $Margin :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($i)),
																   cts:not-query(cts:element-value-query(xs:QName("UK_50:UK_50_RANK"),"")),
																   cts:element-range-query(xs:QName("UK_50:UK_50_RANK"),"<=",50)
                                                                )))//UK_50:PROFIT_MARGIN/text())

                         let $Margin := if($Margin) then $Margin * 100 else -1000

                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 50'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'Margin',$Margin)
                                                )

                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ UK_100 Union--------------------:)  
   
   let $global100data := for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $Margin :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                                   cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($i))
                                                                )))//UK_50:PROFIT_MARGIN/text())
						 let $Margin := if($Margin) then $Margin * 100 else -1000
                         
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','UK 100'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'Margin',$Margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()

	(:------------------------ China 45 Union--------------------:)  
   
   let $global100data :=for $i in (xs:integer($startYear) to xs:integer($endYear))
                         let $Margin :=  avg(cts:search(/,
                                                              cts:and-query((
                                                                   cts:directory-query("/LegalCompass/relational-data/surveys/CHINA_40/"),
                                                                   cts:element-value-query(xs:QName('CHINA_40:PUBLISHYEAR'),xs:string($i))
                                                                )))//CHINA_40:PROFIT_MARGIN/text())

                        let $Margin := if($Margin) then $Margin * 100 else -1000
                         let $res-obj := json:object()
                                     let $_ := (map:put($res-obj,'ORGANIZATION_ID',0),
                                                map:put($res-obj,'ORGANIZATION_NAME','China 45'),
                                                map:put($res-obj,'PUBLISHYEAR',$i),
                                                map:put($res-obj,'Margin',$Margin)
                                                )
                        let $_ := json:array-push($res-array,$res-obj)
                        return()											

                        
   
   return $res-array                    

};


(:-------------- Graphing ---------------:)

declare function firm:getProfitmargin($organizationIDs,$year)
{

  let $maxYearGlobal100 := max(fn:distinct-values(cts:search(/,
                              cts:and-query((
                                cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                              )))//Global_100:PUBLISHYEAR/text()))

  for $item in fn:tokenize($organizationIDs,',')
  let $data := if(cts:search(/,
                    cts:and-query((
                    cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
                    cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item)
                   ,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
                    cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                    )))//AMLAW_200:PROFIT_MARGIN/text() ne '') then cts:search(/,
                                    cts:and-query((
                                    cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
                                    cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item)
                                   ,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
                                    cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                    )))//AMLAW_200:PROFIT_MARGIN/text() else (((cts:search(/,
                                            cts:and-query((
                                            cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
                                            cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                            cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearGlobal100)),
                                            cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                            )))//Global_100:PPP/text()) * (cts:search(/,
                                            cts:and-query((
                                            cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
                                            cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                            cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearGlobal100)),
                                            cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                            )))//Global_100:NUM_EQUITY_PARTNERS/text())) div (cts:search(/,
														cts:and-query((
														cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
														cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
														cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearGlobal100)),
														cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
														)))//Global_100:GROSS_REVENUE/text())) * 100
                                            
     return $data
                                            
  };

  declare function firm:getPPP($organizationIDs,$year)
{

  let $maxYearGlobal100 := max(fn:distinct-values(cts:search(/,
                              cts:and-query((
                                cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                              )))//Global_100:PUBLISHYEAR/text()))

  for $item in fn:tokenize($organizationIDs,',')
  let $data := if(cts:search(/,
                    cts:and-query((
                    cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
                    cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item)
                   ,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
                    )))[1]//AMLAW_200:PPP/text() ne '') then cts:search(/,
                                    cts:and-query((
                                    cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
                                    cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item)
                                   ,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))
                                    )))[1]//AMLAW_200:PPP/text() else cts:search(/,
                                            cts:and-query((
                                            cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
                                            cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                            cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearGlobal100))
                                            )))[1]//Global_100:PPP/text()
                                            
    return $data
                                            
  };
  
declare function firm:getRPL($organizationIDs,$year)
{
  let $maxYearGlobal100 := max(fn:distinct-values(cts:search(/,
                              cts:and-query((
                                cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                              )))//Global_100:PUBLISHYEAR/text()))

  for $item in fn:tokenize($organizationIDs,',')
  let $data := if(cts:search(/,
                    cts:and-query((
                    cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
                    cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item)
                   ,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
					cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                    )))[1]//AMLAW_200:RPL/text() ne '') then cts:search(/,
                                    cts:and-query((
                                    cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
                                    cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item)
                                   ,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
									cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                    )))[1]//AMLAW_200:RPL/text() else cts:search(/,
                                            cts:and-query((
                                            cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
                                            cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                            cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearGlobal100)),
											cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                            )))[1]//Global_100:REVENUE_PER_LAWYER/text()
                                            
                                            return $data
                                            
  };
  
declare function firm:getCPL($organizationIDs,$year)
{
	let $maxYearGlobal100 := max(fn:distinct-values(cts:search(/,
                              cts:and-query((
                                cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                              )))//Global_100:PUBLISHYEAR/text()))

    for $item in fn:tokenize($organizationIDs,',')
		  let $grossRevenue := if(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
							cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item)
						   ,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))(:,
							cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'')):)
							)))[1]//AMLAW_200:GROSS_REVENUE/text() ne '') then cts:search(/,
											cts:and-query((
											cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
											cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item)
										   ,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))(:,
											cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'')):)
											)))[1]//AMLAW_200:GROSS_REVENUE/text() else cts:search(/,
													cts:and-query((
													cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearGlobal100))(:,
													cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'')):)
													)))[1]//Global_100:GROSS_REVENUE/text()
		  let $netIncome := cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
								cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item)
							   ,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))(:,
								cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'')):)
								)))[1]//AMLAW_200:NET_OPERATING_INCOME/text() 
								
		   let $noOfLawyers := if(cts:search(/,
									cts:and-query((
									cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
									cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item)
								   ,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))(:,
									cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'')):)
									)))[1]//AMLAW_200:NUM_OF_LAWYERS/text() ne '') then cts:search(/,
													cts:and-query((
													cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
													cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item)
												   ,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year))(:,
													cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),'')):)
													)))[1]//AMLAW_200:NUM_OF_LAWYERS/text() else cts:search(/,
															cts:and-query((
															cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
															cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
															cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearGlobal100))(:,
															cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'')):)
															)))[1]//Global_100:NUM_LAWYERS/text()
		  let $grossRevenue := if($grossRevenue ne '') then $grossRevenue else 0
		  
		  let $noOfLawyers := if($noOfLawyers ne '') then $noOfLawyers else 0
		  (:let $netIncome := if($netIncome ne '') then $netIncome else 0:)
		  let $result := (xs:integer($grossRevenue) - xs:integer($netIncome)) div xs:integer($noOfLawyers)

		  (:if($noOfLawyers ne 0) then (xs:integer($grossRevenue) - xs:integer($netIncome)) div xs:integer($noOfLawyers) else 0:)
		  return $result
                                            
  };
  
  declare function firm:getEquityPartner($organizationIDs,$year)
{
	let $maxYearGlobal100 := max(fn:distinct-values(cts:search(/,
                              cts:and-query((
                                cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                              )))//Global_100:PUBLISHYEAR/text()))

    for $item in fn:tokenize($organizationIDs,',')
		  let $nomOfEquityPartner := if(cts:search(/,
							cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
							cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item)
						   ,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
							cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
							)))[1]//AMLAW_200:NUM_EQ_PARTNERS/text() ne '') then cts:search(/,
											cts:and-query((
											cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
											cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item)
										   ,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
											cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
											)))[1]//AMLAW_200:NUM_EQ_PARTNERS/text() else cts:search(/,
													cts:and-query((
													cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
													cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
													cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearGlobal100)),
													cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
													)))[1]//Global_100:NUM_EQUITY_PARTNERS/text()
													
		  let $totalPartner := cts:search(/,
								cts:and-query((
								cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
								cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item)
							   ,cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
								cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
								)))[1]//AMLAW_200:TOTAL_PARTNERS/text() 
								
		   
		  let $equityPartner := (xs:double($nomOfEquityPartner) div xs:double($totalPartner)) * 100
		  return $equityPartner
                                            
  };
  
declare function firm:rplChange5gMed($organizationIDs,$year)
{
	let $maxYearGlobal100 := max(fn:distinct-values(cts:search(/,
                              cts:and-query((
                                cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                              )))//Global_100:PUBLISHYEAR/text()))

    for $item in fn:tokenize($organizationIDs,',')
		  let $global100GrossRevenue := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearGlobal100)),
													   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                    )))[1]//Global_100:GROSS_REVENUE/text()
													
		  let $global100GrossRevenuePre5Year := cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearGlobal100 - 4)),
													   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                    )))[1]//Global_100:GROSS_REVENUE/text()    
			
		  (:let $result := (xs:double($global100GrossRevenue) div xs:double($global100GrossRevenuePre5Year)) * 100:)
		  let $result := xs:double(($global100GrossRevenue div $global100GrossRevenuePre5Year))
		  return if ($result) then (math:pow($result,0.20) - 1) * 100 else ()
                                            
  };
  
  declare function firm:rplChange5Med($organizationIDs,$year)
{
  for $item in fn:tokenize($organizationIDs,',')
		  let $amLawGrossRevenue :=cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
													   cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item),
													   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                    )))[1]//AMLAW_200:GROSS_REVENUE/text()
													
		  let $amLawGrossRevenuePre5Year := cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year - 4)),
													   cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item),
													   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                    )))//AMLAW_200:GROSS_REVENUE/text()
								
		  let $result := xs:double(($amLawGrossRevenue div $amLawGrossRevenuePre5Year))
		  return if ($result) then (math:pow($result,0.20) - 1) * 100 else ()
                                            
  };
 
  declare function firm:rplChange1gMed($organizationIDs,$year)
{
  for $item in fn:tokenize($organizationIDs,',')
		  let $global100GrossRevenue := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year)),
													   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                    )))[1]//Global_100:GROSS_REVENUE/text()
													
		  let $global100GrossRevenuePre5Year := cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year - 1)),
													   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),''))
                                                    )))[1]//Global_100:GROSS_REVENUE/text()    
			
		  (:let $result := (xs:double($global100GrossRevenue) div xs:double($global100GrossRevenuePre5Year)) * 100:)
		  let $result := xs:double(($global100GrossRevenue div $global100GrossRevenuePre5Year))
		  return if ($result) then (math:pow($result,1) - 1) * 100 else ()
                                            
  };
  
  declare function firm:rplChange1Med($organizationIDs,$year)
{
  for $item in fn:tokenize($organizationIDs,',')
		  let $amLawGrossRevenue :=cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year)),
													   cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item),
													   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                    )))[1]//AMLAW_200:GROSS_REVENUE/text()
													
		  let $amLawGrossRevenuePre5Year := cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($year - 1)),
													   cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item),
													   cts:not-query(cts:element-value-query(xs:QName('AMLAW_200:AMLAW200_RANK'),''))
                                                    )))//AMLAW_200:GROSS_REVENUE/text()
								
		  let $result := xs:double(($amLawGrossRevenue div $amLawGrossRevenuePre5Year))
		  return if ($result) then (math:pow($result,1) - 1) * 100 else ()
                                            
  };
  
declare function firm:MedianQuery($column1,$column2)
{
  let $organizationIDs :="1,22,25,30,42,57,78,100,123,151,152,153,167,173,179,227,244,247,269,280,294,310,311,321,325,504,1777,1817,1842,2225,2349,2457,2868,3523,3557,4180,6108,7953,34378,34934,37857,39264,57015,58388,67275,123005,160872,164775,164779,11,13,29,77,113,134,144,147,155,157,207,213,218,222,235,252,271,290,297,299,307,316,327,330,353,450,469,560,1732,1774,1823,2136,2201,3462,6421,7570,10996,53070,160796,164769,164778,2,14,20,21,88,90,95,112,141,177,185,210,211,220,223,250,273,289,298,433,463,1764,1781,1830,2140,2598,32770,34366,34644,34761,37738,43622,53023,63776,160873,164757,164766,164771,4,5,24,32,53,81,85,102,119,143,162,163,183,184,193,215,230,240,283,284,285,296,306,308,326,329,331,416,499,1673,1721,1728,1798,1815,2458,2717,3452,5906,6154,10489,21496,34795,53044,65477,123481,141913,8,17,35,37,38,48,55,61,63,69,75,175,206,212,232,239,242,248,257,264,268,276,279,293,318,328,336,392,453,486,516,550,1684,1702,1750,1757,1760,1833,2106,2129,2186,2205,2301,2483,3294,3451,7975,8002,10040,20039,27633,164773,41,50,52,56,71,80,93,99,101,107,136,140,165,178,188,199,200,214,228,233,241,254,265,266,275,277,291,292,322,333,381,512,1738,2246,3541,3556,4385,4849,6425,27634,27687,34379,34627,34642,53077,95132,119382,139992,141901,163674,164765,3,27,36,49,58,64,105,109,115,124,145,154,158,171,172,176,182,186,195,203,216,221,225,236,259,267,287,319,332,385,520,1696,1739,1744,1752,1822,1862,2107,2164,2168,2187,2243,2254,2955,3884,5149,6103,7558,45666,48980,160874,164767,164768,164772,12,15,19,39,60,62,65,73,79,92,103,106,111,118,126,156,166,174,187,197,204,208,237,256,272,274,295,312,313,317,320,324,338,438,2387,2431,2486,2503,2568,2606,3240,4555,5920,6641,7563,7970,20044,20054,21639,25139,44683,53003,53080,159995,160875,164770"
  
  let $femaleSCID := '123,78,151,311,321,100,244,269,247,152,227,25,325,167,173,153,2868,22,1,37857,179,280,57,330,1774,147,299,271,207,222,157,144,11,235,13,1823,6421,113,213,218,3462,307,155,29,297,77,290,316,327,250,20,433,273,141,95,210,220,1781,14,463,112,21,1830,2598,88,90,43622,298,185,177,4,81,3452,162,163,306,85,53,326,1721,215,5,285,183,283,32,143,240,308,329,284,296,193,1728,102,24,230,331,499,1673,119,38,48,336,232,2106,264,61,69,486,257,293,2205,268,248,35,3294,318,328,175,242,55,8,550,63,206,212,279,17,276,75,1750,56,214,333,165,188,199,52,71,512,50,3541,136,265,200,1738,291,93,99,241,107,277,178,233,140,80,36,49,172,158,105,145,48980,182,203,221,287,115,236,259,7558,5149,124,58,1752,109,154,176,186,3,171,267,216,64,332,2503,106,65,5920,166,272,187,174,15,19,92,208,79,103,62,295,204,111,237,256,320,7970,12,126,312,317,118,313,73,2568,39,274,197'
  
 
  
  let $orgIDs := fn:tokenize($organizationIDs,',')
  let $res-array := json:array()
  
  let $item1 := max(fn:distinct-values(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text()))
 
    let $maxYearGlobal100 := max(fn:distinct-values(cts:search(/,
                              cts:and-query((
                                cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                              )))//Global_100:PUBLISHYEAR/text()))


    let $maxYearNLJ := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/')
                      )))//nlj250:PUBLISHYEAR/text())

	let $maxYearNLGBT := max(cts:search(/,
						cts:and-query((
						cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_LGBT/')
						)))//nljlgbt:PUBLISHYEAR/text())	

	let $maxYearfemaleSC :=  max(cts:search(/,
						cts:and-query((
						cts:directory-query('/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/')
						)))//FEMALE_SCORECARD:PUBLISHYEAR/text())	
						
	let $maxYeardiversitySC :=  max(cts:search(/,
						cts:and-query((
						cts:directory-query('/LegalCompass/relational-data/surveys/Diversity_Scorecard/')
						)))//Diversity_Scorecard:PUBLISHYEAR/text())								  
                              
  let $rplChangeAmLaw := firm:rplChange5Med($organizationIDs,$item1)
  let $rplChangeGlobal := firm:rplChange5gMed($organizationIDs,$maxYearGlobal100)
					   
					   let $rplChange1AmLaw := firm:rplChange1Med($organizationIDs,$item1)
					   let $rplChange1Global := firm:rplChange1gMed($organizationIDs,$maxYearGlobal100)
					   
                       let $rplchange5Min :=  min($rplChangeAmLaw) 
                       let $rplchange1Min :=min($rplChange1AmLaw)
					   
                       let $rplchange5gMin :=min($rplChangeGlobal)
                       let $rplchange1gMin :=min($rplChange1Global) 
                       
                       let $rplchange5Max :=max($rplChangeAmLaw)
                       let $rplchange1Max :=max($rplChange1AmLaw)
					   
                       let $rplchange5gMax := max($rplChangeGlobal)
                       let $rplchange1gMax := max($rplChange1Global)

						
                       let $rplchange5Med := math:median($rplChangeAmLaw)
                       let $rplchange1Med :=math:median($rplChange1AmLaw) 
					   
                       let $rplchange5gMed := math:median($rplChangeGlobal) 
					   let $rplchange1gMed :=math:median($rplChange1Global)        
                       
                              
                                     (:-------- Max Year----------:)
                                             let $amLaw200 := cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													 cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$orgIDs),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($item1))
                                                  )))
                                                  
                                             let $diversitySC := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
														 cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),fn:tokenize($femaleSCID,',')),
                                                         cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($maxYeardiversitySC))
                                                         )))  
                                             
                                             let $femaleSC := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
														 cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),fn:tokenize($femaleSCID,',')),
                                                         cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($maxYearfemaleSC))
                                                         )))
                                            
                                            let $nlj_lgbt := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
														 cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),fn:tokenize($femaleSCID,',')),
                                                         cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($maxYearNLGBT))
                                                         )))
                                                         
                                           let $global100 := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
														 cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$orgIDs),
                                                         cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'')),
                                                         cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearGlobal100))
                                                         )))
                                                         
                                           
                                          let $res-obj := json:object()
                                          (:--------- Max Year ---------------:)
                                          let $rplMed := math:median(firm:getRPL($organizationIDs,xs:string($item1)))
                                          let $rplMin := min(firm:getRPL($organizationIDs,xs:string($item1)))
                                          let $rplMax := max(firm:getRPL($organizationIDs,xs:string($item1)))
										  
                                          let $grossRevenueMin := if($amLaw200//AMLAW_200:GROSS_REVENUE/text() != '') then min($amLaw200//AMLAW_200:GROSS_REVENUE/text()) else min($global100//Global_100:GROSS_REVENUE/text())
                                          let $grossRevenueMax := if($amLaw200//AMLAW_200:GROSS_REVENUE/text() != '') then max($amLaw200//AMLAW_200:GROSS_REVENUE/text()) else max($global100//Global_100:GROSS_REVENUE/text())
										  let $grossRevenueMed := if($amLaw200//AMLAW_200:GROSS_REVENUE/text() != '') then math:median(($amLaw200//AMLAW_200:GROSS_REVENUE/text())) else math:median(($global100//Global_100:GROSS_REVENUE/text()))
										  
                                          let $numOfLawyersMin := if($amLaw200//AMLAW_200:NUM_OF_LAWYERS/text() != '') then min($amLaw200//AMLAW_200:NUM_OF_LAWYERS/text()) else min($global100//Global_100:NUM_LAWYERS/text())
                                          let $numOfLawyersMax := if($amLaw200//AMLAW_200:NUM_OF_LAWYERS/text() != '') then max($amLaw200//AMLAW_200:NUM_OF_LAWYERS/text()) else max($global100//Global_100:NUM_LAWYERS/text())
										  let $numOfLawyersMed := if($amLaw200//AMLAW_200:NUM_OF_LAWYERS/text() != '') then math:median(($amLaw200//AMLAW_200:NUM_OF_LAWYERS/text())) else math:median(($global100//Global_100:NUM_LAWYERS/text()))
										  
                                          let $profitMarginMin := min(firm:getProfitmargin($organizationIDs,xs:string($item1)))
                                                              
                                          let $profitMarginMax := max(firm:getProfitmargin($organizationIDs,xs:string($item1)))
										  
										  let $profitMarginMed := math:median(firm:getProfitmargin($organizationIDs,xs:string($item1)))
															   
                                          let $leverageMin := if($amLaw200//AMLAW_200:LEVERAGE/text() != '') then min($amLaw200//AMLAW_200:LEVERAGE/text()) 
                                                               else ((min($global100//Global_100:NUM_LAWYERS/text()) - min($global100//Global_100:NUM_EQUITY_PARTNERS/text())) div min($global100//Global_100:NUM_EQUITY_PARTNERS/text()))
                                          let $leverageMax := if($amLaw200//AMLAW_200:LEVERAGE/text() != '') then max($amLaw200//AMLAW_200:LEVERAGE/text()) 
                                                               else ((max($global100//Global_100:NUM_LAWYERS/text()) - max($global100//Global_100:NUM_EQUITY_PARTNERS/text())) div max($global100//Global_100:NUM_EQUITY_PARTNERS/text()))
										  let $leverageMed := if($amLaw200//AMLAW_200:LEVERAGE/text() != '') then math:median(($amLaw200//AMLAW_200:LEVERAGE/text())) 
                                                               else ((math:median(($global100//Global_100:NUM_LAWYERS/text())) - math:median(($global100//Global_100:NUM_EQUITY_PARTNERS/text()))) div math:median(($global100//Global_100:NUM_EQUITY_PARTNERS/text())))				   
															   
                                          let $pppMin := min(firm:getPPP($femaleSCID,xs:string($item1)))
                                          let $pppMax := max(firm:getPPP($femaleSCID,xs:string($item1)))
										  let $pppMed := math:median(firm:getPPP($femaleSCID,xs:string($item1)))
										  
                                          let $numEquityPartnerMin := if($amLaw200//AMLAW_200:NUM_EQ_PARTNERS/text() != '') then min($amLaw200//AMLAW_200:NUM_EQ_PARTNERS/text()) 
                                                                   else min($global100//Global_100:NUM_EQUITY_PARTNERS/text())
                                          let $numEquityPartnerMax := if($amLaw200//AMLAW_200:NUM_EQ_PARTNERS/text() != '') then max($amLaw200//AMLAW_200:NUM_EQ_PARTNERS/text()) 
                                                                   else max($global100//Global_100:NUM_EQUITY_PARTNERS/text())
										  let $numEquityPartnerMed := if($amLaw200//AMLAW_200:NUM_EQ_PARTNERS/text() != '') then math:median(($amLaw200//AMLAW_200:NUM_EQ_PARTNERS/text())) 
                                                                   else math:median(($global100//Global_100:NUM_EQUITY_PARTNERS/text()))
										   
										   
										  
										   
                                          let $cplMin := min(firm:getCPL($femaleSCID,xs:string($item1)))
                                          let $cplMax := max(firm:getCPL($femaleSCID,xs:string($item1)))
										  let $cplMed := math:median(firm:getCPL($femaleSCID,xs:string($item1)))
										  
                                          let $ppp1Min := min($amLaw200//AMLAW_200:NET_OPERATING_INCOME/text()) div min($amLaw200//AMLAW_200:TOTAL_PARTNERS/text())
                                          let $ppp1Max := max($amLaw200//AMLAW_200:NET_OPERATING_INCOME/text()) div max($amLaw200//AMLAW_200:TOTAL_PARTNERS/text())
										  let $ppp1Med := math:median(($amLaw200//AMLAW_200:NET_OPERATING_INCOME/text())) div math:median(($amLaw200//AMLAW_200:TOTAL_PARTNERS/text()))
										  
                                          let $equityPartnerMin := min(firm:getEquityPartner($organizationIDs,xs:string($item1)))
                                          let $equityPartnerMax := max(firm:getEquityPartner($organizationIDs,xs:string($item1)))
										  let $equityPartnerMed := math:median((firm:getEquityPartner($organizationIDs,xs:string($item1))))
										  
                                          let $minorityPerMin := min($diversitySC//Diversity_Scorecard:MINORITY_PERCENTAGE/text()) * 100
                                          let $minorityPerMax := max($diversitySC//Diversity_Scorecard:MINORITY_PERCENTAGE/text()) * 100
										  let $minorityPerMed := math:median(($diversitySC//Diversity_Scorecard:MINORITY_PERCENTAGE/text())) * 100
										  
                                          let $femaleAttorneyMin := min($femaleSC//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text()) * 100
                                          let $femaleAttorneyMax := max($femaleSC//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text()) * 100
										  let $femaleAttorneyMed := math:median(($femaleSC//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text())) * 100
										  
                                          let $lgbtAttorneyMin := min($nlj_lgbt//nljlgbt:PERCENT_LGBT_ATTORNEYS/text()) * 100
                                          let $lgbtAttorneyMax := max($nlj_lgbt//nljlgbt:PERCENT_LGBT_ATTORNEYS/text()) * 100
										  let $lgbtAttorneyMed := math:median(($nlj_lgbt//nljlgbt:PERCENT_LGBT_ATTORNEYS/text())) * 100
										  
                                          let $revenueGrowth1Min := if($amLaw200//AMLAW_200:GROSS_REVENUE/text() != '') then $rplchange1Min else $rplchange1gMin
                                          let $revenueGrowth5Min := if($amLaw200//AMLAW_200:GROSS_REVENUE/text() != '') then $rplchange5Min else $rplchange5gMin
										  
                                          let $revenueGrowth1Max := if($amLaw200//AMLAW_200:GROSS_REVENUE/text() != '') then $rplchange1Max else $rplchange1gMax
                                          let $revenueGrowth5Max := if($amLaw200//AMLAW_200:GROSS_REVENUE/text() != '') then $rplchange5Max else $rplchange5gMax
                                          let $revenueGrowth1Med := if($amLaw200//AMLAW_200:GROSS_REVENUE/text() != '') then $rplchange1Med else $rplchange1gMed
                                          let $revenueGrowth5Med := if($amLaw200//AMLAW_200:GROSS_REVENUE/text() != '') then $rplchange5Med else $rplchange5gMed
                                          
	  let $MAX_VARIABLE1 := if($column1 eq 'Am Law 200 rank') then max($amLaw200//AMLAW_200:AMLAW200_RANK/text()) else
						 if($column1 eq 'Global 200 rank') then max($global100//Global_100:RANK_BY_GROSS_REVENUE/text()) else
						 if($column1 eq 'Revenue Per Lawyer') then $rplMax else
						 if($column1 eq 'Cost Per Lawyer') then $cplMax else
						 if($column1 eq 'Profit Margin') then $profitMarginMax else
						 if($column1 eq '% Turnover') then $profitMarginMax else
						 if($column1 eq 'Leverage') then $leverageMax else
						 if($column1 eq 'Profit Per Partner') then $ppp1Max else
						 if($column1 eq 'Profit Per Equity Partner') then $pppMax else
						 if($column1 eq '% of Equity Partners') then $equityPartnerMax else
						 if($column1 eq '% of Minority Attorneys') then $minorityPerMax else
						 if($column1 eq '% of Female Attorneys') then $femaleAttorneyMax else
						 if($column1 eq '% of LGBT Attorneys') then $lgbtAttorneyMax else
						 if($column1 eq 'Growth in Minority Attorneys') then max($diversitySC//Diversity_Scorecard:TOTAL_MINORITY_ATTORNEYS/text()) else
						 if($column1 eq 'Growth in Female Partners') then max($femaleSC//FEMALE_SCORECARD:FEMALE_PARTNERS/text()) else
						 if($column1 eq 'Revenue Growth (1 year)') then $revenueGrowth1Max else
						 if($column1 eq 'Revenue Growth (5 years)') then $revenueGrowth5Max else $grossRevenueMax
                                          
                                          let $MAX_VARIABLE2 := if($column2 eq 'Am Law 200 rank') then max($amLaw200//AMLAW_200:AMLAW200_RANK/text()) else
                                                             if($column2 eq 'Global 200 rank') then max($global100//Global_100:RANK_BY_GROSS_REVENUE/text()) else
                                                             if($column2 eq 'Revenue Per Lawyer') then $rplMax else
                                                             if($column2 eq 'Cost Per Lawyer') then $cplMax else
                                                             if($column2 eq 'Profit Margin') then $profitMarginMax else
                                                             if($column2 eq '% Turnover') then $profitMarginMax else
                                                             if($column2 eq 'Leverage') then $leverageMax else
                                                             if($column2 eq 'Profit Per Partner') then $ppp1Max else
                                                             if($column2 eq 'Profit Per Equity Partner') then $pppMax else
                                                             if($column2 eq '% of Equity Partners') then $equityPartnerMax else
                                                             if($column2 eq '% of Minority Attorneys') then $minorityPerMax else
                                                             if($column2 eq '% of Female Attorneys') then $femaleAttorneyMax else
                                                             if($column2 eq '% of LGBT Attorneys') then $lgbtAttorneyMax else
                                                             if($column2 eq 'Growth in Minority Attorneys') then max($diversitySC//Diversity_Scorecard:TOTAL_MINORITY_ATTORNEYS/text()) else
                                                             if($column2 eq 'Growth in Female Partners') then max($femaleSC//FEMALE_SCORECARD:FEMALE_PARTNERS/text()) else
                                                             if($column2 eq 'Revenue Growth (1 year)') then $revenueGrowth1Max else
                                                             if($column2 eq 'Revenue Growth (5 years)') then $revenueGrowth5Max else $grossRevenueMax
                                                             
                                          let $MIN_VARIABLE1 := if($column1 eq 'Am Law 200 rank') then min($amLaw200//AMLAW_200:AMLAW200_RANK/text()) else
                                                             if($column1 eq 'Global 200 rank') then min($global100//Global_100:RANK_BY_GROSS_REVENUE/text()) else
                                                             if($column1 eq 'Revenue Per Lawyer') then $rplMin else
                                                             if($column1 eq 'Cost Per Lawyer') then $cplMin else
                                                             if($column1 eq 'Profit Margin') then $profitMarginMin else
                                                             if($column1 eq '% Turnover') then $profitMarginMin else
                                                             if($column1 eq 'Leverage') then $leverageMin else
                                                             if($column1 eq 'Profit Per Partner') then $ppp1Min else
                                                             if($column1 eq 'Profit Per Equity Partner') then $pppMin else
                                                             if($column1 eq '% of Equity Partners') then $equityPartnerMin else
                                                             if($column1 eq '% of Minority Attorneys') then $minorityPerMin else
                                                             if($column1 eq '% of Female Attorneys') then $femaleAttorneyMin else
                                                             if($column1 eq '% of LGBT Attorneys') then $lgbtAttorneyMin else
                                                             if($column1 eq 'Growth in Minority Attorneys') then min($diversitySC//Diversity_Scorecard:TOTAL_MINORITY_ATTORNEYS/text()) else
                                                             if($column1 eq 'Growth in Female Partners') then min($femaleSC//FEMALE_SCORECARD:FEMALE_PARTNERS/text()) else
                                                             if($column1 eq 'Revenue Growth (1 year)') then $revenueGrowth1Min else
                                                             if($column1 eq 'Revenue Growth (5 years)') then $revenueGrowth5Min else $grossRevenueMin
                                          
                                          let $MIN_VARIABLE2 := if($column2 eq 'Am Law 200 rank') then min($amLaw200//AMLAW_200:AMLAW200_RANK/text()) else
                                                             if($column2 eq 'Global 200 rank') then min($global100//Global_100:RANK_BY_GROSS_REVENUE/text()) else
                                                             if($column2 eq 'Revenue Per Lawyer') then $rplMin else
                                                             if($column2 eq 'Cost Per Lawyer') then $cplMin else
                                                             if($column2 eq 'Profit Margin') then $profitMarginMin else
                                                             if($column2 eq '% Turnover') then $profitMarginMin else
                                                             if($column2 eq 'Leverage') then $leverageMin else
                                                             if($column2 eq 'Profit Per Partner') then $ppp1Min else
                                                             if($column2 eq 'Profit Per Equity Partner') then $pppMin else
                                                             if($column2 eq '% of Equity Partners') then $equityPartnerMin else
                                                             if($column2 eq '% of Minority Attorneys') then $minorityPerMin else
                                                             if($column2 eq '% of Female Attorneys') then $femaleAttorneyMin else
                                                             if($column2 eq '% of LGBT Attorneys') then $lgbtAttorneyMin else
                                                             if($column2 eq 'Growth in Minority Attorneys') then min($diversitySC//Diversity_Scorecard:TOTAL_MINORITY_ATTORNEYS/text()) else
                                                             if($column2 eq 'Growth in Female Partners') then min($femaleSC//FEMALE_SCORECARD:FEMALE_PARTNERS/text()) else
                                                             if($column2 eq 'Revenue Growth (1 year)') then $revenueGrowth1Min else
                                                             if($column2 eq 'Revenue Growth (5 years)') then $revenueGrowth5Min else $grossRevenueMax                   
                                         
                                           let $MEDIAN_Variable1 := if($column1 eq 'Am Law 200 rank') then math:median(($amLaw200//AMLAW_200:AMLAW200_RANK/text())) else
                                                             if($column1 eq 'Global 200 rank') then math:median(($global100//Global_100:RANK_BY_GROSS_REVENUE/text())) else
                                                             if($column1 eq 'Revenue Per Lawyer') then $rplMed else
                                                             if($column1 eq 'Cost Per Lawyer') then $cplMed else
                                                             if($column1 eq 'Profit Margin') then $profitMarginMed else
                                                             if($column1 eq '% Turnover') then $profitMarginMed else
                                                             if($column1 eq 'Leverage') then $leverageMed else
                                                             if($column1 eq 'Profit Per Partner') then $ppp1Med else
                                                             if($column1 eq 'Profit Per Equity Partner') then $pppMed else
                                                             if($column1 eq '% of Equity Partners') then $equityPartnerMed else
                                                             if($column1 eq '% of Minority Attorneys') then $minorityPerMed else
                                                             if($column1 eq '% of Female Attorneys') then $femaleAttorneyMed else
                                                             if($column1 eq '% of LGBT Attorneys') then $lgbtAttorneyMed else
                                                             if($column1 eq 'Growth in Minority Attorneys') then math:median(($diversitySC//Diversity_Scorecard:TOTAL_MINORITY_ATTORNEYS/text())) else
                                                             if($column1 eq 'Growth in Female Partners') then math:median(($femaleSC//FEMALE_SCORECARD:FEMALE_PARTNERS/text())) else
                                                             if($column1 eq 'Revenue Growth (1 year)') then $revenueGrowth1Med else
                                                             if($column1 eq 'Revenue Growth (5 years)') then $revenueGrowth5Med else $grossRevenueMed
                                          
                                          let $MEDIAN_Variable2 := if($column2 eq 'Am Law 200 rank') then math:median(($amLaw200//AMLAW_200:AMLAW200_RANK/text())) else
                                                             if($column2 eq 'Global 200 rank') then math:median(($global100//Global_100:RANK_BY_GROSS_REVENUE/text())) else
                                                             if($column2 eq 'Revenue Per Lawyer') then $rplMed else
                                                             if($column2 eq 'Cost Per Lawyer') then $cplMed else
                                                             if($column2 eq 'Profit Margin') then $profitMarginMed else
                                                             if($column2 eq '% Turnover') then $profitMarginMed else
                                                             if($column2 eq 'Leverage') then $leverageMed else
                                                             if($column2 eq 'Profit Per Partner') then $ppp1Med else
                                                             if($column2 eq 'Profit Per Equity Partner') then $pppMed else
                                                             if($column2 eq '% of Equity Partners') then $equityPartnerMed else
                                                             if($column2 eq '% of Minority Attorneys') then $minorityPerMed else
                                                             if($column2 eq '% of Female Attorneys') then $femaleAttorneyMed else
                                                             if($column2 eq '% of LGBT Attorneys') then $lgbtAttorneyMed else
                                                             if($column2 eq 'Growth in Minority Attorneys') then math:median(($diversitySC//Diversity_Scorecard:TOTAL_MINORITY_ATTORNEYS/text())) else
                                                             if($column2 eq 'Growth in Female Partners') then math:median(($femaleSC//FEMALE_SCORECARD:FEMALE_PARTNERS/text())) else
                                                             if($column2 eq 'Revenue Growth (1 year)') then $revenueGrowth1Med else
                                                             if($column2 eq 'Revenue Growth (5 years)') then $revenueGrowth5Med else $grossRevenueMed
                                                             
                                          let $_ := (map:put($res-obj,'PUBLISHYEAR',$item1),
                                                     map:put($res-obj,'Med_VARIABLE1',$MEDIAN_Variable1),
                                                     map:put($res-obj,'Med_VARIABLE2',$MEDIAN_Variable2),
                                                     map:put($res-obj,'Max_VARIABLE1',$MAX_VARIABLE1),
                                                     map:put($res-obj,'Min_VARIABLE1',$MIN_VARIABLE1),
                                                     map:put($res-obj,'Max_VARIABLE2',$MAX_VARIABLE2),
                                                     map:put($res-obj,'Min_VARIABLE2',$MIN_VARIABLE2)
                                                     )
                                       
                                        let $_ := json:array-push($res-array,$res-obj)
  return $res-array
};


declare function firm:CombinedQuery($organizationID,$column1,$column2)
{
  let $res-array := json:array()
  
  let $maxYear := fn:distinct-values(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text())
 
  let $maxYearGlobal100 := fn:distinct-values(cts:search(/,
                              cts:and-query((
                                cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                              )))//Global_100:PUBLISHYEAR/text())

  let $maxYearNLJ := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/')
                      )))//nlj250:PUBLISHYEAR/text())

	let $maxYearNLGBT := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_LGBT/')
                      )))//nljlgbt:PUBLISHYEAR/text())	

	 let $maxYearfemaleSC :=  max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/')
                      )))//FEMALE_SCORECARD:PUBLISHYEAR/text())	
					  
	 let $maxYeardiversitySC :=  max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Diversity_Scorecard/')
                      )))//Diversity_Scorecard:PUBLISHYEAR/text())	

	 let $maxYearUK50 := fn:distinct-values(cts:search(/,
                              cts:and-query((
                                cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/')
                              )))//UK_50:PUBLISHYEAR/text())				  							  

  						  
  
  let $result := cts:search(/,
                  cts:and-query((
                       cts:directory-query("/LegalCompass/relational-data/organization/"),
                       cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),fn:tokenize($organizationID,',')),
                       cts:element-value-query(xs:QName('organizations:ORGANIZATION_TYPE_ID'),'1')
                       )))
                       
  let $loopData :=for $item in $result
  
                       let $amLawGrossRevenue := sum(cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                       cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(max($maxYear)))
                                                    )))//AMLAW_200:GROSS_REVENUE/text())
                                                    
                       let $amLawGrossRevenuePre5Year := sum(cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                       cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(max($maxYear)-4))
                                                    )))//AMLAW_200:GROSS_REVENUE/text())   
                                                    
                       let $amLawGrossRevenuePre1Year := sum(cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                       cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(max($maxYear)-1))
                                                    )))//AMLAW_200:GROSS_REVENUE/text())      
                       let $global100GrossRevenue := sum(cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                       cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(max($maxYearGlobal100)))
                                                    )))//Global_100:GROSS_REVENUE/text())
                                                    
                       let $global100GrossRevenuePre5Year := sum(cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                       cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(max($maxYearGlobal100) - 4))
                                                    )))//Global_100:GROSS_REVENUE/text())    
                                                    
                       let $global100GrossRevenuePre1Year := sum(cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                       cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(max($maxYearGlobal100) - 1))
                                                    )))//Global_100:GROSS_REVENUE/text()) 
                                                    
                       let $rplchange5 :=if($amLawGrossRevenuePre5Year ne 0) then firm:rplChange5Med($item//organizations:ORGANIZATION_ID/text(),max($maxYear)) else 0
                       let $rplchange1 :=if($amLawGrossRevenuePre1Year  ne 0) then firm:rplChange1Med($item//organizations:ORGANIZATION_ID/text(),max($maxYear)) else 0
					   
                       let $rplchange5g :=if($global100GrossRevenuePre5Year  ne 0) then firm:rplChange5gMed($item//organizations:ORGANIZATION_ID/text(),max($maxYear)) else 0
                       let $rplchange1g :=if($global100GrossRevenuePre1Year  ne 0) then firm:rplChange1gMed($item//organizations:ORGANIZATION_ID/text(),max($maxYear)) else 0
                       
                       (:------------ Max Year -------------:)
                       let $amLaw200 := cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                     cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(max($maxYear)))
                                                  )))

											let $uk50 := cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                     cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(max($maxYear)))
                                                  )))	  
                                                  
                                             let $diversitySC := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                         cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($maxYeardiversitySC))
                                                         )))  
                                             
                                             let $femaleSC := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                         cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($maxYearfemaleSC))
                                                         )))
                                            
                                            let $nlj_lgbt := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                         cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($maxYearNLGBT))
                                                         )))
                                                         
                                           let $global100 := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                         cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'')),
                                                         cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(max($maxYearGlobal100)))
                                                         )))
                                                         
                                          let $res-obj := json:object()
                                          let $rpl := if($amLaw200//AMLAW_200:RPL/text() ne '') then $amLaw200//AMLAW_200:RPL/text() 
														else if($global100//Global_100:REVENUE_PER_LAWYER/text()) then $global100//Global_100:REVENUE_PER_LAWYER/text()
														else $uk50//UK_50:RPL_DOLLAR/text()

                                          let $grossRevenue := if($amLaw200//AMLAW_200:GROSS_REVENUE/text() ne '') then $amLaw200//AMLAW_200:GROSS_REVENUE/text() 
										  					   else if($global100//Global_100:GROSS_REVENUE/text()) then $global100//Global_100:GROSS_REVENUE/text()
															   else $uk50//UK_50:GROSS_REVENUE_DOLLAR/text()

                                          let $numOfLawyers := if($amLaw200//AMLAW_200:NUM_OF_LAWYERS/text() ne '') then $amLaw200//AMLAW_200:NUM_OF_LAWYERS/text() 
										  					   else if($global100//Global_100:NUM_LAWYERS/text()) then $global100//Global_100:NUM_LAWYERS/text()
																 else $uk50//UK_50:NUMBER_OF_LAWYERS/text()

                                          let $profitMargin := if($amLaw200//AMLAW_200:PROFIT_MARGIN/text() ne '') then $amLaw200//AMLAW_200:PROFIT_MARGIN/text() 
                                                               else if($global100) then (($global100//Global_100:PPP/text() * $global100//Global_100:NUM_EQUITY_PARTNERS/text()) div $global100//Global_100:GROSS_REVENUE/text()) * 100
															   else $uk50//UK_50:PROFIT_MARGIN/text() * 100

                                          let $leverage := if($amLaw200//AMLAW_200:LEVERAGE/text() ne '') then $amLaw200//AMLAW_200:LEVERAGE/text() 
                                                               else if($global100) then ((xs:integer($global100//Global_100:NUM_LAWYERS/text()) - xs:integer($global100//Global_100:NUM_EQUITY_PARTNERS/text())) div xs:integer($global100//Global_100:NUM_EQUITY_PARTNERS/text()))
															   else $uk50//UK_50:LEVERAGE/text()

                                          let $ppp := if($amLaw200//AMLAW_200:PPP/text() ne '') then $amLaw200//AMLAW_200:PPP/text() 
										  			  else if($global100//Global_100:PPP/text()) then $global100//Global_100:PPP/text()
														else $uk50//UK_50:PPP_DOLLAR/text()

                                          let $numEquityPartner := if($amLaw200//AMLAW_200:NUM_EQ_PARTNERS/text() ne '') then $amLaw200//AMLAW_200:NUM_EQ_PARTNERS/text() 
                                                                   else if($global100//Global_100:NUM_EQUITY_PARTNERS/text()) then $global100//Global_100:NUM_EQUITY_PARTNERS/text() 
																   else $uk50//UK_50:NUMBER_OF_EQ_PARTNERS/text()
                                          
										  let $netOperationIncome := if($amLaw200//AMLAW_200:NET_OPERATING_INCOME/text()) then $amLaw200//AMLAW_200:NET_OPERATING_INCOME/text()
										  							 else if($global100) then ($global100//Global_100:PPP/text() * $global100//Global_100:NUM_EQUITY_PARTNERS/text())
																	 else $uk50//UK_50:PPP_DOLLAR/text() * $uk50//UK_50:NUMBER_OF_EQ_PARTNERS/text()

										  let $noofLawyers := if($amLaw200//AMLAW_200:NUM_OF_LAWYERS/text() ne '') then $amLaw200//AMLAW_200:NUM_OF_LAWYERS/text() 
										  					  else if($global100//Global_100:NUM_LAWYERS/text()) then $global100//Global_100:NUM_LAWYERS/text()
																else $uk50//UK_50:NUMBER_OF_LAWYERS/text()
										  
                                          let $cpl := (xs:integer($grossRevenue) - xs:integer($netOperationIncome)) div xs:integer($noofLawyers)
                                         
                                          let $ppp1 := $netOperationIncome div $noofLawyers
                                         
                                          let $equityPartner := xs:double($numEquityPartner) div xs:double($amLaw200//AMLAW_200:TOTAL_PARTNERS/text())
                                          let $minorityPer := xs:double($diversitySC//Diversity_Scorecard:MINORITY_PERCENTAGE/text()) * 100
                                         
                                          let $femaleAttorney := xs:double($femaleSC//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text()) * 100
                                         
                                         
                                          let $lgbtAttorney := xs:double($nlj_lgbt//nljlgbt:PERCENT_LGBT_ATTORNEYS/text()) * 100                         
                                          
										  (:---------- Max Year -1 ------------:)
                                          let $amLaw200Pre := cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                     cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string(max($maxYear) - 1))
                                                  )))

										  let $uk50Pre := cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/c/"),
                                                     cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string(max($maxYear) - 1))
                                                  )))		  
                                                  
                                             let $diversitySCPre := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                         cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($maxYeardiversitySC - 1))
                                                         )))  
                                             
                                             let $femaleSCPre := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                         cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($maxYearfemaleSC - 1))
                                                         )))
                                            
                                            let $nlj_lgbtPre := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                         cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($maxYearNLGBT -1 ))
                                                         )))
                                                         
                                           let $global100Pre := cts:search(/,
                                                    cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                         cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'')),
                                                         cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                         cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string(max($maxYearGlobal100) -1 ))
                                                         )))
                                                         
                                          let $res-obj := json:object()
                                          let $rplPre := if($amLaw200Pre//AMLAW_200:RPL/text() ne '') then $amLaw200Pre//AMLAW_200:RPL/text() 
										  				else if($global100Pre//Global_100:REVENUE_PER_LAWYER/text()) then $global100Pre//Global_100:REVENUE_PER_LAWYER/text()
														else $uk50Pre//UK_50:RPL_DOLLAR/text()  

                                          let $grossRevenuePre := if($amLaw200Pre//AMLAW_200:GROSS_REVENUE/text() ne '') then $amLaw200Pre//AMLAW_200:GROSS_REVENUE/text() 
										  						  else if($global100Pre//Global_100:GROSS_REVENUE/text()) then $global100Pre//Global_100:GROSS_REVENUE/text()
																	else $uk50Pre//UK_50:GROSS_REVENUE_DOLLAR/text()

                                          let $numOfLawyersPre := if($amLaw200Pre//AMLAW_200:NUM_OF_LAWYERS/text() ne '') then $amLaw200Pre//AMLAW_200:NUM_OF_LAWYERS/text() 
										  						  else if($global100Pre//Global_100:NUM_LAWYERS/text()) then $global100Pre//Global_100:NUM_LAWYERS/text()
																	else $uk50Pre//UK_50:NUM_LAWYERS/text()
                                          
										  let $profitMarginPre := if($amLaw200Pre//AMLAW_200:PROFIT_MARGIN/text() ne '') then $amLaw200Pre//AMLAW_200:PROFIT_MARGIN/text() 
                                                                  else if($global100Pre) then (($global100Pre//Global_100:PPP/text() * $global100Pre//Global_100:NUM_EQUITY_PARTNERS/text()) div $global100Pre//Global_100:GROSS_REVENUE/text()) * 100
																  else  $uk50Pre//UK_50:PROFIT_MARGIN/text() * 100
                                          
										  let $leveragePre := if($amLaw200Pre//AMLAW_200:LEVERAGE/text() ne '') then $amLaw200Pre//AMLAW_200:LEVERAGE/text() 
                                                               else if($global100Pre) then ((xs:integer($global100Pre//Global_100:NUM_LAWYERS/text()) - xs:integer($global100Pre//Global_100:NUM_EQUITY_PARTNERS/text())) div xs:integer($global100Pre//Global_100:NUM_EQUITY_PARTNERS/text()))
															   else $uk50Pre//UK_50:LEVERAGE/text() 

                                          let $pppPre := if($amLaw200Pre//AMLAW_200:PPP/text() ne '') then $amLaw200Pre//AMLAW_200:PPP/text()  
										  				 else if($global100Pre//Global_100:PPP/text()) then $global100Pre//Global_100:PPP/text()
														   else $uk50Pre//UK_50:PPP_DOLLAR/text() 

                                          let $numEquityPartnerPre := if($amLaw200Pre//AMLAW_200:NUM_EQ_PARTNERS/text() ne '') then $amLaw200Pre//AMLAW_200:NUM_EQ_PARTNERS/text() 
                                                                   else if($global100Pre//Global_100:NUM_EQUITY_PARTNERS/text()) then $global100Pre//Global_100:NUM_EQUITY_PARTNERS/text()
																   else $uk50Pre//UK_50:NUMBER_OF_EQ_PARTNERS/text()
																   
										  let $netOperationIncomePre := if($amLaw200Pre//AMLAW_200:NET_OPERATING_INCOME/text()) then $amLaw200Pre//AMLAW_200:NET_OPERATING_INCOME/text()
										  							 else if($global100Pre) then ($global100Pre//Global_100:PPP/text() * $global100Pre//Global_100:NUM_EQUITY_PARTNERS/text())
																	 else $uk50Pre//UK_50:PPP_DOLLAR/text() * $uk50Pre//UK_50:NUMBER_OF_EQ_PARTNERS/text() 
										  
										  let $noofLawyersPre := if($amLaw200Pre//AMLAW_200:NUM_OF_LAWYERS/text() ne '') then $amLaw200Pre//AMLAW_200:NUM_OF_LAWYERS/text() 
										  						 else if($global100Pre//Global_100:NUM_LAWYERS/text()) then $global100Pre//Global_100:NUM_LAWYERS/text()
																 else $uk50Pre//UK_50:NUMBER_OF_LAWYERS/text()
										  
										  
																   
                                           let $cplPre := (xs:integer($grossRevenuePre) - xs:integer($netOperationIncomePre)) div xs:integer($noofLawyersPre)
                                         
                                          let $ppp1Pre := xs:double($amLaw200Pre//AMLAW_200:NET_OPERATING_INCOME/text()) div xs:double($amLaw200Pre//AMLAW_200:TOTAL_PARTNERS/text())
                                         
                                          let $equityPartnerPre := xs:double($numEquityPartnerPre) div xs:double($amLaw200Pre//AMLAW_200:TOTAL_PARTNERS/text())
                                          let $minorityPerPre := xs:double($diversitySCPre//Diversity_Scorecard:MINORITY_PERCENTAGE/text()) * 100
                                         
                                          let $femaleAttorneyPre := xs:double($femaleSCPre//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text()) * 100
                                         
                                         
                                          let $lgbtAttorneyPre := xs:double($nlj_lgbtPre//nljlgbt:PERCENT_LGBT_ATTORNEYS/text()) * 100    
                                          let $revenueGrowth1 := if($amLaw200//AMLAW_200:GROSS_REVENUE/text() ne '') then $rplchange1 else $rplchange1g
                                          let $revenueGrowth5 := if($amLaw200//AMLAW_200:GROSS_REVENUE/text() ne '') then $rplchange5 else $rplchange5g
                                          let $variable1 := if($column1 eq 'Am Law 200 rank') then $amLaw200//AMLAW_200:AMLAW200_RANK/text() else
                                                             if($column1 eq 'Global 200 rank') then $global100//Global_100:RANK_BY_GROSS_REVENUE/text() else
                                                             if($column1 eq 'Revenue Per Lawyer') then $rpl else
                                                             if($column1 eq 'Cost Per Lawyer') then $cpl else
                                                             if($column1 eq 'Profit Margin') then $profitMargin else
                                                             if($column1 eq '% Turnover') then $profitMargin else
                                                             if($column1 eq 'Leverage') then $leverage else
                                                             if($column1 eq 'Profit Per Partner') then $ppp1 else
                                                             if($column1 eq 'Profit Per Equity Partner') then $ppp else
                                                             if($column1 eq '% of Equity Partners') then ($equityPartner * 100) else
                                                             if($column1 eq '% of Minority Attorneys') then $minorityPer else
                                                             if($column1 eq '% of Female Attorneys') then $femaleAttorney else
                                                             if($column1 eq '% of LGBT Attorneys') then $lgbtAttorney else
                                                             if($column1 eq 'Growth in Minority Attorneys') then $diversitySC//Diversity_Scorecard:TOTAL_MINORITY_ATTORNEYS/text() else
                                                             if($column1 eq 'Growth in Female Partners') then $femaleSC//FEMALE_SCORECARD:FEMALE_PARTNERS/text() else
                                                             if($column1 eq 'Revenue Growth (1 year)') then $revenueGrowth1 else
                                                             if($column1 eq 'Revenue Growth (5 years)') then $revenueGrowth5 else $grossRevenue
                                          
                                          let $variable2 := if($column2 eq 'Am Law 200 rank') then $amLaw200//AMLAW_200:AMLAW200_RANK/text() else
                                                             if($column2 eq 'Global 200 rank') then $global100//Global_100:RANK_BY_GROSS_REVENUE/text() else
                                                             if($column2 eq 'Revenue Per Lawyer') then $rpl else
                                                             if($column2 eq 'Cost Per Lawyer') then $cpl else
                                                             if($column2 eq 'Profit Margin') then $profitMargin else
                                                             if($column2 eq '% Turnover') then $profitMargin else
                                                             if($column2 eq 'Leverage') then $leverage else
                                                             if($column2 eq 'Profit Per Partner') then $ppp1 else
                                                             if($column2 eq 'Profit Per Equity Partner') then $ppp else
                                                             if($column2 eq '% of Equity Partners') then ($equityPartner * 100) else
                                                             if($column2 eq '% of Minority Attorneys') then $minorityPer else
                                                             if($column2 eq '% of Female Attorneys') then $femaleAttorney else
                                                             if($column2 eq '% of LGBT Attorneys') then $lgbtAttorney else
                                                             if($column2 eq 'Growth in Minority Attorneys') then $diversitySC//Diversity_Scorecard:TOTAL_MINORITY_ATTORNEYS/text() else
                                                             if($column2 eq 'Growth in Female Partners') then $femaleSC//FEMALE_SCORECARD:FEMALE_PARTNERS/text() else
                                                             if($column2 eq 'Revenue Growth (1 year)') then $revenueGrowth1 else
                                                             if($column2 eq 'Revenue Growth (5 years)') then $revenueGrowth5 else $grossRevenue
                                                             
                                          let $variablePre1 := if($column1 eq 'Am Law 200 rank') then $amLaw200Pre//AMLAW_200:AMLAW200_RANK/text() else
                                                             if($column1 eq 'Global 200 rank') then $global100Pre//Global_100:RANK_BY_GROSS_REVENUE/text() else
                                                             if($column1 eq 'Revenue Per Lawyer') then $rplPre else
                                                             if($column1 eq 'Cost Per Lawyer') then $cplPre else
                                                             if($column1 eq 'Profit Margin') then $profitMarginPre else
                                                             if($column1 eq '% Turnover') then $profitMarginPre else
                                                             if($column1 eq 'Leverage') then $leveragePre else
                                                             if($column1 eq 'Profit Per Partner') then $ppp1Pre else
                                                             if($column1 eq 'Profit Per Equity Partner') then $pppPre else
                                                             if($column1 eq '% of Equity Partners') then ($equityPartner * 100) else
                                                             if($column1 eq '% of Minority Attorneys') then $minorityPerPre else
                                                             if($column1 eq '% of Female Attorneys') then $femaleAttorneyPre else
                                                             if($column1 eq '% of LGBT Attorneys') then $lgbtAttorneyPre else
                                                             if($column1 eq 'Growth in Minority Attorneys') then $diversitySCPre//Diversity_Scorecard:TOTAL_MINORITY_ATTORNEYS/text() else
                                                             if($column1 eq 'Growth in Female Partners') then $femaleSCPre//FEMALE_SCORECARD:FEMALE_PARTNERS/text() else
                                                             if($column1 eq 'Revenue Growth (1 year)') then $revenueGrowth1 else
                                                             if($column1 eq 'Revenue Growth (5 years)') then $revenueGrowth5 else $grossRevenue
                                          
                                          let $variablePre2 := if($column2 eq 'Am Law 200 rank') then $amLaw200Pre//AMLAW_200:AMLAW200_RANK/text() else
                                                             if($column2 eq 'Global 200 rank') then $global100Pre//Global_100:RANK_BY_GROSS_REVENUE/text() else
                                                             if($column2 eq 'Revenue Per Lawyer') then $rplPre else
                                                             if($column2 eq 'Cost Per Lawyer') then $cplPre else
                                                             if($column2 eq 'Profit Margin') then $profitMarginPre else
                                                             if($column2 eq '% Turnover') then $profitMarginPre else
                                                             if($column2 eq 'Leverage') then $leveragePre else
                                                             if($column2 eq 'Profit Per Partner') then $ppp1Pre else
                                                             if($column2 eq 'Profit Per Equity Partner') then $pppPre else
                                                             if($column2 eq '% of Equity Partners') then ($equityPartner * 100) else
                                                             if($column2 eq '% of Minority Attorneys') then $minorityPerPre else
                                                             if($column2 eq '% of Female Attorneys') then $femaleAttorney else
                                                             if($column2 eq '% of LGBT Attorneys') then $lgbtAttorneyPre else
                                                             if($column2 eq 'Growth in Minority Attorneys') then $diversitySCPre//Diversity_Scorecard:TOTAL_MINORITY_ATTORNEYS/text() else
                                                             if($column2 eq 'Growth in Female Partners') then $femaleSCPre//FEMALE_SCORECARD:FEMALE_PARTNERS/text() else
                                                             if($column2 eq 'Revenue Growth (1 year)') then $revenueGrowth1 else
                                                             if($column2 eq 'Revenue Growth (5 years)') then $revenueGrowth5 else $grossRevenue                   
                                                             
                                          let $variableChanges1 :=if($variablePre1) then ( xs:double((($variable1 - $variablePre1) div $variablePre1)) * 100) else 0
                                          let $variableChanges2 :=if($variablePre2) then ( xs:double((($variable2 - $variablePre2) div $variablePre2)) * 100) else 0
                                          
										  let $organizationName := if($item//organizations:ALM_NAME/text() ne '') then $item//organizations:ALM_NAME/text() else $item//organizations:ORGANIZATION_NAME/text()
										  
                                          let $_ := (map:put($res-obj,'ORGANIZATION_ID',$item//organizations:ORGANIZATION_ID/text()),
                                                     map:put($res-obj,'ORGANIZATION_NAME',$organizationName),
                                                     map:put($res-obj,'VARIABLE_CHANGES1',if($variableChanges1) then fn:round-half-to-even($variableChanges1,2) else 0),
                                                     (: map:put($res-obj,'CUR_VARIABLE1',fn:round($variable1)),
                                                     map:put($res-obj,'PRE_VARIABLE1',fn:round($variablePre1)), :)
													 map:put($res-obj,'CUR_VARIABLE1',if($variable1) then fn:round-half-to-even($variable1,2) else 0),
                                                     map:put($res-obj,'PRE_VARIABLE1',if($variablePre1) then fn:round-half-to-even($variablePre1,2) else 0),
                                                     map:put($res-obj,'Variable2_Change',if($variableChanges2) then fn:round-half-to-even($variableChanges2,2) else 0),
                                                     map:put($res-obj,'CUR_VARIABLE2',if($variable2) then fn:round-half-to-even($variable2,2) else 0),
                                                     map:put($res-obj,'PRE_VARIABLE2',if($variablePre2) then fn:round-half-to-even($variablePre2,2) else 0)
													
                                                     )
                                                     
                                        let $_ := json:array-push($res-array,$res-obj)
                                        
                                        return()
  return $res-array
};



(:--------------- Score Card --------------------:)

declare function firm:GetScoreCardGrossRevenue($organizationIDs,$year)
{
	let $maxYear := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text())
					  
	let $maxYearG100 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                      )))//Global_100:PUBLISHYEAR/text())

	let $maxYearUK50 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/')
                      )))//UK_50:PUBLISHYEAR/text())					  

    let $data := for $item in fn:tokenize($organizationIDs,',')
		  let $grossRevenue := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearG100))
                                                    )))[1]//Global_100:GROSS_REVENUE/text()
		  let $grossRevenueUK50 := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													   cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYearUK50))
                                                    )))[1]//UK_50:GROSS_REVENUE_DOLLAR/text()											
													
		  let $amlaw200GrossRevenue := cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													   cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear))
                                                    )))[1]//AMLAW_200:GROSS_REVENUE/text()    
			
		  
		  let $result := if($amlaw200GrossRevenue ne '') then $amlaw200GrossRevenue else if($grossRevenue ne '') then $grossRevenue else $grossRevenueUK50
		  return $result
	return $data	  
                                            
  };
  
declare function firm:GetScoreCardGrossRevenuePreYear($organizationIDs,$year)
{

	let $maxYear := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text())
					  
	let $maxYearG100 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                      )))//Global_100:PUBLISHYEAR/text())

	let $maxYearUK50 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/')
                      )))//UK_50:PUBLISHYEAR/text())				  

    let $data := for $item in fn:tokenize($organizationIDs,',')
		  let $grossRevenue := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($year - 1))
                                                    )))[1]//Global_100:GROSS_REVENUE/text()

		  let $grossRevenueUK50 := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													   cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYearUK50 - 1))
                                                    )))[1]//UK_50:GROSS_REVENUE_DOLLAR/text()											
													
		  let $amlaw200GrossRevenue := cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													   cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear - 1))
                                                    )))[1]//AMLAW_200:GROSS_REVENUE/text()    
			
		  
		  let $result := if($amlaw200GrossRevenue ne '') then $amlaw200GrossRevenue else if($grossRevenue ne '') then $grossRevenue else $grossRevenueUK50
		  return $result
	return $data	  
                                            
  };
  
  declare function firm:GetScoreCardRPL($organizationIDs,$year)
{
	let $maxYear := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text())
					  
	let $maxYearG100 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                      )))//Global_100:PUBLISHYEAR/text())

	let $maxYearUK50 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/')
                      )))//UK_50:PUBLISHYEAR/text())				  

    let $data := for $item in fn:tokenize($organizationIDs,',')
		  let $rpl := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearG100))
                                                    )))[1]//Global_100:REVENUE_PER_LAWYER/text()

		 let $rplUK50 := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													   cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYearUK50))
                                                    )))[1]//UK_50:RPL_DOLLAR/text()											
													
		  let $amlaw200RPL:= cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													   cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear))
                                                    )))[1]//AMLAW_200:RPL/text()    
			
		  
		  let $result := if($amlaw200RPL ne '') then $amlaw200RPL else if($rpl) then $rpl else $rplUK50
		  return $result
	return $data	  
                                            
  };
  
  declare function firm:GetScoreCardRPLPreYear($organizationIDs,$year)
{

	let $maxYearUK50 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/')
                      )))//UK_50:PUBLISHYEAR/text())

	let $maxYear := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text())
					  
	let $maxYearG100 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                      )))//Global_100:PUBLISHYEAR/text())

    let $data := for $item in fn:tokenize($organizationIDs,',')
		  let $rpl := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearG100 - 1))
                                                    )))[1]//Global_100:REVENUE_PER_LAWYER/text()

		   let $rplUK50 := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													   cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYearUK50))
                                                    )))[1]//UK_50:RPL_DOLLAR/text()										
													
		  let $amlaw200RPL:= cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													   cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear - 1))
                                                    )))[1]//AMLAW_200:RPL/text()    
			
		  
		  let $result := if($amlaw200RPL ne '') then $amlaw200RPL else if($rpl) then $rpl else $rplUK50 
		  return $result
	return $data	  
                                            
  };
  
  declare function firm:GetScoreCardPROFITMARGIN($organizationIDs,$year)
{
	let $maxYearUK50 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/')
                      )))//UK_50:PUBLISHYEAR/text())

	let $maxYear := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text())
					  
	let $maxYearG100 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                      )))//Global_100:PUBLISHYEAR/text())

    let $data := for $item in fn:tokenize($organizationIDs,',')
		  let $rpl := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearG100))
                                                    )))[1]
		  let $profitMarginUK50 := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													   cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYearUK50))
                                                    )))[1]//UK_50:PROFIT_MARGIN/text()											
													
		  let $amlaw200PM:= cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													   cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear))
                                                    )))[1]//AMLAW_200:PROFIT_MARGIN/text()    
			
		  
		  let $result := if($amlaw200PM ne '') then firm:MLRoundingFunction($amlaw200PM,2) else 
		  				 if($rpl) then firm:MLRoundingFunction((($rpl//Global_100:PPP/text() * $rpl//Global_100:NUM_EQUITY_PARTNERS/text()) div $rpl//Global_100:GROSS_REVENUE/text()),2)
						 else firm:MLRoundingFunction($profitMarginUK50 * 100,2)
		  return $result
	return $data	  
                                            
  };
  
  declare function firm:GetScoreCardLeverage($organizationIDs,$year)
{
	let $maxYearUK50 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/')
                      )))//UK_50:PUBLISHYEAR/text())

	let $maxYear := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text())
					  
	let $maxYearG100 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                      )))//Global_100:PUBLISHYEAR/text())

    let $data := for $item in fn:tokenize($organizationIDs,',')
		  let $rpl := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearG100))
                                                    )))[1]
		 let $leverageUK50 := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													   cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYearUK50))
                                                    )))[1]//UK_50:LEVERAGE/text()											
													
		  let $amlaw200PM:= cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													   cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear))
                                                    )))[1]//AMLAW_200:LEVERAGE/text()    
			
		  
		  let $result := if($amlaw200PM ne '') then $amlaw200PM 
		  				else if($rpl//Global_100:NUM_EQUITY_PARTNERS/text()) then firm:MLRoundingFunction((($rpl//Global_100:NUM_LAWYERS/text() - $rpl//Global_100:NUM_EQUITY_PARTNERS/text()) div $rpl//Global_100:NUM_EQUITY_PARTNERS/text()),2)
						else $leverageUK50
		  return $result
	return $data	  
                                            
  };

  declare function firm:GetScoreCardLeverageByG100($organizationIDs,$year)
{

					  
	let $maxYearG100 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                      )))//Global_100:PUBLISHYEAR/text())

    let $data := for $item in fn:tokenize($organizationIDs,',')
		  let $rpl := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearG100)))))
        
		  
		  let $result := firm:MLRoundingFunction((($rpl//Global_100:NUM_LAWYERS/text() - $rpl//Global_100:NUM_EQUITY_PARTNERS/text()) div $rpl//Global_100:NUM_EQUITY_PARTNERS/text()),2)
						
		  return $result
	return $data	  
                                            
  };
  
  declare function firm:GetScoreCardPPP($organizationIDs,$year)
{
	let $maxYearUK50 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/')
                      )))//UK_50:PUBLISHYEAR/text())

	let $maxYear := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text())
					  
	let $maxYearG100 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                      )))//Global_100:PUBLISHYEAR/text())

   let $data := for $item in fn:tokenize($organizationIDs,',')
		  let $rpl := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearG100))
                                                    )))//Global_100:PPP/text()
		 let $pppUk50 := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													   cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYearUK50))
                                                    )))//UK_50:PPP_DOLLAR/text()											
		  
		  let $amlaw200PM:= cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													   cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear))
                                                    )))[1]//AMLAW_200:PPP/text()    
			
		  
		  let $result := if($amlaw200PM ne '') then $amlaw200PM else if($rpl) then $rpl else $pppUk50
		  return firm:MLRoundingFunction($result,3)
	return $data	  
                                            
  };

declare function firm:GetScoreCardNOI($organizationIDs,$year)
{
	let $maxYearUK50 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/')
                      )))//UK_50:PUBLISHYEAR/text())

	let $maxYear := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text())
					  
	let $maxYearG100 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                      )))//Global_100:PUBLISHYEAR/text())

   let $data := for $item in fn:tokenize($organizationIDs,',')
		  let $noiG100 := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearG100))
                                                    )))[1]
		 let $noiUK50 := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													   cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYearUK50))
                                                    )))[1]										
		  
		  let $amlawNOI:= cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													   cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear))
                                                    )))[1]//AMLAW_200:NET_OPERATING_INCOME/text() 

		let $noiG100 := $noiG100//Global_100:PPP/text() * $noiG100//Global_100:NUM_EQUITY_PARTNERS/text()											   
		let $noiUK50 := $noiUK50//UK_50:PPP_DOLLAR/text() *  $noiUK50//UK_50:NUMBER_OF_EQ_PARTNERS/text()

		  
		  let $result := if($amlawNOI) then $amlawNOI else if($noiG100) then $noiG100 else $noiUK50
		  return firm:MLRoundingFunction($result,3)
	return $data	  
                                            
  };

  declare function firm:GetScoreCardNOIByG100($organizationIDs,$year)
{
					  
	let $maxYearG100 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                      )))//Global_100:PUBLISHYEAR/text())

   let $data := for $item in fn:tokenize($organizationIDs,',')
		  let $noiG100 := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearG100))
                                                    )))[1]
		 
		let $noiG100 := $noiG100//Global_100:PPP/text() * $noiG100//Global_100:NUM_EQUITY_PARTNERS/text()

		  
		  let $result := $noiG100
		  return firm:MLRoundingFunction($result,3)
	return $data	  
                                            
  };

  declare function firm:GetScoreCardNOIByUK50($organizationIDs,$year)
{
	let $maxYearUK50 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/')
                      )))//UK_50:PUBLISHYEAR/text())


   let $data := for $item in fn:tokenize($organizationIDs,',')
		
		 let $noiUK50 := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													   cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYearUK50))
                                                    )))[1]										
		  
		 

		
		let $noiUK50 := $noiUK50//UK_50:PPP_DOLLAR/text() *  $noiUK50//UK_50:NUMBER_OF_EQ_PARTNERS/text()

		  
		  let $result := $noiUK50
		  return firm:MLRoundingFunction($result,3)
	return $data	  
                                            
  };

  declare function firm:GetScoreCardNOL($organizationIDs,$year)
{
	let $maxYearUK50 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/')
                      )))//UK_50:PUBLISHYEAR/text())

	let $maxYear := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text())
					  
	let $maxYearG100 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                      )))//Global_100:PUBLISHYEAR/text())

   let $data := for $item in fn:tokenize($organizationIDs,',')
		  let $noiG100 := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
													   cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearG100))
                                                    )))[1]
		 let $noiUK50 := cts:search(/,
                                                  cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
													   cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYearUK50))
                                                    )))[1]										
		  
		  let $amlawNOI:= cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
													   cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item),
                                                       cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear))
                                                    )))[1]//AMLAW_200:NUM_OF_LAWYERS/text() 

		let $noiG100 := $noiG100//Global_100:NUM_LAWYERS/text()										   
		let $noiUK50 := $noiUK50//UK_50:NUMBER_OF_LAWYERS/text()

		  
		  let $result := if($amlawNOI) then $amlawNOI else if($noiG100) then $noiG100 else $noiUK50
		  return firm:MLRoundingFunction($result,3)
	return $data	  
                                            
  };

declare function firm:GrowthMedianUK100()
{
	let $maxYear := max(cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/')
							)))//UK_50:PUBLISHYEAR/text())

	let $id := fn:distinct-values(cts:search(/,
    cts:and-query((
      cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/'),
      cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),(xs:string(xs:integer($maxYear) - 1),xs:string($maxYear)))
    )))//UK_50:ORGANIZATION_ID/text())
    
	let $loopData := for $item in $id
						let $currentYear := cts:search(/,
												cts:and-query((
												cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/'),
												cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),('2018')),
												cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($item))
												)))[1]//UK_50:GROSS_REVENUE_DOLLAR/text()
												
						let $preYear := cts:search(/,
												cts:and-query((
												cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/'),
												cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),('2017')),
												cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($item))
												)))[1]//UK_50:GROSS_REVENUE_DOLLAR/text()
												
					let $growth := ($currentYear - $preYear) div $preYear
					return fn:round-half-to-even($growth * 100 , 2)
					
	return math:median($loopData)
};

declare function firm:GrowthMedianGlobal200()
{
	let $maxYear := max(cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
							)))//Global_100:PUBLISHYEAR/text())

	let $id := fn:distinct-values(cts:search(/,
    cts:and-query((
      cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
      cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),(xs:string(xs:integer($maxYear) - 1),xs:string($maxYear)))
    )))//Global_100:ORGANIZATION_ID/text())
    
	let $loopData := for $item in $id
						let $currentYear := cts:search(/,
												cts:and-query((
												cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
												cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),('2018')),
												cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($item))
												)))[1]//Global_100:GROSS_REVENUE/text()
												
						let $preYear := cts:search(/,
												cts:and-query((
												cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/'),
												cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),('2017')),
												cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),xs:string($item))
												)))[1]//Global_100:GROSS_REVENUE/text()
												
					let $growth := ($currentYear - $preYear) div $preYear
					return fn:round-half-to-even($growth * 100 , 2)
					
	return math:median($loopData)
};

declare function firm:GrowthMedianAmLaw200()
{
	let $maxYear := max(cts:search(/,
						cts:and-query((
							cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
							)))//AMLAW_200:PUBLISHYEAR/text())

	let $id := fn:distinct-values(cts:search(/,
    cts:and-query((
      cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
      cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),(xs:string(xs:integer($maxYear) - 1),xs:string($maxYear)))
    )))//AMLAW_200:ORGANIZATION_ID/text())
    
	let $loopData := for $item in $id
						let $currentYear := cts:search(/,
												cts:and-query((
												cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
												cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),('2018')),
												cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($item))
												)))[1]//AMLAW_200:GROSS_REVENUE/text()
												
						let $preYear := cts:search(/,
												cts:and-query((
												cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
												cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),('2017')),
												cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($item))
												)))[1]//AMLAW_200:GROSS_REVENUE/text()
												
					let $growth := ($currentYear - $preYear) div $preYear
					return fn:round-half-to-even($growth * 100 , 2)
					
	return math:median($loopData)
};

 declare function firm:SP_GETFIRMPERFORMANCESCORE1($primaryFirmID,$firmID,$watchlistname)
{
   let $res-obj := json:object()
  let $maxYear := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                      )))//AMLAW_200:PUBLISHYEAR/text())
					  
	let $maxYearG100 := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Global_100/')
                      )))//Global_100:PUBLISHYEAR/text())

	let $maxYearNLJ := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_250/')
                      )))//nlj250:PUBLISHYEAR/text())

	let $maxYearNLGBT := max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/NLJ_LGBT/')
                      )))//nljlgbt:PUBLISHYEAR/text())	

	 let $maxYearfemaleSC :=  max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/')
                      )))//FEMALE_SCORECARD:PUBLISHYEAR/text())	
					  
	 let $maxYeardiversitySC :=  max(cts:search(/,
                      cts:and-query((
                        cts:directory-query('/LegalCompass/relational-data/surveys/Diversity_Scorecard/')
                      )))//Diversity_Scorecard:PUBLISHYEAR/text())		
                      
  let $result := cts:search(/,
                  cts:and-query((
                       cts:directory-query("/LegalCompass/relational-data/organization/"),
                       cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),xs:string($primaryFirmID))
                       )))
                       
  let $loopData := for $item in $result
                       
                       let $amLaw200 :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                     cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear))
                                                     )))[1]
                       let $uk50 :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                     cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYear))
                                                     )))[1]

                       let $amLaw200PreYear :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                     cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear - 1))
                                                     )))[1]

						let $uk50PreYear :=  cts:search(/,
                                                cts:and-query((
                                                     cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                     cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                     cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYear - 1))
                                                     )))[1]							 
                       
                       let $nlj250 := cts:search(/,
                                            cts:and-query((
                                                 cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_250/"),
                                                 cts:element-value-query(xs:QName('nlj250:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                 cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string($maxYearNLJ))
                                                 )))[1]
                                                 
                       let $nlj_lgbt := cts:search(/,
                                            cts:and-query((
                                                 cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                 cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                 cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($maxYearNLGBT))
                                                 )))[1]                       
                       
                       let $femaleSC := cts:search(/,
                                            cts:and-query((
                                                 cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                 cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                 cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($maxYearfemaleSC))
                                                 )))[1]         
                       

                       let $diversitySC := cts:search(/,
                                            cts:and-query((
                                                 cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                 cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
                                                 cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($maxYeardiversitySC))
                                                 )))[1]           
                       
                            
                       let $global100 := cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                       cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
													   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'')),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearG100)))))[1]
                      
                       let $global100PreYear := cts:search(/,
                                                  cts:and-query((
                                                       cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                       cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$item//organizations:ORGANIZATION_ID/text()),
													   cts:not-query(cts:element-value-query(xs:QName('Global_100:RANK_BY_GROSS_REVENUE'),'')),
                                                       cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearG100 - 1)))))[1]
                      
                      
                       
                       let $grossRevenue := if($amLaw200//AMLAW_200:GROSS_REVENUE/text() != '') then $amLaw200//AMLAW_200:GROSS_REVENUE/text()
                                            else if($global100//Global_100:GROSS_REVENUE/text()) then $global100//Global_100:GROSS_REVENUE/text()
											else $uk50//UK_50:GROSS_REVENUE_DOLLAR/text()
                       
                       let $grossRevenuePreYear := if($amLaw200PreYear//AMLAW_200:GROSS_REVENUE/text() != '') then $amLaw200PreYear//AMLAW_200:GROSS_REVENUE/text()
                                            else if($global100PreYear//Global_100:GROSS_REVENUE/text()) then $global100PreYear//Global_100:GROSS_REVENUE/text()
											else $uk50PreYear//UK_50:GROSS_REVENUE_DOLLAR/text()

                       let $growthFirmValue := firm:MLRoundingFunction(((xs:double($grossRevenue) - xs:double($grossRevenuePreYear)) div xs:double($grossRevenuePreYear)) * 100,2)
					   
                       let $rpl := if($amLaw200//AMLAW_200:RPL/text() != '') then $amLaw200//AMLAW_200:RPL/text()
                                   else if($global100//Global_100:REVENUE_PER_LAWYER/text()) then $global100//Global_100:REVENUE_PER_LAWYER/text()
									else $uk50//UK_50:RPL_DOLLAR/text()

                       let $ppp := if($amLaw200//AMLAW_200:PPP/text() != '') then $amLaw200//AMLAW_200:PPP/text()
                                   else if($global100//Global_100:PPP/text()) then $global100//Global_100:PPP/text()     
								   else $uk50//UK_50:PPP_DOLLAR/text()   

                       let $eqp := (xs:double($amLaw200//AMLAW_200:NUM_EQ_PARTNERS/text()) div xs:double($amLaw200//AMLAW_200:TOTAL_PARTNERS/text())) * 100
					   
					   let $amlawNOI := $amLaw200//AMLAW_200:NET_OPERATING_INCOME/text()
					   let $amlawNumLawyers := $amLaw200//AMLAW_200:NUM_OF_LAWYERS/text()

					   let $uk50NOI := ($uk50//UK_50:PPP_DOLLAR/text() * $uk50//UK_50:NUMBER_OF_EQ_PARTNERS/text())
					   let $uk50NumLawyers := $uk50//UK_50:NUMBER_OF_LAWYERS/text()

					   let $globalNOI := ($global100//Global_100:PPP/text() * $global100//Global_100:NUM_EQUITY_PARTNERS/text())
					   let $globalnumLawyers:= $global100//Global_100:NUM_LAWYERS/text()

					   let $noi := if($amlawNOI) then $amlawNOI
													else if($globalNOI) then $globalNOI
													else if($uk50NOI) then $uk50NOI else()

						let $numLawyers := 	if($amlawNumLawyers != '') then $amlawNumLawyers
										else if($globalnumLawyers != '') then $globalnumLawyers
										else if($uk50NumLawyers != '') then $uk50NumLawyers else()

                       let $cpl :=($grossRevenue - $noi) div $numLawyers

                       let $profitMargin := if($amLaw200//AMLAW_200:PROFIT_MARGIN/text() ne '') then $amLaw200//AMLAW_200:PROFIT_MARGIN/text()
                                            else if($global100 ne '') then firm:MLRoundingFunction(((xs:double($global100//Global_100:PPP/text()) * xs:double($global100//Global_100:NUM_EQUITY_PARTNERS/text())) div xs:double($global100//Global_100:GROSS_REVENUE/text())) ,2) * 100
											else $uk50//UK_50:PROFIT_MARGIN/text() * 100

                       let $profitMarginPreYear := if($amLaw200PreYear//AMLAW_200:PROFIT_MARGIN/text() != '') then $amLaw200PreYear//AMLAW_200:PROFIT_MARGIN/text()
                                            else if($global100PreYear) then ((xs:double($global100PreYear//Global_100:PPP/text()) * xs:double($global100PreYear//Global_100:NUM_EQUITY_PARTNERS/text())) div xs:double($global100PreYear//Global_100:GROSS_REVENUE/text())) * 100
											else $uk50PreYear//UK_50:PROFIT_MARGIN/text()

                       let $leverage := if($amLaw200//AMLAW_200:LEVERAGE/text() ne '') then $amLaw200//AMLAW_200:LEVERAGE/text()
                                        else if($global100//Global_100:NUM_EQUITY_PARTNERS/text()) then firm:MLRoundingFunction((xs:double($global100//Global_100:NUM_LAWYERS/text()) - xs:double($global100//Global_100:NUM_EQUITY_PARTNERS/text())) div xs:double($global100//Global_100:NUM_EQUITY_PARTNERS/text()),2) 
										else $uk50//UK_50:LEVERAGE/text()
											
                       let $minorityPercentage := $diversitySC//Diversity_Scorecard:MINORITY_PERCENTAGE/text()
                       let $femaleAttorneys :=$femaleSC//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text()
                       let $lgbtAttorneys := $nlj_lgbt//nljlgbt:PERCENT_LGBT_ATTORNEYS/text()   
                       
                       (:-------------------- Data for Non Primary Firms -----------------------:)   
						
						let $id := $firmID
						 let $firmIDByOrg := fn:distinct-values(cts:search(/,
													cts:and-query((
														cts:directory-query('/LegalCompass/relational-data/organization/'),
														cts:element-value-query(xs:QName('rd-organization:ORGANIZATION_ID'),tokenize($id,','))
													)))//rd-organization:ORGANIZATION_ID/text())

						let $amLaw200NonPrimaryNOI :=  math:median(firm:GetScoreCardNOI($firmID,''))
						
						(: math:median(cts:search(/,
                                                     		cts:and-query((
																cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
																cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$firmIDByOrg),
																cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear))
																)))//AMLAW_200:NET_OPERATING_INCOME/text()) :)

						let $amLaw200NonPrimaryNL :=  math:median(firm:GetScoreCardNOL($firmID,''))
						
						(: math:median(cts:search(/,
                                                     		cts:and-query((
																cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
																cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$firmIDByOrg),
																cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear))
																)))//AMLAW_200:NUM_OF_LAWYERS/text())																 :)
						
                       let $amLaw200NonPrimary :=  cts:search(/,
                           cts:and-query((
                           cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                           cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),tokenize($id,',')),
                           cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear))
                           )))
                       
                      let $amLaw200PreYearNonPrimary :=  cts:search(/,
                                                     cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
                                                         cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$firmIDByOrg),
                                                         cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear - 1))
                                                         )))

					  let $uk50NonPrimary :=  cts:search(/,
                           cts:and-query((
                           cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                           cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),tokenize($id,',')),
                           cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYear))
                           )))
                       
                      let $uk50PreYearNonPrimary :=  cts:search(/,
                                                     cts:and-query((
                                                         cts:directory-query("/LegalCompass/relational-data/surveys/UK_50/"),
                                                         cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),$firmIDByOrg),
                                                         cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYear - 1))
                                                         )))

					  let $amLaw200PreYearNonPrimaryNOI :=  math:median(cts:search(/,
                                                     		cts:and-query((
																cts:directory-query("/LegalCompass/relational-data/surveys/AMLAW_200/"),
																cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),$firmIDByOrg),
																cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear - 1))
																)))//AMLAW_200:NET_OPERATING_INCOME/text())									 

                      let $nlj250NonPrimary := cts:search(/,
                                          cts:and-query((
                                            cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_250/"),
                                            cts:element-value-query(xs:QName('nlj250:ORGANIZATION_ID'),$firmIDByOrg),
                                            cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string($maxYearNLJ))
                                            )))
                                                 
                      let $nlj_lgbtNonPrimary := cts:search(/,
                                            cts:and-query((
                                                cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_LGBT/"),
                                                cts:element-value-query(xs:QName('nljlgbt:ORGANIZATION_ID'),$firmIDByOrg),
                                                cts:element-value-query(xs:QName('nljlgbt:PUBLISHYEAR'),xs:string($maxYearNLGBT))
                                                )))                          

                      let $femaleSCNonPrimary := cts:search(/,
                                            cts:and-query((
                                                cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/"),
                                                cts:element-value-query(xs:QName('FEMALE_SCORECARD:ORGANIZATION_ID'),$firmIDByOrg),
                                                cts:element-value-query(xs:QName('FEMALE_SCORECARD:PUBLISHYEAR'),xs:string($maxYearfemaleSC))
                                                )))             


                      let $diversitySCNonPrimary := cts:search(/,
                                              cts:and-query((
                                                  cts:directory-query("/LegalCompass/relational-data/surveys/Diversity_Scorecard/"),
                                                  cts:element-value-query(xs:QName('Diversity_Scorecard:ORGANIZATION_ID'),$firmIDByOrg),
                                                  cts:element-value-query(xs:QName('Diversity_Scorecard:PUBLISHYEAR'),xs:string($maxYeardiversitySC))
                                                  )))         


                     let $global100NonPrimary := cts:search(/,
                                                cts:and-query((
                                                cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$firmIDByOrg),
                                                cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearG100)))))

                     let $global100PreYearNonPrimary := cts:search(/,
                                                  cts:and-query((
                                                    cts:directory-query("/LegalCompass/relational-data/surveys/Global_100/"),
                                                    cts:element-value-query(xs:QName('Global_100:ORGANIZATION_ID'),$firmIDByOrg),
                                                    cts:element-value-query(xs:QName('Global_100:PUBLISHYEAR'),xs:string($maxYearG100 - 1)))))
                       
                       
                      let $grossRevenueNonPrimary :=if($watchlistname eq 'Am Law 100' or $watchlistname eq 'Am law 200' or $watchlistname eq 'Am Law 25') then math:median(($amLaw200NonPrimary//AMLAW_200:GROSS_REVENUE/text()))
					  								else if($watchlistname eq 'Global 200') then math:median(($global100NonPrimary//Global_100:GROSS_REVENUE/text()))
													else if($watchlistname eq 'UK 100') then math:median(($uk50NonPrimary//UK_50:GROSS_REVENUE_DOLLAR/text()))
													else if($amLaw200NonPrimary//AMLAW_200:GROSS_REVENUE/text() != '') then math:median(($amLaw200NonPrimary//AMLAW_200:GROSS_REVENUE/text()))
													else if($global100NonPrimary//Global_100:GROSS_REVENUE/text() != '') then math:median(($global100NonPrimary//Global_100:GROSS_REVENUE/text()))
													else math:median(($uk50NonPrimary//UK_50:GROSS_REVENUE_DOLLAR/text()))
                       
                       let $grossRevenuePreYearNonPrimary := if($watchlistname eq 'Am Law 100' or $watchlistname eq 'Am law 200' or $watchlistname eq 'Am Law 25') then math:median(($amLaw200PreYearNonPrimary//AMLAW_200:GROSS_REVENUE/text()))
																else if($watchlistname eq 'Global 200') then math:median(($global100PreYearNonPrimary//Global_100:GROSS_REVENUE/text()))
																else if($watchlistname eq 'UK 100') then math:median(($uk50PreYearNonPrimary//UK_50:GROSS_REVENUE_DOLLAR/text()))
																else if($amLaw200PreYearNonPrimary//AMLAW_200:GROSS_REVENUE/text() != '') then math:median(($amLaw200PreYearNonPrimary//AMLAW_200:GROSS_REVENUE/text()))
																else if($global100PreYearNonPrimary//Global_100:GROSS_REVENUE/text() != '') then math:median(($global100PreYearNonPrimary//Global_100:GROSS_REVENUE/text()))
																else math:median(($uk50PreYearNonPrimary//UK_50:GROSS_REVENUE_DOLLAR/text()))
						
						let $grossRevenueGrowthRevenue := if($watchlistname eq 'Am Law 100' or $watchlistname eq 'Am law 200' or $watchlistname eq 'Am Law 25') then math:median(($amLaw200NonPrimary//AMLAW_200:GROSS_REVENUE/text()))
												else if($watchlistname eq 'Global 200') then math:median(($global100NonPrimary//Global_100:GROSS_REVENUE/text()))
												else if($watchlistname eq 'UK 100') then math:median(($uk50NonPrimary//UK_50:GROSS_REVENUE_DOLLAR/text()))
												else  math:median((firm:GetScoreCardGrossRevenue($firmID,$maxYearG100)))

						let $grossRevenueGrowthRevenuePreYear := if($watchlistname eq 'Am Law 100' or $watchlistname eq 'Am law 200' or $watchlistname eq 'Am Law 25') then math:median(($amLaw200PreYearNonPrimary//AMLAW_200:GROSS_REVENUE/text()))
												else if($watchlistname eq 'Global 200') then math:median(($global100PreYearNonPrimary//Global_100:GROSS_REVENUE/text()))
												else if($watchlistname eq 'UK 100') then math:median(($uk50PreYearNonPrimary//UK_50:GROSS_REVENUE_DOLLAR/text()))
												else  math:median((firm:GetScoreCardGrossRevenuePreYear($firmID,$maxYearG100)))					
                       
					   let $growthFirmValueNonPrimary := if($watchlistname eq 'UK 100') then firm:GrowthMedianUK100() 
					   									 else if($watchlistname eq 'Global 200') then firm:GrowthMedianGlobal200()
														 else if($watchlistname eq 'Am Law 100' or $watchlistname eq 'Am law 200' or $watchlistname eq 'Am Law 25') then firm:GrowthMedianAmLaw200()
					   									 else firm:MLRoundingFunction((($grossRevenueGrowthRevenue -$grossRevenueGrowthRevenuePreYear) div $grossRevenueGrowthRevenuePreYear) * 100 ,2)
					   
					    (: firm:MLRoundingFunction((($grossRevenueGrowthRevenue -$grossRevenueGrowthRevenuePreYear) div $grossRevenueGrowthRevenuePreYear) * 100 ,2) :)
					   
                       let $rplNonPrimary := if($watchlistname eq 'Am Law 100' or $watchlistname eq 'Am law 200' or $watchlistname eq 'Am Law 25') then math:median(($amLaw200NonPrimary//AMLAW_200:RPL/text()))
												else if($watchlistname eq 'Global 200') then math:median(($global100NonPrimary//Global_100:REVENUE_PER_LAWYER/text()))
												else if($watchlistname eq 'UK 100') then math:median(($uk50NonPrimary//UK_50:RPL_DOLLAR/text()))
												else math:median(firm:GetScoreCardRPL($firmID,$maxYearG100))
					   
                       let $pppNonPrimary := if($watchlistname eq 'Am Law 100' or $watchlistname eq 'Am law 200' or $watchlistname eq 'Am Law 25') then math:median(($amLaw200NonPrimary//AMLAW_200:PPP/text()))
												else if($watchlistname eq 'Global 200') then math:median(($global100NonPrimary//Global_100:PPP/text()))
												else if($watchlistname eq 'UK 100') then math:median(($uk50NonPrimary//UK_50:PPP_DOLLAR/text()))
												else math:median(firm:GetScoreCardPPP($firmID,$maxYearG100))
					   
                       let $eqpNonPrimary := if($watchlistname eq 'Am Law 100' or $watchlistname eq 'Am law 200' or $watchlistname eq 'Am Law 25') then (math:median(($amLaw200NonPrimary//AMLAW_200:NUM_EQ_PARTNERS/text())) div math:median(($amLaw200NonPrimary//AMLAW_200:TOTAL_PARTNERS/text()))) * 100
												else if($watchlistname eq 'Global 200') then (math:median(($global100NonPrimary//Global_100:NUM_EQUITY_PARTNERS/text())) div math:median(($global100NonPrimary//Global_100:NUM_PARTNERS/text()))) * 100
												else if($watchlistname eq 'UK 100') then (math:median(($uk50NonPrimary//UK_50:NUMBER_OF_EQ_PARTNERS/text())) div math:median(($uk50NonPrimary//UK_50:TOTAL_PARTNERS/text()))) * 100
												else if($amLaw200NonPrimary) then (math:median(($amLaw200NonPrimary//AMLAW_200:NUM_EQ_PARTNERS/text())) div math:median(($amLaw200NonPrimary//AMLAW_200:TOTAL_PARTNERS/text()))) * 100
												else if($global100NonPrimary) then (math:median(($global100NonPrimary//Global_100:NUM_EQUITY_PARTNERS/text())) div math:median(($global100NonPrimary//Global_100:NUM_PARTNERS/text()))) * 100
												else  (math:median(($uk50NonPrimary//UK_50:NUMBER_OF_EQ_PARTNERS/text())) div math:median(($uk50NonPrimary//UK_50:TOTAL_PARTNERS/text()))) * 100
                       (: let $cplNonPrimary := firm:MLRoundingFunction((math:median(firm:GetScoreCardGrossRevenue($firmID,$maxYearG100)) - math:median(($amLaw200NonPrimary//AMLAW_200:NET_OPERATING_INCOME/text()))) div math:median(($amLaw200NonPrimary//AMLAW_200:NUM_OF_LAWYERS/text())),3) :)
					   
					   let $grossRevenueCPL := if($watchlistname eq 'Am Law 100' or $watchlistname eq 'Am law 200' or $watchlistname eq 'Am Law 25') then math:median(($amLaw200NonPrimary//AMLAW_200:GROSS_REVENUE/text()))
												else if($watchlistname eq 'Global 200') then math:median(($global100NonPrimary//Global_100:GROSS_REVENUE/text()))
												else if($watchlistname eq 'UK 100') then math:median(($uk50NonPrimary//UK_50:GROSS_REVENUE_DOLLAR/text()))
												else firm:GetScoreCardGrossRevenue($firmID,$maxYearG100)
					   
					   let $noiCPL := if($watchlistname eq 'Am Law 100' or $watchlistname eq 'Am law 200' or $watchlistname eq 'Am Law 25') then math:median(($amLaw200NonPrimary//AMLAW_200:NET_OPERATING_INCOME/text()))
												else if($watchlistname eq 'Global 200') then math:median((firm:GetScoreCardNOIByG100($firmID,$maxYearG100)))
												else if($watchlistname eq 'UK 100') then math:median((firm:GetScoreCardNOIByUK50($firmID,$maxYearG100)))
												else  $amLaw200NonPrimaryNOI
					   
					   let $numLawyersCPL := if($watchlistname eq 'Am Law 100' or $watchlistname eq 'Am law 200' or $watchlistname eq 'Am Law 25') then math:median(($amLaw200NonPrimary//AMLAW_200:NUM_OF_LAWYERS/text()))
												else if($watchlistname eq 'Global 200') then math:median(($global100NonPrimary//Global_100:NUM_LAWYERS/text()))
												else if($watchlistname eq 'UK 100') then math:median(($uk50NonPrimary//UK_50:NUMBER_OF_LAWYERS/text()))
												else  $amLaw200NonPrimaryNL


					   let $cplNonPrimary := ((math:median(($grossRevenueCPL)) - $noiCPL) div $numLawyersCPL)
					   (: let $cplNonPrimary := $amLaw200NonPrimaryNOI :)
                       
					   let $profitMarginNonPrimary := if($watchlistname eq 'Am Law 100' or $watchlistname eq 'Am law 200' or $watchlistname eq 'Am Law 25') then math:median(($amLaw200NonPrimary//AMLAW_200:PROFIT_MARGIN/text()))
														else if($watchlistname eq 'Global 200') then math:median(($global100NonPrimary//Global_100:PROFIT_MARGIN/text()))
														else if($watchlistname eq 'UK 100') then math:median(($uk50NonPrimary//UK_50:PROFIT_MARGIN/text())) * 100
					   									else math:median(firm:GetScoreCardPROFITMARGIN($firmID,$maxYearG100))
					   
                       let $profitMarginPreYearNonPrimary := if($watchlistname eq 'Am Law 100' or $watchlistname eq 'Am law 200' or $watchlistname eq 'Am Law 25') then math:median(($amLaw200PreYearNonPrimary//AMLAW_200:PROFIT_MARGIN/text()))
															else if($watchlistname eq 'Global 200') then math:median(($global100PreYearNonPrimary//Global_100:PROFIT_MARGIN/text()))
															else if($watchlistname eq 'UK 100') then math:median(($uk50PreYearNonPrimary//UK_50:PROFIT_MARGIN/text())) * 100
															else if($amLaw200PreYearNonPrimary//AMLAW_200:PROFIT_MARGIN/text() != '') then math:median(($amLaw200PreYearNonPrimary//AMLAW_200:PROFIT_MARGIN/text()))
															else ((math:median(($global100PreYearNonPrimary//Global_100:PPP/text())) * math:median(($global100PreYearNonPrimary//Global_100:NUM_EQUITY_PARTNERS/text()))) div math:median(($global100PreYearNonPrimary//Global_100:GROSS_REVENUE/text()))) * 100
                       
					   let $leverageNonPrimary := if($watchlistname eq 'Am Law 100' or $watchlistname eq 'Am law 200' or $watchlistname eq 'Am Law 25') then math:median(($amLaw200NonPrimary//AMLAW_200:LEVERAGE/text()))
												  else if($watchlistname eq 'Global 200') then math:median((firm:GetScoreCardLeverageByG100($firmID,$maxYearG100)))
												  else if($watchlistname eq 'UK 100') then math:median(($uk50NonPrimary//UK_50:LEVERAGE/text()))
												  else math:median(firm:GetScoreCardLeverage($firmID,$maxYearG100))
					   
					  
                       let $minorityPercentageNonPrimary := firm:MLRoundingFunction(math:median(($diversitySCNonPrimary//Diversity_Scorecard:MINORITY_PERCENTAGE/text())),3)
                       let $femaleAttorneysNonPrimary :=firm:MLRoundingFunction(math:median(($femaleSCNonPrimary//FEMALE_SCORECARD:PCT_FEMALE_ATTORNEYS/text())),3)
                       let $lgbtAttorneysNonPrimary := if($nlj_lgbtNonPrimary//nljlgbt:PERCENT_LGBT_ATTORNEYS/text() != '') then firm:MLRoundingFunction(math:median(($nlj_lgbtNonPrimary//nljlgbt:PERCENT_LGBT_ATTORNEYS/text())),3) else 0
                       let $diffGrothValue := fn:round-half-to-even(xs:double($growthFirmValue) - xs:double($growthFirmValueNonPrimary),2)
                       let $diffRpl := (xs:double($rpl) - xs:double($rplNonPrimary)) div 1000000
                       let $diffCpl := firm:MLRoundingFunction((xs:double($cpl) - xs:double($cplNonPrimary)),3) div 1000000
                       let $diffProfitMargin :=$profitMargin - $profitMarginNonPrimary
                       let $diffLgbtAttorneys := if($lgbtAttorneys ne '' and $lgbtAttorneysNonPrimary ne 0) then (xs:double($lgbtAttorneys) - xs:double($lgbtAttorneysNonPrimary)) * 100 else 0 (:(xs:double($lgbtAttorneys) - xs:double($lgbtAttorneysNonPrimary)) * 100:)
                       let $diffLeverage := $leverage - $leverageNonPrimary
                       let $diffFemaleAttorneys := fn:round-half-to-even(xs:double($femaleAttorneys) - xs:double($femaleAttorneysNonPrimary),3) * 100
                       let $diffMinorityAttorneys := firm:MLRoundingFunction((xs:double($minorityPercentage) - xs:double($minorityPercentageNonPrimary)) * 100 ,3)
					   
                       let $profitPartner := xs:double($ppp) div 1000000
                       let $percentEquityPartner := $eqp
                       let $medianProfitPerPartner := xs:double($pppNonPrimary) div 1000000
                       let $medianPercentEquityPartner := $eqpNonPrimary
                       let $diffProfitPartner := firm:MLRoundingFunction(($ppp div 1000000) - ($pppNonPrimary div 1000000) ,2)
                       let $diffpercentEquityPartner := xs:double($eqp) - xs:double($eqpNonPrimary)
								
					   let $_ := (map:put($res-obj,'OrganizationID',xs:integer($item//organizations:ORGANIZATION_ID/text())),
                                  map:put($res-obj,'OrganizationName',$item//organizations:ORGANIZATION_NAME/text()),
                                  map:put($res-obj,'publishyear',$maxYear),
                                  map:put($res-obj,'GrowthFirmValue',if(xs:string($growthFirmValue) ne '') then firm:MLRoundingFunction($growthFirmValue,2) else 0),
                                  map:put($res-obj,'RevenuePerLawyer',if(xs:string($rpl) ne '') then firm:MLRoundingFunction(xs:double($rpl) div 1000000 , 2) else 0),
                                  map:put($res-obj,'CostPerLawyer',if(xs:string($cpl) ne '') then firm:MLRoundingFunction(xs:double($cpl) div 1000000,2) else 0),
                                  map:put($res-obj,'ProfitMargin',if(xs:string($profitMargin) ne '') then $profitMargin else 0),
                                  map:put($res-obj,'Leverage',if(xs:string($leverage) ne '') then firm:MLRoundingFunction($leverage,2) else 0),
                                  map:put($res-obj,'LGBTAttorneys',if(xs:string($lgbtAttorneys) ne '') then xs:double($lgbtAttorneys) * 100 else 0),
                                  map:put($res-obj,'FemaleAttorneys',if(xs:string($femaleAttorneys) ne '') then xs:double($femaleAttorneys) * 100 else 0),
                                  map:put($res-obj,'MinorityAttorneys',if(xs:string($femaleAttorneys) ne '') then xs:double($minorityPercentage) * 100 else 0),
                                  map:put($res-obj,'MedianGrowth',if(xs:string($growthFirmValueNonPrimary) ne '') then firm:MLRoundingFunction($growthFirmValueNonPrimary,2) else 0),
                                  map:put($res-obj,'MedianLGBTAttorneys',if(xs:string($lgbtAttorneysNonPrimary) ne '') then firm:MLRoundingFunction($lgbtAttorneysNonPrimary * 100,2) else 0),
                                  map:put($res-obj,'MedianFemaleAttorneys',if(xs:string($femaleAttorneysNonPrimary) ne '') then $femaleAttorneysNonPrimary * 100 else 0),
                                  map:put($res-obj,'MedianMinorityAttorneys',if(xs:string($minorityPercentageNonPrimary) ne '') then $minorityPercentageNonPrimary * 100 else 0),
                                  map:put($res-obj,'MedianRPL',if(xs:string($rplNonPrimary) ne '') then firm:MLRoundingFunction($rplNonPrimary div 1000000,3) else 0),
                                  map:put($res-obj,'MedianCPL',if(xs:string($cplNonPrimary) ne '') then firm:MLRoundingFunction($cplNonPrimary div 1000000 ,2) else 0),
                                  map:put($res-obj,'MedianProfitMargin',if(xs:string($profitMarginNonPrimary) ne '') then $profitMarginNonPrimary else 0),
                                  map:put($res-obj,'MedianLeverage',if(xs:string($leverageNonPrimary) ne '') then firm:MLRoundingFunction($leverageNonPrimary,2) else 0), 
                                  map:put($res-obj,'DiffGrowthValue',if(xs:string($diffGrothValue) ne '') then $diffGrothValue else 0),
                                  map:put($res-obj,'DiffRPL',if(xs:string($diffRpl) ne '') then firm:MLRoundingFunction($diffRpl,2) else 0),
                                  map:put($res-obj,'DiffCPL',if(xs:string($diffCpl) ne '') then firm:MLRoundingFunction($diffCpl,2) else 0),
                                  map:put($res-obj,'DiffProfitMargin',if(xs:string($diffProfitMargin) ne '') then firm:MLRoundingFunction($diffProfitMargin,2) else 0),
                                  map:put($res-obj,'DiffLGBTAttorneys',if(xs:string($diffLgbtAttorneys) ne '') then firm:MLRoundingFunction($diffLgbtAttorneys,3) else ''),
                                  map:put($res-obj,'DiffLeverage',if(xs:string($diffLeverage) ne '') then firm:MLRoundingFunction(xs:double($diffLeverage),2) else 0),
                                  map:put($res-obj,'DiffFemaleAttorneys',if(xs:string($diffFemaleAttorneys) ne '') then $diffFemaleAttorneys else 0),
                                  map:put($res-obj,'DiffMinorityAttorneys',if(xs:string($diffMinorityAttorneys) ne '') then $diffMinorityAttorneys else 0),
                                  map:put($res-obj,'ProfitPerPartner',if(xs:string($profitPartner) ne '')then firm:MLRoundingFunction($profitPartner,2) else 0),
                                  map:put($res-obj,'PercentageEquityPartner',if(xs:string($percentEquityPartner) ne '') then firm:MLRoundingFunction($percentEquityPartner,2) else 0),
                                  map:put($res-obj,'MedianProfitPerPartner',if(xs:string($medianProfitPerPartner) ne '') then firm:MLRoundingFunction($medianProfitPerPartner,2) else 0),
                                  map:put($res-obj,'MedianPercentageEquityPartner',if(xs:string($medianPercentEquityPartner) ne '') then firm:MLRoundingFunction($medianPercentEquityPartner,2) else 0),
                                  map:put($res-obj,'DiffProfitPerPartner',if(xs:string($diffProfitPartner) ne '') then firm:MLRoundingFunction($diffProfitPartner,4) else 0),
                                  map:put($res-obj,'DiffPercentageEquityPartner',if(xs:string($diffpercentEquityPartner) ne '') then firm:MLRoundingFunction($diffpercentEquityPartner,2) else 0),
								  
								  map:put($res-obj,'NUM_EQUITY_PARTNERS',math:median(($global100NonPrimary//Global_100:NUM_EQUITY_PARTNERS/text()))),
								  map:put($res-obj,'NUM_PARTNERS',math:median(($global100NonPrimary//Global_100:NUM_PARTNERS/text())))
                                  )

                 return()                      
   return $res-obj
  
};

declare function firm:IsAnalysis($firmID)
{
   let $maxYear := max(cts:search(/,
                        cts:and-query((
                          cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/')
                        )))//AMLAW_200:PUBLISHYEAR/text())
   
   let $amLawOrganizationID := cts:search(/,
                                cts:and-query((
                                  cts:directory-query('/LegalCompass/relational-data/surveys/AMLAW_200/'),
                                  cts:element-value-query(xs:QName('AMLAW_200:PUBLISHYEAR'),xs:string($maxYear)),
                                  cts:element-value-query(xs:QName('AMLAW_200:ORGANIZATION_ID'),xs:string($firmID))
                                )))[1]//AMLAW_200:ORGANIZATION_ID/text()
                                
  let $nlj250OrganizationID := cts:search(/,
                                cts:and-query((
                                  cts:directory-query("/LegalCompass/relational-data/surveys/NLJ_250/"),
                                  cts:element-value-query(xs:QName('nlj250:ORGANIZATION_ID'),xs:string($firmID)),
                                  cts:element-value-query(xs:QName('nlj250:PUBLISHYEAR'),xs:string($maxYear))
                                  )))[1]//nlj250:ORGANIZATION_ID/text()
  
  let $uk50OrganizationID := cts:search(/,
                              cts:and-query((
                                cts:directory-query('/LegalCompass/relational-data/surveys/UK_50/'),
                                cts:element-value-query(xs:QName('UK_50:PUBLISHYEAR'),xs:string($maxYear)),
                                cts:element-value-query(xs:QName('UK_50:ORGANIZATION_ID'),xs:string($firmID))
                                )))[1]//UK_50:ORGANIZATION_ID/text()

  let $orgID := if($amLawOrganizationID ne '') then $amLawOrganizationID else 
                    if($nlj250OrganizationID ne '') then $nlj250OrganizationID else 
                        if($uk50OrganizationID ne '') then $uk50OrganizationID else 0
  return $orgID                    
};

(:-------------------- HEAT MAP ---------------------:)

declare function firm:sp_GetLawyerCountByStatePractice($state,$cities,$gRegions,$uRegions,$practiseAreas,$firmIDs,$fromDate,$toDate,$titles,$lastAction)
{
  let $res-array := json:array()
  let $cities := firm:getState($state,$cities,$gRegions,$uRegions) 
  let $practiseArea := fn:tokenize($practiseAreas,'[|]')
  let $title := fn:tokenize($titles,',')
  
  let $loopData := for $item in $cities
                       let $res-obj := json:object()
                       
                       let $stdLoc := cts:search(/,
                                        cts:and-query((
                                         cts:directory-query('/LegalCompass/relational-data/city/'),
                                         cts:element-value-query(xs:QName('city:country'),'USA'),
                                         cts:element-value-query(xs:QName('city:state'),$item)
                                         )))//city:std_loc/text()
                       
                       let $headCountTotal := xdmp:estimate(cts:search(/,
                                        cts:and-query((
                                          cts:directory-query('/LegalCompass/denormalized-data/TBL_RER_CACHE_ATTORNEY_DATA/'),
                                          if($practiseAreas ne '') then cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_DATA:practices'),$practiseArea,('wildcarded')) else (),
                                          cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_DATA:location'),$stdLoc),
                                          if($firmIDs ne '') then cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_DATA:firm_id'),fn:tokenize($firmIDs , ',')) else(),
                                          cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_DATA:title'),('Partner','Associate','Other Counsel/Attorney')),
										  if($lastAction ne '') then cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_DATA:last_action'),fn:tokenize($lastAction,',')) else()
										  (:if($titles ne '') then  else():)
                                          ))))
                                          
                       let $headCountPlusTotal := xdmp:estimate(cts:search(/,
                                        cts:and-query((
                                          cts:directory-query('/LegalCompass/denormalized-data/TBL_RER_CACHE_ATTORNEY_MOVESCHANGES/'),
                                          if($firmIDs ne '') then cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:firm_id'),fn:tokenize($firmIDs , ',')) else(),
                                          if($fromDate ne'' and $toDate ne '') then cts:and-query((
                                                cts:element-range-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action_date'),'>=',xs:date($fromDate)),
                                                cts:element-range-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action_date'),'<=',xs:date($toDate)))) else(),
                                          if($practiseAreas ne '') then cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:practices'),$practiseArea,('wildcarded')) else (),
                                          cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:location'),$stdLoc),
                                          cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'),('Partner','Associate','Other Counsel/Attorney')),
                                          cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'),('added'))
                                          ))))
                                          
                       let $headCountMinusTotal := xdmp:estimate(cts:search(/,
                                        cts:and-query((
                                          cts:directory-query('/LegalCompass/denormalized-data/TBL_RER_CACHE_ATTORNEY_MOVESCHANGES/'),
                                          if($firmIDs ne '') then cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:firm_id'),fn:tokenize($firmIDs , ',')) else(),
                                          if($practiseAreas ne '') then cts:element-word-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:practices'),$practiseArea,('wildcarded')) else (),
                                          if($fromDate ne'' and $toDate ne '') then cts:and-query((
                                                cts:element-range-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action_date'),'>=',xs:date($fromDate)),
                                                cts:element-range-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action_date'),'<=',xs:date($toDate)))) else(),
                                          cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:location'),$stdLoc),
                                          cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:title'),('Partner','Associate','Other Counsel/Attorney')),
                                          cts:element-value-query(xs:QName('TBL_RER_CACHE_ATTORNEY_MOVESCHANGES:last_action'),('removed'))
                                          ))))
                                          
                      let $changes := if($headCountTotal) then fn:round((xs:double($headCountPlusTotal - $headCountMinusTotal) div xs:double($headCountTotal)) * 100) else 0
					  
                      let $_ := (
									 map:put($res-obj,'country','USA'),
									 map:put($res-obj,'state',$item),
									 map:put($res-obj,'headCount',xs:string($headCountTotal)),
									 map:put($res-obj,'headCountPlus',xs:string($headCountPlusTotal)),
									 map:put($res-obj,'headCountMinus',xs:string($headCountMinusTotal)),
									 map:put($res-obj,'Changes',xs:string($changes))
                                 )
                      let $_ := json:array-push($res-array,$res-obj)
                      return ()
                                          
  return $res-array
};

declare function firm:getState($state,$cities,$gRegions,$uRegions) 
{
  let $result := cts:search(/,
                  cts:and-query((
                   cts:directory-query('/LegalCompass/relational-data/city/'),
                   cts:element-value-query(xs:QName('city:country'),'USA'),
                   if($state ne '') then cts:element-value-query(xs:QName('city:state'),$state) else(),
                   if($cities ne '') then cts:element-value-query(xs:QName('city:city'),$cities) else(),
                   if($gRegions ne '') then cts:element-value-query(xs:QName('city:geographic_region'),$gRegions) else(),
                   if($uRegions ne '') then cts:element-value-query(xs:QName('city:geographic_region'),$uRegions) else()
                   )))
  return distinct-values($result//city:state/text())
};

declare function firm:GetPracticeAreaFromLawFirm($firmID)
{
  let $res-arr := json:array()
  let $result := cts:search(/,
                    cts:and-query((
                      cts:directory-query('/LegalCompass/relational-data/LawFirm_PracticeArea/'),
                      cts:element-value-query(xs:QName('LawFirm_PracticeArea:FIRMID'),$firmID)
                    )))
  let $loopData := for $item in $result
					   let $res-obj := json:object()
					   let $_ := (map:put($res-obj,'AdminCount',$item//LawFirm_PracticeArea:ADMINCOUNT/text()),
								  map:put($res-obj,'AssociateCount',$item//LawFirm_PracticeArea:ASSOCIATECOUNT/text()),
								  map:put($res-obj,'FirmID',$item//LawFirm_PracticeArea:FIRMID/text()),
								  map:put($res-obj,'HeadCount',$item//LawFirm_PracticeArea:HEADCOUNT/text()),
								  map:put($res-obj,'OtherCounselCount',$item//LawFirm_PracticeArea:OTHERCOUNSELCOUNT/text()),
								  map:put($res-obj,'OtherCount',$item//LawFirm_PracticeArea:OTHERCOUNT/text()),
								  map:put($res-obj,'PartnerCount',$item//LawFirm_PracticeArea:PARTNERCOUNT/text()),
								  map:put($res-obj,'Practicearea',$item//LawFirm_PracticeArea:PRACTICEAREA/text()))
					   let $_ := json:array-push($res-arr,$res-obj)
					   return()
   return $res-arr
};

declare function firm:GetOrganizations($firmID)
{
	let $response-arr := json:array()
let $result :=cts:search(/,
                  cts:and-query((
                    cts:directory-query('/LegalCompass/relational-data/organization/'),
                    cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'), $firmID)
                  )))[1]                  
let $response-obj := json:object()
let $orgName := if($result//organizations:ALM_NAME/text() ne '' or $result//organizations:ALM_NAME/text() ne 'null')
  then $result//organizations:ALM_NAME/text()
  else $result//organizations:ORGANIZATION_NAME/text()
let $_ := 
  (
  map:put($response-obj,'ORGANIZATION_ID',$result//organizations:ORGANIZATION_ID/text())
  ,map:put($response-obj,'ORGANIZATION_NAME',$orgName)
  ,map:put($response-obj,'ORGANIZATION_SHORT_NAME',$result//organizations:ORGANIZATION_SHORT_NAME/text())
  ,map:put($response-obj,'ORGANIZATION_TYPE_ID',$result//organizations:ORGANIZATION_TYPE_ID/text())
  ,map:put($response-obj,'ORGANIZATION_INDUSTRY_CODE',$result//organizations:ORGANIZATION_INDUSTRY_CODE/text())
  ,map:put($response-obj,'PARENT_ORGANIZATION_ID',$result//organizations:PARENT_ORGANIZATION_ID/text())
  ,map:put($response-obj,'DEDUP',$result//organizations:DEDUP/text())
  ,map:put($response-obj,'CREATE_DATE',$result//organizations:CREATE_DATE/text())
  ,map:put($response-obj,'CREATED_BY',$result//organizations:CREATED_BY/text())
  ,map:put($response-obj,'LAST_MODIFIED',$result//organizations:LAST_MODIFIED/text())
  ,map:put($response-obj,'LAST_MODIFIED_BY',$result//organizations:LAST_MODIFIED_BY/text())
  ,map:put($response-obj,'LOCKED_BY_USER_ID',$result//organizations:LOCKED_BY_USER_ID/text())
  ,map:put($response-obj,'LOCKED_DATE_TIME',$result//organizations:LOCKED_DATE_TIME/text())
  ,map:put($response-obj,'LOCKED_BY_MACHINE_NAME',$result//organizations:LOCKED_BY_MACHINE_NAME/text())
  ,map:put($response-obj,'LOCKED_BY_PROCESS',$result//organizations:LOCKED_BY_PROCESS/text())
  ,map:put($response-obj,'YEAR_DISBANDED',$result//organizations:YEAR_DISBANDED/text())
  ,map:put($response-obj,'SOURCE',$result//organizations:SOURCE/text())
  ,map:put($response-obj,'MH_ORG_ID',$result//organizations:MH_ORG_ID/text())
  ,map:put($response-obj,'MH_RATING',$result//organizations:MH_RATING/text())
  ,map:put($response-obj,'WEBSITE',$result//organizations:WEBSITE/text())
  ,map:put($response-obj,'ATTORNEY_COUNT',$result//organizations:ATTORNEY_COUNT/text())
  ,map:put($response-obj,'HEADQUARTERS',$result//organizations:HEADQUARTERS/text())
  ,map:put($response-obj,'ORGANIZATION_EXCERPTS',$result//organizations:ORGANIZATION_EXCERPTS/text())
  ,map:put($response-obj,'MH_URL',$result//organizations:MH_URL/text())
  ,map:put($response-obj,'CORP_STATUS',$result//organizations:CORP_STATUS/text())
  ,map:put($response-obj,'INTERNAL_NOTES',$result//organizations:INTERNAL_NOTES/text())
  ,map:put($response-obj,'UPDATED_DATE',$result//organizations:UPDATED_DATE/text())
  ,map:put($response-obj,'ORGANIZATION_NOTES',$result//organizations:ORGANIZATION_NOTES/text())
  ,map:put($response-obj,'ADDITIONAL_INFORMATION',$result//organizations:ADDITIONAL_INFORMATION/text())
  ,map:put($response-obj,'OVERRIDEPROFILE',$result//organizations:OVERRIDEPROFILE/text())
  ,map:put($response-obj,'IS_INSERTED_OR_MODIFIED',$result//organizations:IS_INSERTED_OR_MODIFIED/text())
  ,map:put($response-obj,'ISALM500',$result//organizations:ISALM500/text())
  ,map:put($response-obj,'ORGANIZATION_CLEAN_NAME',$result//organizations:ORGANIZATION_CLEAN_NAME/text())
  ,map:put($response-obj,'LOGO',$result//organizations:LOGO/text())
  ,map:put($response-obj,'ORGANIZATION_PROFILE',$result//organizations:ORGANIZATION_PROFILE/text())
  ,map:put($response-obj,'ALM_ID',$result//organizations:ALM_ID/text())
  ,map:put($response-obj,'ALM_NAME',$result//organizations:ALM_NAME/text())
  )
  
let $_ := json:array-push($response-arr, $response-obj)
return $response-arr
};

declare function firm:GetReNews($companyID,$fromDate,$toDate)
{
  let $res-array := json:array()
  let $result := cts:search(/,
                    cts:and-query((
                      cts:directory-query('/LegalCompass/relational-data/data/'),
                      cts:element-value-query(xs:QName('data:company_id'),$companyID),
                      if($fromDate ne '' and $toDate ne '') then cts:and-query((
					  cts:not-query(cts:element-word-query(xs:QName('data:std_date'),('0/0/0000','*0/0/*'),('wildcarded'))),
                          cts:element-range-query(xs:QName('data:std_date'),'>=',xs:date($fromDate)),
                          cts:element-range-query(xs:QName('data:std_date'),'<=',xs:date($toDate))
                      )) else()
                    )))
                   
  let $loopData := for $item in $result
                       let $res-obj := json:object()
                       let $dataSource := if($item//data:data_source/text() eq 'RSS') then $item//data:entry_source/text()
                                          else $item//data:data_source/text()
					   let $ds := fn:replace($dataSource,'CompanySite','Firm Site')				  
                       let $_ := (map:put($res-obj,'NewsPublisher',$ds),
                                  map:put($res-obj,'Headline',$item//data:title/text()),
                                  map:put($res-obj,'NewsDate',$item//data:std_date/text()),
                                  map:put($res-obj,'NewsURL',$item//data:link/text()),
                                  map:put($res-obj,'RelatedPractice',$item//data:std_practices/text()),
                                  map:put($res-obj,'Source',$ds),
                                  map:put($res-obj,'Summary',$item//data:descrip/text()),
                                  map:put($res-obj,'Type',$item//data:type/text())
                                  )
                      let $_ :=json:array-push($res-array,$res-obj)            
                      return()
  return $res-array
};

declare function firm:GetLawfirmLocations1PostMerger($OrganisationID)
{
	let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)

	let $data := if($checkMergerData != '') then firm:GetLawfirmLocations1PM($OrganisationID) else firm:GetLawfirmLocations1($OrganisationID)
	return $data
};

declare function firm:GetLawfirmLocations1($firmID)
{
  let $res-array := json:array()
  let $result := cts:search(/,
                    cts:and-query((
                      cts:directory-query('/LegalCompass/relational-data/LAWFIRMLOCATIONS/'),
                      cts:element-value-query(xs:QName('LAWFIRMLOCATIONS:FIRMID'),$firmID)
                    )))[1 to 3]
                    
  let $loopData := for $item in $result
                       let $res-obj := json:object()
                       let $organization := cts:search(/,
                                              cts:and-query((
                                                cts:directory-query('/LegalCompass/relational-data/organization/'),
                                                cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),$item//LAWFIRMLOCATIONS:FIRMID/text())
                                              )))[1]
                        
                       let $orgName := if($organization//organizations:ALM_NAME/text() ne '') then $organization//organizations:ALM_NAME/text()
                                       else $organization//organizations:organization_name/text()
                       
					   let $_ := (map:put($res-obj,'Associates',$item//LAWFIRMLOCATIONS:ASSOCIATES/text()),
                                  map:put($res-obj,'BranchOffice',$item//LAWFIRMLOCATIONS:BRANCHOFFICE/text()),
                                  map:put($res-obj,'City',$item//LAWFIRMLOCATIONS:CITY/text()),
                                  map:put($res-obj,'Country',$item//LAWFIRMLOCATIONS:COUNTRY/text()),
                                  map:put($res-obj,'CountryType',$item//LAWFIRMLOCATIONS:COUNTRYTYPE/text()),
                                  map:put($res-obj,'EquityPartners',$item//LAWFIRMLOCATIONS:EQUITYPARTNERS/text()),
                                  map:put($res-obj,'FirmId',$item//LAWFIRMLOCATIONS:FIRMID/text()),
                                  map:put($res-obj,'FirmName',$orgName),
                                  map:put($res-obj,'NonEquityPartners',$item//LAWFIRMLOCATIONS:NONEQUITYPARTNERS/text()),
                                  map:put($res-obj,'NoofAttorneys',$item//LAWFIRMLOCATIONS:NOOFATTORNEYS/text()),
                                  map:put($res-obj,'NoofPartners',$item//LAWFIRMLOCATIONS:NOOFPARTNERS/text()),
                                  map:put($res-obj,'OtherAttorneys',$item//LAWFIRMLOCATIONS:OTHERATTORNEYS/text()),
                                  map:put($res-obj,'State',$item//LAWFIRMLOCATIONS:STATE/text())
                                  ) 
                      let $_ := json:array-push($res-array,$res-obj)
                      return()
  return $res-array
};

declare function firm:GetLawfirmLocations1PM($OrganisationID)
{
  let $checkMergerData := firmnew:GetLawFirmMergerData($OrganisationID)
  let $orgIDs := if($checkMergerData != '') then fn:tokenize(fn:concat(fn:string-join(fn:tokenize($checkMergerData,'[|]'),','),',',$OrganisationID),',') else $OrganisationID

  let $res-array := json:array()
  let $result := cts:search(/,
                    cts:and-query((
                      cts:directory-query('/LegalCompass/relational-data/LAWFIRMLOCATIONS/'),
                      cts:element-value-query(xs:QName('LAWFIRMLOCATIONS:FIRMID'),$orgIDs)
                    )))
                    
  let $loopData := for $item in $result
                       let $res-obj := json:object()
                       let $organization := cts:search(/,
                                              cts:and-query((
                                                cts:directory-query('/LegalCompass/relational-data/organization/'),
                                                cts:element-value-query(xs:QName('organizations:ORGANIZATION_ID'),$item//LAWFIRMLOCATIONS:FIRMID/text())
                                              )))[1]
                        
                       let $orgName := if($organization//organizations:ALM_NAME/text() ne '') then $organization//organizations:ALM_NAME/text()
                                       else $organization//organizations:organization_name/text()
                       
					   let $_ := (map:put($res-obj,'Associates',$item//LAWFIRMLOCATIONS:ASSOCIATES/text()),
                                  map:put($res-obj,'BranchOffice',$item//LAWFIRMLOCATIONS:BRANCHOFFICE/text()),
                                  map:put($res-obj,'City',$item//LAWFIRMLOCATIONS:CITY/text()),
                                  map:put($res-obj,'Country',$item//LAWFIRMLOCATIONS:COUNTRY/text()),
                                  map:put($res-obj,'CountryType',$item//LAWFIRMLOCATIONS:COUNTRYTYPE/text()),
                                  map:put($res-obj,'EquityPartners',$item//LAWFIRMLOCATIONS:EQUITYPARTNERS/text()),
                                  map:put($res-obj,'FirmId',$item//LAWFIRMLOCATIONS:FIRMID/text()),
                                  map:put($res-obj,'FirmName',$orgName),
                                  map:put($res-obj,'NonEquityPartners',$item//LAWFIRMLOCATIONS:NONEQUITYPARTNERS/text()),
                                  map:put($res-obj,'NoofAttorneys',$item//LAWFIRMLOCATIONS:NOOFATTORNEYS/text()),
                                  map:put($res-obj,'NoofPartners',$item//LAWFIRMLOCATIONS:NOOFPARTNERS/text()),
                                  map:put($res-obj,'OtherAttorneys',$item//LAWFIRMLOCATIONS:OTHERATTORNEYS/text()),
                                  map:put($res-obj,'State',$item//LAWFIRMLOCATIONS:STATE/text())
                                  ) 
                      let $_ := json:array-push($res-array,$res-obj)
                      return()
  return $res-array
};

declare function firm:MLRoundingFunction($value , $digit)
{
  let $powerValue :=  math:pow(10, $digit) * $value
  let $rf := $powerValue - xs:integer($powerValue)
  let $decimalResult := if(fn:abs($rf)>=0.5) then if($rf >=0) then 1 else -1 else 0
  let $result := (xs:integer($powerValue) + $decimalResult) div math:pow(10, $digit)
  
  return $result

};

(:----------------------------------- Keyword helper function -----------------------------------:)

declare function firm:GetAndOperatorQuery($Keywords)
{
	let $query := cts:or-query((
										cts:and-query((
										for $item in fn:tokenize(fn:lower-case($Keywords),' and ')
										
											return 
											
											 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'),fn:concat('*',$item,'*'),('wildcarded','case-insensitive'))
											 
											
										)),
										
										cts:and-query((for $item in fn:tokenize(fn:lower-case($Keywords),' and ')
										
											return 
											
											 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'),fn:concat('*',$item,'*'),('wildcarded','case-insensitive'))
											
											
										)),
										
										cts:and-query((for $item in fn:tokenize(fn:lower-case($Keywords),' and ')
										
											return 
											
											 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'),fn:concat('*',$item,'*'),('wildcarded','case-insensitive'))
										))
										
										))
	return $query									
};

declare function firm:GetOrOperatorQuery($Keywords)
{
	let $query := cts:or-query((
										cts:or-query((
										for $item in fn:tokenize(fn:lower-case($Keywords),' or ')
										
											return 
											
											 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'),fn:concat('*',$item,'*'),('wildcarded','case-insensitive'))
											 
											
										)),
										
										cts:or-query((for $item in fn:tokenize(fn:lower-case($Keywords),' or ')
										
											return 
											
											 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'),fn:concat('*',$item,'*'),('wildcarded','case-insensitive'))
											
											
										)),
										
										cts:or-query((for $item in fn:tokenize(fn:lower-case($Keywords),' or ')
										
											return 
											
											 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'),fn:concat('*',$item,'*'),('wildcarded','case-insensitive'))
										))
										
										))
										
	return $query									
};

declare function firm:GetExactOrOperatorQuery($Keywords)
{
	let $query := cts:or-query((
										cts:or-query((
										for $item in fn:tokenize(fn:lower-case($Keywords),'" or "')
										
											return 
											
											 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'),fn:concat('*',fn:replace($item,'"',''),'*'),('case-insensitive'))
											 
											
										)),
										
										cts:or-query((for $item in fn:tokenize(fn:lower-case($Keywords),'" or "')
										
											return 
											
											 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'),fn:concat('*',fn:replace($item,'"',''),'*'),('case-insensitive'))
											
											
										)),
										
										cts:or-query((for $item in fn:tokenize(fn:lower-case($Keywords),'" or "')
										
											return 
											
											 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'),fn:concat('*',fn:replace($item,'"',''),'*'),('case-insensitive'))
										))
										
										))
	return $query									
};

declare function firm:GetExactAndOperatorQuery($Keywords)
{
	let $query := cts:or-query((
										cts:and-query((
										for $item in fn:tokenize(fn:lower-case($Keywords),'" and "')
										
											return 
											
											 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'),fn:concat('*',fn:replace($item,'"',''),'*'),('case-insensitive'))
											 
											
										)),
										
										cts:and-query((for $item in fn:tokenize(fn:lower-case($Keywords),'" and "')
										
											return 
											
											 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'),fn:concat('*',fn:replace($item,'"',''),'*'),('case-insensitive'))
											
											
										)),
										
										cts:and-query((for $item in fn:tokenize(fn:lower-case($Keywords),'" and "')
										
											return 
											
											 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'),fn:concat('*',fn:replace($item,'"',''),'*'),('case-insensitive'))
										))
										
										))
	return $query									
};

declare function firm:GetAndOrOperatorQuery($keyword)
{
	let $key := fn:tokenize($keyword,' or ')
	for $Keywords in $key
		let $query := cts:or-query((
											cts:and-query((
											for $item in fn:tokenize(fn:lower-case($Keywords),' and ')
											
												return 
												
												 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'),fn:concat('*',fn:replace($item,'"',''),'*'),('wildcarded','case-insensitive'))
												 
												
											)),
											
											cts:and-query((for $item in fn:tokenize($Keywords,' and ')
											
												return 
												
												 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'),fn:concat('*',fn:replace($item,'"',''),'*'),('wildcarded','case-insensitive'))
												
												
											)),
											
											cts:and-query((for $item in fn:tokenize($Keywords,' and ')
											
												return 
												
												 cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'),fn:concat('*',fn:replace($item,'"',''),'*'),('wildcarded','case-insensitive'))
											))
											
											))
		return $query
		
		
};

declare function firm:GetOfficeTrendsFirmID()
{
let $request := xdmp:get-request-body()/request	

let $PracticeAreas := fn:tokenize($request/PracticeAreas/text(),'[|]')
let $Cities := tokenize($request/cities/text(), '~')
let $FirmIds := tokenize($request/firmIds/text(), ',')
let $Keywords := $request/Keyword/text()
let $FirmSizeFrom := $request/firmSizefrom/text()
let $FirmSizeTo := $request/firmSizeTo/text()
let $isPrimaryPracticeArea := if($request/isPrimaryPracticeArea/text() ne '') then $request/isPrimaryPracticeArea/text() else 'false'

let $maxYears := fn:max(cts:element-attribute-values(xs:QName("survey:YEAR"),xs:QName("PublishYear"),(),("descending"),
  cts:and-query((
    cts:directory-query("/LegalCompass/denormalized-data/surveys/AMLAW_200/","1")
  ))))

let $femaleScorecardMaxYear := max(cts:search(/,
    cts:and-query((
    cts:directory-query("/LegalCompass/relational-data/surveys/FEMALE_SCORECARD/")
    )))//FEMALE_SCORECARD:PUBLISHYEAR/text())

 (: let $PracticeAreas := fn:tokenize(fn:string-join($PracticeAreas ! fn:string(fn:replace(.,"amp;amp;",'')),','),',') :)

let $PracticeArea-Query := if($PracticeAreas != '')then
  if(xs:string($isPrimaryPracticeArea) ne 'true') then cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'), $PracticeAreas, ('case-insensitive'))
  else cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:primary_practice'), $PracticeAreas, ('case-insensitive'))
  else ()

let $Keyword-Query := if($Keywords !='') then
			
							if(fn:contains(fn:lower-case($Keywords),'and') and fn:not(fn:contains(fn:lower-case($Keywords),'"'))) then 
								 firm:GetAndOperatorQuery($Keywords)
													
							
							else if(fn:contains(fn:lower-case($Keywords),'or') and fn:not(fn:contains(fn:lower-case($Keywords),'"'))) then 
								 firm:GetOrOperatorQuery($Keywords)
													
							else if(fn:contains(fn:lower-case($Keywords),'"') and fn:contains(fn:lower-case($Keywords),'" or "')) then 
								 firm:GetExactOrOperatorQuery($Keywords)
										
							else if(fn:contains(fn:lower-case($Keywords),'"') and fn:contains(fn:lower-case($Keywords),'" and "')) then 
								 firm:GetExactAndOperatorQuery($Keywords)			
										
							else if(fn:contains(fn:lower-case($Keywords),' or ') and fn:contains(fn:lower-case($Keywords),' and ')) then 
								 firm:GetAndOrOperatorQuery($Keywords)
							
							(:else if(fn:contains(fn:lower-case($Keywords),'"') and fn:not(fn:contains(fn:lower-case($Keywords),'" and "')) and fn:not(fn:contains(fn:lower-case($Keywords),'" or "'))) then 
								 news:GetExactAndOperatorQuery($Keywords)	:)
							
							else if(fn:contains($Keywords,',') and fn:not(fn:contains(fn:lower-case($Keywords),'"'))) then
								   cts:or-query((
									cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive'))
										))
								else if(fn:contains($Keywords,' ') and fn:not(fn:contains(fn:lower-case($Keywords),'"'))) then 
								   cts:or-query((
									cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'),fn:concat('*',$Keywords,'*'),('wildcarded','case-insensitive'))
										))
								else cts:or-query((
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'),fn:replace($Keywords,'"',''),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'),fn:replace($Keywords,'"',''),('wildcarded','case-insensitive')),
										cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'),fn:replace($Keywords,'"',''),('wildcarded','case-insensitive'))
										))
							
					else ()
  
(:let $Keyword-Query := if($Keyword != '') then
	cts:or-query((
  		cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:practices'), fn:concat("*",$Keyword,"*"),("case-insensitive","punctuation-insensitive","whitespace-insensitive","wildcarded")),
		cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:education'), fn:concat("*",$Keyword,"*"),("case-insensitive","punctuation-insensitive","whitespace-insensitive","wildcarded")),
		cts:element-word-query(xs:QName('ALI_RE_Attorney_Data:keywords'), fn:concat("*",$Keyword,"*"),("case-insensitive","punctuation-insensitive","whitespace-insensitive","wildcarded"))
	))
  else ()  :)
  
let $ID-Query := if($FirmIds != '')then
  cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:ALI_ID'), $FirmIds, ('case-insensitive'))
  else ()
  
let $query := 
  cts:and-query(((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
    ,$Keyword-Query
    ,$ID-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities,('case-insensitive','whitespace-sensitive'))
)))

let $city-data := cts:search(/city_detail:city_detail,
            cts:and-query((
               cts:directory-query('/LegalCompass/relational-data/city_detail/')
              ,cts:element-value-query(xs:QName('city_detail:STD_LOC'), $Cities, ('case-insensitive','whitespace-sensitive'))              
            )))[1] 

let $search := for $company in fn:distinct-values(cts:search(/ALI_RE_Attorney_Data,$query)//ALI_RE_Attorney_Data:firm_id/text())
  
  let $headcount := if ($Keywords ne "" )
  then count(cts:search(/,
    cts:and-query((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
    ,$Keyword-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities,('case-insensitive','whitespace-sensitive'))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'),('case-insensitive'))
    ))))
  else xdmp:estimate(cts:search(/,
    cts:and-query((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities,('case-insensitive','whitespace-sensitive'))
	(: ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities) :)
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney'),('case-insensitive'))
    ))))
  
	
	let $A := (cts:search(/,
    cts:and-query((
     cts:directory-query('/LegalCompass/denormalized-data/ALI_RE_Attorney_Data/')
    ,$PracticeArea-Query
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:location'), $Cities, ('case-insensitive','whitespace-sensitive'))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:firm_id'), xs:string($company))
    ,cts:element-value-query(xs:QName('ALI_RE_Attorney_Data:title'), ('Partner', 'Associate', 'Other Counsel/Attorney','Other','Administrative / Support Staff'),('case-insensitive'))
    ))))[1]

  let $FIRMID := if($A//ALI_RE_Attorney_Data:ALI_ID/text() ne "")
    then $A//ALI_RE_Attorney_Data:ALI_ID/text()
    else $A//ALI_RE_Attorney_Data:firm_id/text()
	
  
    
  (: let $headquater := if($e//org-address:COUNTRY/text() eq 'USA') then
    fn:concat($e//org-address:CITY/text(),", ",$e//org-address:STATE/text())    
    else
    fn:concat($e//org-address:CITY/text(),", ",$e//org-address:COUNTRY/text()) :)
    

	
  return if($FirmSizeFrom ge 0 and $FirmSizeTo ge 0) then( 
  if((xs:integer($headcount) ge $FirmSizeFrom) and (xs:integer($headcount) le $FirmSizeTo)) then  
  let $response-obj := json:object()  
  let $_ := (
    map:put($response-obj,'firmID', $FIRMID)	
  )
  return $response-obj  
  else ()
  )
  else (
  if(xs:integer($headcount) > 0) then
  let $response-obj := json:object()  
  let $_ := (
    map:put($response-obj,'firmID', $FIRMID)   
  )
  return $response-obj  
  else()
  )
  
 let $search-obj := json:object()  
 let $_ :=  map:put($search-obj , 'selectedFirms',$search)

 return $search-obj

};